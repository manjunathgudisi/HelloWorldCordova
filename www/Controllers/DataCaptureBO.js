
///ControlId_IsModified :modifying flag (for ex: now we are using for signature pad only)LstUpdatedAnswer
//ControlId_IsManual:notifying data enter via humenbeeing or other device(ex:Bluetoothprob,barcode reader etc...)
//ControlId_IsReadOnly :for setting the control read only status
var CPActionResult = {};
var CPActionType = { "CustomAction": 1, "PredefinedAction": 2 };
var CPTemplateResult = {};
function DataCaptureBO(InputParm) {
    try {
        OneViewConsole.Debug("DataCaptureBO start", "BO.DataCaptureBO");

        this.IsShiftEnable = true;
        var MyInstance = this;
        this.CreateDynamicElementHandler;

        this.SetShiftHandler;
        var TemplateId;
        var TemplateName;
        var oScope;
        var xlatService;
        var toaster;
        var TemplateNodes;
        var ocompile;
        var otimeoutService;
        if (InputParm != undefined) {
            TemplateId = InputParm.TemplateId;
            TemplateName = InputParm.TemplateName;
            if (InputParm.scope != undefined) {
                oScope = InputParm.scope;
            }
            if (InputParm.timeoutService != undefined) {
                otimeoutService = InputParm.timeoutService;
            }
            if (InputParm.toaster != undefined) {
                toaster = InputParm.toaster;
            }
            if (InputParm.xlatService != undefined) {
                xlatService = InputParm.xlatService;
            }
            if (InputParm.TemplateNodes != undefined) {
                TemplateNodes = InputParm.TemplateNodes;
            }
            if (InputParm.compile != undefined) {
                ocompile = InputParm.compile;
            }
        }
        var ServiceId = OneViewSessionStorage.Get("ServiceId");
        var ServiceName = OneViewSessionStorage.Get("ServiceName");
        //var DcProfileId = 1;
        var DcPlaceId = OneViewSessionStorage.Get("DcPlaceId");
        //var DcPlaceDimension = OneViewSessionStorage.Get("DcPlaceDimension");
        var DcPlaceDimension = 'OrganizationHierachyNode';

        var DcPlaceName = OneViewSessionStorage.Get("DcPlaceName");
        var LoginUserId = OneViewSessionStorage.Get("LoginUserId");
        var LoginUserName = OneViewSessionStorage.Get("LoginUserName");
        var DcId = OneViewSessionStorage.Get("DcId");
        var DcProfileId = OneViewSessionStorage.Get("DcProfileId");
        var DcOccurence = OneViewSessionStorage.Get("DcOccurence");
        var DcStartDateFromSession = OneViewSessionStorage.Get("DcStartDate");


        var oToaster = toaster;
        var oxlatService = xlatService;
        var oTemplateNodes = TemplateNodes;

        //this.ControlIdForAutoTemperatureUpdation;
        //this.ControlIdForAutoTimeUpdation;
        this.ModelIdForAutoTemperatureUpdation;
        this.ModelIdForAutoTimeUpdation;

        this.AutoTemperatureUpdationReqObj;        

        var oDataCaptureDAO = new DcDAO();



        this.SaveDCValidatorConfigList = [];
        this.DCNCMappingList = [];
        this.NCPreEditDataList;
        this.MultiMediaSubElementsList = [];
        // this.SaveDCValidatorConfigList = null;
        this.ActionManualFollowUpDict = null;
        this.ActionManualFollowUpInfoHandler = null;

        var _oDataCaptureEntity = null;

        //############## Event handlers Start################

        //Event args :(this)
        this.BeforeSaveDCEventHandler;
        //Event args :(this)
        this.BeforeUpdateDCEventHandler;
        this.SetAutoTemperatureEventHandler;
        this.TemperatureNgKeyUpEventHandler;
        this.DeleteNCEventHandler = false;
        this.CorrectiveActionEventHandler = null;
        this.IncidentReportHandler = { 'LoadObservation': null, 'SaveObservation': null, 'UpdateObservation': null }


        this.IncidentReportObservationSaveHandler = null;
        this.IncidentReportObservationUpdateHandler = null;
        
        
        //############## Event handlers End ################

        this.PreEditValues = {};

        var AttributeWiseActionDict = {};
        var NCListForDelete = [];

        this.IsNCOrObservationMandatory = false;
        this.IsCommentsMandatory = false;
        this.NCOrObservationRuleId = "";
        this.NCOrObservationRuleName = "";
        this.NCOrObservationRuleDescription = "";
        this.NCRuleId = "";
        this.IsManualRule = false;

        this.NCTemplateId = 0;
        this.NCTemplateName = "";

        this.FormActionCount = 0;
        this.RuleGroup = '';
        this.RuleCode = '';

        this.Deviatedby = '';
        this.ExpectedValue = '';
        this.ActualValue = '';
        this.TemplateNodeIds = '';
        this.DCDetailFromDBList = null;
        this.CurrentDcClientGuid = 0;
        this.IsEnableMandatoryStyle = false;
        this.PageLoadMandatoryOperation = "Submit";

        var AttributeActionNCConfig = null;
        var CPDcResultsId = 0;
        var ActionRightPanelTab = { Comments: 1, Action: 2 };

        var _oParentHeirarchyComponent = new ParentHeirarchyComponent();
        _oParentHeirarchyComponent.Init();
    
        OneViewConsole.Debug("DataCaptureBO end", "BO.DataCaptureBO");
    }
    catch (Excep) {
        throw oOneViewExceptionHandler.Create("BO", "BO.DataCaptureBO", Excep);
    }
    //############## PageLoad  Start ################
    //this.PageLoad = function () {
    //    MyInstance.ClearControls();
    //    MyInstance.setDefaultValue();
    //    SetMandatoryMetaData();
    //}


    this.Init = function () {
        try {
            OneViewConsole.Debug("Init Start", "DataCaptureBO.Init");
            AnswerModePreControlEvents = MyInstance.PreControlEvents;
          
            OneViewConsole.Debug("Init End", "DataCaptureBO.Init");
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.Init", xlatService);
        }
    }
    //TODO: Make the code generic
    //Multiple answer mode not supporting
    this.ClearControls = function () {
        try {
            OneViewConsole.Debug("ClearControls start", "DataCaptureBO.ClearControls");

            OneViewConsole.DataLog("TemplateNodes : " + JSON.stringify(TemplateNodes), "DataCaptureBO.ClearControls");
            for (var itrAttrId in TemplateNodes) {
              
            //   alert('itrAttrId :' + itrAttrId);
                var _oPrimarayAnswerModeInfo = TemplateNodes[itrAttrId].AnswerMode[0];
                //alert('_oPrimarayAnswerModeInfo : ' + JSON.stringify(_oPrimarayAnswerModeInfo));
                if (_oPrimarayAnswerModeInfo.Type == 'ScrollList') {
                   // alert('ScrollList');
                }
                else if (_oPrimarayAnswerModeInfo.Type == 'CHECKBOX') {
                    oScope.NewDCModel[_oPrimarayAnswerModeInfo.ControlId] = false;
                }
                else if (_oPrimarayAnswerModeInfo.Type == 'DDL') {
                   // alert('_oPrimarayAnswerModeInfo ddl :' + JSON.stringify(_oPrimarayAnswerModeInfo));
                    //(JSON.stringify(_oPrimarayAnswerModeInfo));
                    var _oddl = oScope[_oPrimarayAnswerModeInfo.ControlId];
                    _oddl.Clear();
                }
                else if (_oPrimarayAnswerModeInfo.Type == 'DCListViewControlConfig'
                        && (_oPrimarayAnswerModeInfo.ListViewDisplay == 2 || _oPrimarayAnswerModeInfo.ListViewDisplay == 1)) {

                    var DataSourceModelName = _oPrimarayAnswerModeInfo.ControlId + "DataSource";                    
                    var _oCheckBoxAnswerModeFramework = new CheckBoxAnswerModeFramework(itrAttrId, _oPrimarayAnswerModeInfo.ControlId);
                    _oCheckBoxAnswerModeFramework.Clear(oScope, DataSourceModelName);
                    oScope[DataSourceModelName + "_OLD"] = [];                    
                }
                else if (_oPrimarayAnswerModeInfo.Type == 'Band') {
                    //alert('_oPrimarayAnswerModeInfo ddl :' + JSON.stringify(_oPrimarayAnswerModeInfo));
                    var _oddl = oScope[_oPrimarayAnswerModeInfo.ControlId];
                    _oddl.Clear();
                }
                else if (_oPrimarayAnswerModeInfo.Type == 'TIME') {
                    var temp = document.getElementById(_oPrimarayAnswerModeInfo.ControlId);
                    if (temp !=null)
                        temp.value = '';
                    if (oScope[_oPrimarayAnswerModeInfo.ControlId + "_DateTime"] != undefined || oScope[_oPrimarayAnswerModeInfo.ControlId + "_DateTime"] != "") {
                        oScope[_oPrimarayAnswerModeInfo.ControlId + "_DateTime"] = "";
                    }

                    //Value not clearing : Date - 24-08-2015
                    //Added by Sangeeta Bhatt
                    if (oScope.NewDCModel != undefined && oScope.NewDCModel != null && oScope.NewDCModel != "") {
                        oScope.NewDCModel[_oPrimarayAnswerModeInfo.ControlId] = "";
                    }
                }
                else if (_oPrimarayAnswerModeInfo.DataType == 'DATAURL') {
                    oScope.lblSignature = "";
                    if (document.getElementById('lblEnterName') != null) {
                        document.getElementById('lblEnterName').value = "";
                    }

                    if (oScope[_oPrimarayAnswerModeInfo.ControlId + "_lblSignature"] != undefined || oScope[_oPrimarayAnswerModeInfo.ControlId + "_lblSignature"] != "") {
                        oScope[_oPrimarayAnswerModeInfo.ControlId + "_lblSignature"] = "";
                    }

                    if (oScope[_oPrimarayAnswerModeInfo.ControlId + "_SignaturePad"] != undefined && oScope[_oPrimarayAnswerModeInfo.ControlId + "_SignaturePad"] != "") {
                        oScope[_oPrimarayAnswerModeInfo.ControlId + "_SignaturePad"] = "";
                    }
                }
                else if (_oPrimarayAnswerModeInfo.Type == "DCImageCaptureControlConfig") {
                    oScope[_oPrimarayAnswerModeInfo.ControlId + "_ImageInfo"] = [];
                    oScope.NewDCModel[_oPrimarayAnswerModeInfo.ControlId] = "";
                }
                else {

                    oScope.NewDCModel[_oPrimarayAnswerModeInfo.ControlId] = '';
                }

                if (oScope[_oPrimarayAnswerModeInfo.ControlId + "_IsManual"] != undefined) {
                    oScope[_oPrimarayAnswerModeInfo.ControlId + "_IsManual"] = undefined;
                }
            }
            //if (OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") {
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                // Need to delete
                if (TemplateId == 44) {
                    oScope.ApprovalTagNo = false;
                    oScope.SNCNo = false;
                    oScope.FrozenState = false;
                    scope.PdMonthAndYear = false;
                    scope.PdDate = false;
                    scope.EXDate = false;
                    scope.EXUsedBy = false;
                    scope.EXUsedBefore = false;
                }
                else if (TemplateId == 442) {
                    scope.MachineChiller = false;
                    scope.MachineFreezer = false;
                }

                else if (TemplateId == 535) {
                    scope.PotMachineReadOnly = false;
                    scope.TrolleyMachineReadOnly = false;
                    scope.DishwashMachineReadOnly = false;

                    scope.ThermoLabelReadOnly = false;
                    scope.QuadTestReadOnly = false;
                    scope.ChlorineTestReadOnly = false;

                    scope.FinalRinseHide = false;

                    scope['TestType'] = [];
                    scope['TestType'].push({ Id: 63, Name: 'Thermo Label', 'Sequence': 1, 'ColourIndex': 'green', Selected: false, 'AttributeNodeId': 543, ControlId: 'chkTestType', });
                    scope['TestType'].push({ Id: 64, Name: 'Quad Test', 'Sequence': 2, 'ColourIndex': 'green', Selected: false, 'AttributeNodeId': 543, ControlId: 'chkTestType', });
                    scope['TestType'].push({ Id: 65, Name: 'Chlorine Test', 'Sequence': 3, 'ColourIndex': 'green', Selected: false, 'AttributeNodeId': 543, ControlId: 'chkTestType', });
                }

                else if (TemplateId == 620) {
                    scope.NameofMediaReadOnly = false;
                    scope.NameofDilieuntReadOnly = false;
                }

                else if (TemplateId == 591) {//CurrentStockofLaboratoryMediaHandler
                    scope.DivGlassware = false;
                    scope.DivMedia = false;
                }
                    //else if (TemplateId == 738) {//Yearly Verification Certificate for Probe Thermometer - Rev 1 - (HYG- 056)
                    //    scope.DivValidator = false;
                    //    scope.DivTestCap1 = false;
                    //    scope.DivTestCap2 = false;
                    //    scope.DivTestCap3 = false;
                    //    scope.DivBoilingWater = false;
                    //    scope.DivICECAP = false;
                    //    scope.DivProbeThermometerSerialNo = false;
                    //    scope.DivIRThermometerSerialNo = false;
                    //}
                else if (TemplateId == 575) {//Master List of Microbiology Laboratory Equipment Calibration and Maintenance Status- Rev 1 - (ML-REF- 007)
                    scope.DivECServiceProvider = false;
                    scope.DivECCaliberationDueDate = false;
                    scope.DivPMServiceProvider = false;
                    scope.DivPMS1stpreventiveMaintainence = false;
                    scope.DivPMS2ndpreventiveMaintainence = false;
                }
                else if (TemplateId == 1369) {//Sampling Sheet and Food Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.EcollShow = false;
                    scope.SaureusShow = false;
                    scope.BcereusShow = false;
                    scope.VparahaemolyticusShow = false;
                    scope.SalmonellaShow = false;
                    scope.ListeriaShow = false;
                    scope.ClostridiumShow = false;
                    scope.YMCShow = false;
                    scope.CampylobacterShow = false;

                    scope.OthersShow = false;

                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;

                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;

                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;

                    scope.SampleLocationShow = false;
                    scope.OutSourceDetailsShow = false;

                    scope.Div_txtNARemarksControlId = false;
                }
                else if (TemplateId == 1529) {//Sampling Sheet And Water Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.EcollShow = false;
                    scope.PseudomonasShow = false;
                    scope.EnterococcusShow = false;
                    scope.SalmonellaShow = false;

                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;

                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;

                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;

                    scope.OthersShow = false;
                    scope.OthersLocationShow = false;

                    scope.Div_txtNARemarksControlId = false;

                }
                else if (TemplateId == 1655) {//Sampling Sheet And Ice Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.EcollShow = false;
                    scope.PseudomonasShow = false;
                    scope.EnterococcusShow = false;
                    scope.SalmonellaShow = false;

                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;

                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;

                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;

                    scope.OthersShow = false;
                    scope.OthersLocationShow = false;

                    scope.Div_txtNARemarksControlId = false;
                }
                else if (TemplateId == 1778) {//Sampling Sheet And Air Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.YeasAndMouldShow = false;
                    scope.ExposureShow = false;
                    scope.VolumeOfAirShow = false;
                }
                else if (TemplateId == 1808) {//Sampling Sheet And Hand Swab Analysis
                    scope.StaphShow = false;
                    scope.EcoliShow = false;
                    scope.AppearanceRemarksShow = false;
                }
                else if (TemplateId == 1875) { // Sampling Sheet And Linen Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.EcoliShow = false;
                    scope.ListeriaShow = false;
                    scope.YeasAndMouldShow = false;
                }
                else if (TemplateId == 1837) {// Sampling Sheet And Equipment swab Analysis
                    scope.TVBShow = false;
                    scope.ColiformsShow = false;
                    scope.EcoliShow = false;
                    scope.ListeriaShow = false;
                    scope.YeasAndMouldShow = false;
                }
                else if (TemplateId == 293) {// Temperature Verification of Aircraft Loading
                    scope.DivGalleryChillerShow = false;
                }
                else if (TemplateId == 1917) {//Allergen Sample Collection And Report Format - Rev 0 - (HYG- 101)
                    scope.DivMilkShow = false;
                    scope.DivEggShow = false;
                    scope.DivAlmondShow = false;
                    scope.DivPeanutShow = false;
                    scope.DivGladinShow = false;
                    scope.DivMustardShow = false;
                    scope.DivSoyShow = false;
                }
                else if (TemplateId == 3115) { // Airline Complaint Sample First Evaluation Report
                    scope.DivOthers = false;
                    scope.DivForwardCPD = false;
                    scope.DivFoodPoint = false;
                }
                else if (TemplateId == 609) { // Laminar Air Flow Monitoring-Rev 1 - (ML-FRM- 010)
                    scope.AirSamplerDetailsShow = false;
                    scope.OpenPlateDetailsShow = false;
                    scope.TVBShow = false;
                    scope.YMCShow = false;
                }
            }
            //else if (OneViewSessionStorage.Get("ServiceName") == "CMFT") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {//CMFT
                ClearControlsForCMFT();
            }
            //else if (OneViewSessionStorage.Get("ServiceName") == "TCFMService") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) {//"TCFMService"
                ClearControlsForTCFM();
            }
            var _oOnewViewEventListener = new OnewViewEventListener();
            _oOnewViewEventListener.RemoveAll();

            //var _oNCColorComponent = new NCColorComponent();
            //_oNCColorComponent.RemoveAll();

            CommentsResult = {};
            ObservationResult = {};
            AttributeWiseActionDict = {};
            NCListForDelete = [];
            MyInstance.DCNCMappingList = [];
            MyInstance.FormActionCount = 0;
            OneViewConsole.Debug("ClearControls end", "DataCaptureBO.ClearControls");
        }
        catch (Excep) {
           // alert('DataCaptureBO.ClearControls Excep :' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearControls", Excep);
        }
        finally {
            _oPrimarayAnswerModeInfo = null;
            _oddl = null;
        }
    }
    //############## PageLoad  End ################

    var ClearControlsForCMFT = function () {
        try {
            if (TemplateId == 3) { // 
                scope.Div_AwareofProcedure = false;
                scope.Div_Location = false;                
            }
            else if (TemplateId == 91) { // Pre Acceptance Composition Analysis
                oScope.SharpsBinShow = false;
                oScope.RigidPlasticShow = false;
                oScope.RigidCardShow = false;
                oScope.BagShow = false;
                oScope.GlassBucketShow = false;
                oScope.CardboardShow = false;
                oScope.CartridgeReCyclingBoxShow = false;


                scope.SharpsBinDetailsShow = false;
                scope.RigidPlasticDetailsShow = false;
                scope.RigidCardDetailsShow = false;
                scope.BagDetailsShow = false;
                scope.GlassBucketDetailsShow = false;
                scope.CardboardBoxDetailsShow = false;
                scope.CartridgeReCyclingBoxDetailsShow = false;

                //Sharps Bin
                Clear({ Type: "Band", ControlId: "chkSharpsBinContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlSharpsBinSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlSharpsBinColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtSharpsBinOthersControlId" });


                Clear({ Type: "Band", ControlId: "chkSharpsBinLabelUsefulControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtSharpsBinLabelUsefulCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkSharpsBinLidMatchLabelControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtSharpsBinLidMatchLabelCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkBinProperlyAssembledControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBinProperlyAssembledCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkAssembledByLabelCompletedControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtAssembledByLabelCompletedCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkClosureMechanismInUseControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtClosureMechanismInUseCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkSharpsBinOverfilledControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtSharpsBinOverfilledCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkBinLabelUsefulControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBinLabelUsefulCommentsControlId" });



                Clear({ Type: "Band", ControlId: "chkSharpsBinScoreContainerControlId" });

               



                //Rigid container Plastic
                Clear({ Type: "Band", ControlId: "chkRigidPlasticContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlRigidPlasticSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlRigidPlasticColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidPlasticOthersControlId" });


                Clear({ Type: "Band", ControlId: "chkRigidPlasticWasteTypesBinLabelControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidPlasticWasteTypesBinLabelCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkRigidPlasticBinLabelUsefulControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidPlasticBinLabelUsefulCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkRigidPlasticBinLidMatchLabelControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidPlasticBinLidMatchLabelControlId" });



                Clear({ Type: "Band", ControlId: "chkRigidPlasticScoreContainerControlId" });

               


                //Rigid Container Card                
                Clear({ Type: "Band", ControlId: "chkRigidCardContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlRigidCardSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlRigidCardColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidCardOthersControlId" });


                Clear({ Type: "Band", ControlId: "chkRigidCardWasteTypesBinLabelControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidCardWasteTypesBinLabelCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkRigidCardBinLabelUsefulControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidCardBinLabelUsefulCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkRigidCardBinLidMatchLabelControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtRigidCardBinLidMatchLabelCommentsControlId" });



                Clear({ Type: "Band", ControlId: "chkRigidCardScoreContainerControlId" });

               





                //Bag
                Clear({ Type: "Band", ControlId: "chkBagContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlBagSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlBagColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBagOthersControlId" });


                Clear({ Type: "Band", ControlId: "chkPedalBinLabelledControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtPedalBinLabelledCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkPedalBinLabelMatchControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtPedalBinLabelMatchCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkBagOverfilledControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBagOverfilledCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkBinDamagedControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBinDamagedCommentsControlId" });

                Clear({ Type: "Band", ControlId: "chkBinAppropriateForBagControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtBinAppropriateForBagCommentsControlId" });



                Clear({ Type: "Band", ControlId: "chkBagScoreContainerControlId" });

               



                //Glass Bucket
                Clear({ Type: "Band", ControlId: "chkGlassBucketContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlGlassBucketSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlGlassBucketColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtGlassBucketOthersControlId" });



                Clear({ Type: "Band", ControlId: "chkGlassBucketScoreContainerControlId" });

                



                //Cardboard Box
                Clear({ Type: "Band", ControlId: "chkCardboardBoxContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlCardboardBoxSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlCardboardBoxColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtCardboardBoxOthersControlId" });



                Clear({ Type: "Band", ControlId: "chkCardboardBoxScoreContainerControlId" });

               



                //Cartridge Re-Cycling Box
                Clear({ Type: "Band", ControlId: "chkCartridgeReCyclingBoxContainerTypeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlCartridgeReCyclingBoxSizeControlId" });
                Clear({ Type: "DDL", ControlId: "AddlCartridgeReCyclingBoxColourCodeControlId" });
                Clear({ Type: "TEXTBOX", ControlId: "txtCartridgeReCyclingBoxOthersControlId" });



                Clear({ Type: "Band", ControlId: "chkCartridgeReCyclingBoxScoreContainerControlId" });

               



                oScope.SharpsBinOthersShow = false;
                oScope.RigidPlasticOthersShow = false;
                oScope.RigidCardOthersShow = false;
                oScope.BagOthersShow = false;
                oScope.GlassBucketOthersShow = false;
                oScope.CardboardBoxOthersShow = false;
                oScope.CartridgeReCyclingBoxOthersShow = false;
               
            }
            else if (TemplateId == 3271) { // Pre Acceptance Composition Analysis New
                for (var i = 0; i < 10; i++) {
                    scope["SharpsBinDetailsShow_" + i] = false;
                    scope["SharpsBinContaminatesShow_" + i] = false;

                    scope["RigidPlasticDetailsShow_" + i] = false;
                    scope["RigidPlasticContaminatesShow_" + i] = false;

                    scope["RigidCardDetailsShow_" + i] = false;
                    scope["RigidCardContaminatesShow_" + i] = false;

                    scope["BagDetailsShow_" + i] = false;
                    scope["BagContaminatesShow_" + i] = false;

                    scope["GlassBucketDetailsShow_" + i] = false;
                    scope["GlassBucketContaminatesShow_" + i] = false;
                    
                    scope["CardboardBoxDetailsShow_" + i] = false;
                    scope["CardboardBoxContaminatesShow_" + i] = false;

                    scope["CartridgeReCyclingBoxDetailsShow_" + i] = false;
                    scope["CartridgeReCyclingBoxContaminatesShow_" + i] = false;

                    scope["ControlleddrugsdestructionkitDetailsShow_" + i] = false;
                    scope["ControlleddrugsdestructionkitContaminatesShow_" + i] = false;

                    scope["MercuryamalgamcontainerDetailsShow_" + i] = false;
                    scope["MercuryamalgamcontainerContaminatesShow_" + i] = false;

                    scope["WasteHandgelcontainerDetailsShow_" + i] = false;
                    scope["WasteHandgelcontainerContaminatesShow_" + i] = false;
                }
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearControlsForCMFT", Excep);
        }
       
    }
    
    var ClearControlsForTCFM = function () {
        try {
            if (TemplateId == 3) { // 
                scope.DivInduction = false;
                scope.DivTask = false;
                scope.DivEquipment = false;
            }            
            else if (TemplateId == 160) { // 
                scope.DivInduction = false;
                scope.DivTask = false;
                scope.DivEquipment = false;
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearControlsForTCFM", Excep);
        }

    }
    //############## Load Edit Page  Start ################ 
 
    //Step 1:Take DC d

    this.SetDcPlaceDetails = function (Id, Name) {
        try{
            DcPlaceId = Id;
            DcPlaceName = Name;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetDcPlaceDetails", Excep);
        }
        finally {
        }
    }

    this.SetDcStartDate = function (StartDate) {
        try {
            DcStartDateFromSession = StartDate;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetDcPlaceDetails", Excep);
        }
        finally {
        }
    }

    var SaveObservation = function (AryDcResultDetails) {
        try {            
            //if ((OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") && TemplateId == 483) {
            if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 483) {
                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[491], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[492], DcResultId, CustomObservationIndex));
                    CustomObservationIndex += 1;
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 15629) {
                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[15637], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[15638], DcResultId, CustomObservationIndex));
                    CustomObservationIndex += 1;
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            //if ((OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") && TemplateId == 483) {
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 12606) {
                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[12614], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }
                var AssignedToIndex = 0;
                for (var i = 0; i < oScope.AssignedToList.length; i++) {
                    if (oScope.AssignedToList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.AssignedToList[i].Answer, oScope.AssignedToList[i].label, TemplateNodes[12628], DcResultId, AssignedToIndex));
                        AssignedToIndex += 1;
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[12614], DcResultId, CustomObservationIndex));
                    CustomObservationIndex += 1;
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            //else if ( (OneViewSessionStorage.Get("ServiceName") == "Care Home Service") && TemplateId == 146) {
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 3) && TemplateId == 146) {

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[149], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }
               
                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) && TemplateId == 650) {

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[654], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 10 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 11) && TemplateId == 2) {
                
                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected") {
                        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[10], DcResultId, ObservationIndex));
                        ObservationIndex += 1;
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[11], DcResultId, CustomObservationIndex));
                    CustomObservationIndex += 1;
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 24) && TemplateId == 3) {

                //var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                //var ObservationIndex = 0;
                //for (var i = 0; i < oScope.ObservationList.length; i++) {
                //    if (oScope.ObservationList[i].selected == "selected") {
                //        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[639], DcResultId, ObservationIndex));
                //        ObservationIndex += 1;
                //    }
                //}
                //var CustomObservationIndex = 0;
                //for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                //    AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[637], DcResultId, CustomObservationIndex));
                //    CustomObservationIndex += 1;
                //}

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();
            }

            else {
                if (MyInstance.IncidentReportHandler.SaveObservation != null) {
                    MyInstance.IncidentReportHandler.SaveObservation();
                }

                if (MyInstance.CorrectiveActionEventHandler != null){
                    MyInstance.CorrectiveActionEventHandler();
                }
            }

            //else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 13) && TemplateId == 625) {
             
            //    var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
            //    var ObservationIndex = 0;
            //    for (var i = 0; i < oScope.ObservationList.length; i++) {
            //        if (oScope.ObservationList[i].selected == "selected") {
            //            AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[639], DcResultId, ObservationIndex));
            //            ObservationIndex += 1;
            //        }
            //    }
            //    var CustomObservationIndex = 0;
            //    for (var i = 0; i < oScope.CustomObservationList.length; i++) {
            //        AryDcResultDetails.push(GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[637], DcResultId, CustomObservationIndex));
            //        CustomObservationIndex += 1;
            //    }

            //    if (MyInstance.CorrectiveActionEventHandler != null)
            //        MyInstance.CorrectiveActionEventHandler();
            //}
        }
        catch (Excep) {           
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SaveObservation", Excep);
        }
        finally {
        }
    }

    var UpdateObservation = function (AryDcResultDetails) {
        try {            
            //if ((OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") && TemplateId == 483) {
            if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 483) {

                //alert(JSON.stringify(oScope.ObservationList));
                //alert(JSON.stringify(oScope.CustomObservationList));

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {                       
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[491], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else  if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].IndexId > CustomObservationIndex) {
                        CustomObservationIndex = oScope.CustomObservationList[i].IndexId;
                    }
                }
                CustomObservationIndex += 1;
                //alert(CustomObservationIndex);
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[492], DcResultId, CustomObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        CustomObservationIndex += 1;
                    }
                }
                for (var i = 0; i < oScope.PreCustomObservationList.length; i++) {
                    var IsExist = false;
                    for (var j = 0; j < oScope.CustomObservationList.length; j++) {
                        if (oScope.PreCustomObservationList[i].DcResultDetailsId == oScope.CustomObservationList[j].id) {
                            IsExist = true;
                        }
                    }
                    if (IsExist == false) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.PreCustomObservationList[i].DcResultDetailsId;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 15629) {

                //alert(JSON.stringify(oScope.ObservationList));
                //alert(JSON.stringify(oScope.CustomObservationList));

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[15637], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].IndexId > CustomObservationIndex) {
                        CustomObservationIndex = oScope.CustomObservationList[i].IndexId;
                    }
                }
                CustomObservationIndex += 1;
                //alert(CustomObservationIndex);
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[15638], DcResultId, CustomObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        CustomObservationIndex += 1;
                    }
                }
                for (var i = 0; i < oScope.PreCustomObservationList.length; i++) {
                    var IsExist = false;
                    for (var j = 0; j < oScope.CustomObservationList.length; j++) {
                        if (oScope.PreCustomObservationList[i].DcResultDetailsId == oScope.CustomObservationList[j].id) {
                            IsExist = true;
                        }
                    }
                    if (IsExist == false) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.PreCustomObservationList[i].DcResultDetailsId;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 12606) {

                //alert(JSON.stringify(oScope.ObservationList));
                //alert(JSON.stringify(oScope.CustomObservationList));

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[12614], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }
                var AssignedToIndex = 0;
                for (var i = 0; i < oScope.AssignedToList.length; i++) {
                    if (oScope.AssignedToList[i].IndexId > AssignedToIndex) {
                        AssignedToIndex = oScope.AssignedToList[i].IndexId;
                    }
                }
                AssignedToIndex += 1;
                //alert(AssignedToIndex);
                for (var i = 0; i < oScope.AssignedToList.length; i++) {
                    if (oScope.AssignedToList[i].selected == "selected" && oScope.AssignedToList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.AssignedToList[i].Answer, oScope.AssignedToList[i].label, TemplateNodes[12628], DcResultId, AssignedToIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        AssignedToIndex += 1;
                    }
                    else if (oScope.AssignedToList[i].selected == "" && oScope.AssignedToList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.AssignedToList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].IndexId > CustomObservationIndex) {
                        CustomObservationIndex = oScope.CustomObservationList[i].IndexId;
                    }
                }
                CustomObservationIndex += 1;
                //alert(CustomObservationIndex);
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[492], DcResultId, CustomObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        CustomObservationIndex += 1;
                    }
                }
                for (var i = 0; i < oScope.PreCustomObservationList.length; i++) {
                    var IsExist = false;
                    for (var j = 0; j < oScope.CustomObservationList.length; j++) {
                        if (oScope.PreCustomObservationList[i].DcResultDetailsId == oScope.CustomObservationList[j].id) {
                            IsExist = true;
                        }
                    }
                    if (IsExist == false) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.PreCustomObservationList[i].DcResultDetailsId;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }

            //else if ((OneViewSessionStorage.Get("ServiceName") == "Care Home Service") && TemplateId == 146) {
            else if ((OneViewGlobalServiceTypeEnum [OneViewGlobalServiceType] == 3) && TemplateId == 146) {

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[149], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) && TemplateId == 650) {

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[654], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 10 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 11) && TemplateId == 2) {

                //alert(JSON.stringify(oScope.ObservationList));
                //alert(JSON.stringify(oScope.CustomObservationList));

                var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                var ObservationIndex = 0;
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                        ObservationIndex = oScope.ObservationList[i].IndexId;
                    }
                }
                ObservationIndex += 1;
                //alert(ObservationIndex);
                for (var i = 0; i < oScope.ObservationList.length; i++) {
                    if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[10], DcResultId, ObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        ObservationIndex += 1;
                    }
                    else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }
                var CustomObservationIndex = 0;
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].IndexId > CustomObservationIndex) {
                        CustomObservationIndex = oScope.CustomObservationList[i].IndexId;
                    }
                }
                CustomObservationIndex += 1;
                //alert(CustomObservationIndex);
                for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                    if (oScope.CustomObservationList[i].id == 0) {
                        var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[11], DcResultId, CustomObservationIndex);
                        var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                        _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                        CustomObservationIndex += 1;
                    }
                }
                for (var i = 0; i < oScope.PreCustomObservationList.length; i++) {
                    var IsExist = false;
                    for (var j = 0; j < oScope.CustomObservationList.length; j++) {
                        if (oScope.PreCustomObservationList[i].DcResultDetailsId == oScope.CustomObservationList[j].id) {
                            IsExist = true;
                        }
                    }
                    if (IsExist == false) {
                        var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.PreCustomObservationList[i].DcResultDetailsId;
                        window.OneViewSqlite.excecuteSql(Query);
                    }
                }

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 24) && TemplateId == 3) {

                if (MyInstance.CorrectiveActionEventHandler != null)
                    MyInstance.CorrectiveActionEventHandler();

                return true;
            }
            
                //else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 13) && TemplateId == 625) {

                //    var DcResultId = oDataCaptureDAO.GetDcResultId_DAO(DcId, LoginUserId);
                //    var ObservationIndex = 0;
                //    for (var i = 0; i < oScope.ObservationList.length; i++) {
                //        if (oScope.ObservationList[i].IndexId > ObservationIndex) {
                //            ObservationIndex = oScope.ObservationList[i].IndexId;
                //        }
                //    }
                //    ObservationIndex += 1;
                //    //alert(ObservationIndex);
                //    for (var i = 0; i < oScope.ObservationList.length; i++) {

                //        if (oScope.ObservationList[i].selected == "selected" && oScope.ObservationList[i].id == 0) {
                //            var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.ObservationList[i].Answer, oScope.ObservationList[i].label, TemplateNodes[639], DcResultId, ObservationIndex);
                //            var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                //            _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                //            ObservationIndex += 1;
                //        }
                //        else if (oScope.ObservationList[i].selected == "" && oScope.ObservationList[i].id != 0) {
                //            var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.ObservationList[i].id;
                //            window.OneViewSqlite.excecuteSql(Query);
                //        }
                //    }

                //    var CustomObservationIndex = 0;
                //    for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                //        if (oScope.CustomObservationList[i].IndexId > CustomObservationIndex) {
                //            CustomObservationIndex = oScope.CustomObservationList[i].IndexId;
                //        }
                //    }
                //    CustomObservationIndex += 1;
                //    //alert(CustomObservationIndex);
                //    for (var i = 0; i < oScope.CustomObservationList.length; i++) {
                //        if (oScope.CustomObservationList[i].id == 0) {
                //            var _oDCResultDetailEntity = GetDcResultDetailsForMulti(AryDcResultDetails, oScope.CustomObservationList[i].label, '', TemplateNodes[637], DcResultId, CustomObservationIndex);
                //            var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
                //            _oDcResultDetailsEntityDAO.CreateMaster(_oDCResultDetailEntity);
                //            CustomObservationIndex += 1;
                //        }
                //    }
                //    for (var i = 0; i < oScope.PreCustomObservationList.length; i++) {
                //        var IsExist = false;
                //        for (var j = 0; j < oScope.CustomObservationList.length; j++) {
                //            if (oScope.PreCustomObservationList[i].DcResultDetailsId == oScope.CustomObservationList[j].id) {
                //                IsExist = true;
                //            }
                //        }
                //        if (IsExist == false) {
                //            var Query = "UPDATE DcResultDetailsEntity SET Answer = '',AnswerValue = '' WHERE Id = " + oScope.PreCustomObservationList[i].DcResultDetailsId;
                //            window.OneViewSqlite.excecuteSql(Query);
                //        }
                //    }

                //    return true;
                //}

            else{
                
                if (MyInstance.IncidentReportHandler.UpdateObservation != null){
                    MyInstance.IncidentReportHandler.UpdateObservation();
                }

                if (MyInstance.CorrectiveActionEventHandler != null){
                    MyInstance.CorrectiveActionEventHandler();
                }

                return true;
            }
            //else {
            //    return true;
            //}
        }
        catch (Excep) {            
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateObservation", Excep);
            return false;
        }
        finally {
        }
    }

    var LoadObservation = function (DCDetailFromDB) {
        try {
            //if ((OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") && TemplateId == 483) {
            if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 483) {
                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[491];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }
                var CustomObservationAnswers = DCDetailFromDB.AttributeAnswers[492];
                if (CustomObservationAnswers != undefined) {
                    if (CustomObservationAnswers['AddlCustomObservationControlId'] != undefined) {
                        var AnswerList = CustomObservationAnswers['AddlCustomObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            if (AnswerList[i].Answer != "") {
                                oScope.CustomObservationList.push({ label: AnswerList[i].Answer, id: AnswerList[i].DcResultDetailsId, IndexId: AnswerList[i].IndexId });
                            }
                        }

                        oScope.PreCustomObservationList = AnswerList;
                    }
                }
            }
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 15629) {
                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[15637];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }
                var CustomObservationAnswers = DCDetailFromDB.AttributeAnswers[15638];
                if (CustomObservationAnswers != undefined) {
                    if (CustomObservationAnswers['AddlCustomObservationControlId'] != undefined) {
                        var AnswerList = CustomObservationAnswers['AddlCustomObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            if (AnswerList[i].Answer != "") {
                                oScope.CustomObservationList.push({ label: AnswerList[i].Answer, id: AnswerList[i].DcResultDetailsId, IndexId: AnswerList[i].IndexId });
                            }
                        }

                        oScope.PreCustomObservationList = AnswerList;
                    }
                }
            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) && TemplateId == 12606) {
                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[12614];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }
              //  alert('oScope.PreAssignedToList  : ' + JSON.stringify(oScope.PreAssignedToList));
                
                var AssignedToAnswers = DCDetailFromDB.AttributeAnswers[12628];
              
                if (AssignedToAnswers != undefined) {
                    if (AssignedToAnswers['txtAssignedToControlId'] != undefined) {
                        var AnswerList = AssignedToAnswers['txtAssignedToControlId'];
                       
                        LoadAssignedToList(AnswerList);

                       /* 
                        if (oScope.AssignedToList.length > 0) {
                            for (var i = 0; i < AnswerList.length; i++) {
                                for (var j = 0; j < oScope.AssignedToList.length; j++) {
                                    if (AnswerList[i].AnswerValue == oScope.AssignedToList[j].label) {
                                        oScope.AssignedToList[j].selected = "selected";
                                        oScope.AssignedToList[j].id = AnswerList[i].DcResultDetailsId;
                                        oScope.AssignedToList[j].IndexId = AnswerList[i].IndexId;
                                        oScope.AssignedToList[j].Answer = AnswerList[i].Answer;
                                    }
                                }
                            }
                        }
                        else {
                           // alert('here  AnswerList : ' + JSON.stringify(AnswerList));
                            for (var i = 0; i < AnswerList.length; i++) {
                                if (AnswerList[i].Answer != '' && AnswerList[i].AnswerValue != '') {
                                    oScope.AssignedToList.push({
                                        label: AnswerList[i].AnswerValue,
                                        id: AnswerList[i].DcResultDetailsId,
                                        Answer: AnswerList[i].Answer,
                                        IndexId: AnswerList[i].IndexId,
                                        selected: "selected",
                                    });
                                }
                            }
                        }
                        */
                        oScope.PreAssignedToList = AnswerList;
                    }                   
                }
                else {
                    var AnswerList = [];
                    LoadAssignedToList(AnswerList);
                }
            }
            
            //else if ((OneViewSessionStorage.Get("ServiceName") == "Care Home Service") && TemplateId == 146) {
            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 3) && TemplateId == 146) {

                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[149];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }

            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) && TemplateId == 650) {

                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[654];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }

            }

            else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 10 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 11) && TemplateId == 2) {
                var ObservationAnswers = DCDetailFromDB.AttributeAnswers[10];
                if (ObservationAnswers != undefined) {
                    if (ObservationAnswers['AddlObservationControlId'] != undefined) {
                        var AnswerList = ObservationAnswers['AddlObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            for (var j = 0; j < oScope.ObservationList.length; j++) {
                                if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
                                    oScope.ObservationList[j].selected = "selected";
                                    oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
                                    oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
                                    oScope.ObservationList[j].Answer = AnswerList[i].Answer;
                                }
                            }
                        }

                        oScope.PreObservationList = AnswerList;
                    }
                }
                var CustomObservationAnswers = DCDetailFromDB.AttributeAnswers[11];
                if (CustomObservationAnswers != undefined) {
                    if (CustomObservationAnswers['AddlCustomObservationControlId'] != undefined) {
                        var AnswerList = CustomObservationAnswers['AddlCustomObservationControlId'];
                        //alert(JSON.stringify(AnswerList));
                        for (var i = 0; i < AnswerList.length; i++) {
                            if (AnswerList[i].Answer != "") {
                                oScope.CustomObservationList.push({ label: AnswerList[i].Answer, id: AnswerList[i].DcResultDetailsId, IndexId: AnswerList[i].IndexId });
                            }
                        }

                        oScope.PreCustomObservationList = AnswerList;
                    }
                }
            }

            else {
                if (MyInstance.IncidentReportHandler.LoadObservation != null) {
                    MyInstance.IncidentReportHandler.LoadObservation();
                }
            }

            //else if ((OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 13) && TemplateId == 625) {
            
            //    var ObservationAnswers = DCDetailFromDB.AttributeAnswers[639];
            //    if (ObservationAnswers != undefined) {
            //        if (ObservationAnswers['AddlObservationControlId'] != undefined) {
            //            var AnswerList = ObservationAnswers['AddlObservationControlId'];
            //            //alert(JSON.stringify(AnswerList));
            //            for (var i = 0; i < AnswerList.length; i++) {
            //                for (var j = 0; j < oScope.ObservationList.length; j++) {
            //                    if (AnswerList[i].AnswerValue == oScope.ObservationList[j].label) {
            //                        oScope.ObservationList[j].selected = "selected";
            //                        oScope.ObservationList[j].id = AnswerList[i].DcResultDetailsId;
            //                        oScope.ObservationList[j].IndexId = AnswerList[i].IndexId;
            //                        oScope.ObservationList[j].Answer = AnswerList[i].Answer;
            //                    }
            //                }
            //            }

            //            oScope.PreObservationList = AnswerList;
            //        }
            //    }

            //    var CustomObservationAnswers = DCDetailFromDB.AttributeAnswers[637];
            //    if (CustomObservationAnswers != undefined) {
            //        if (CustomObservationAnswers['AddlCustomObservationControlId'] != undefined) {
            //            var AnswerList = CustomObservationAnswers['AddlCustomObservationControlId'];
            //            //alert(JSON.stringify(AnswerList));
            //            for (var i = 0; i < AnswerList.length; i++) {
            //                if (AnswerList[i].Answer != "") {
            //                    oScope.CustomObservationList.push({ label: AnswerList[i].Answer, id: AnswerList[i].DcResultDetailsId, IndexId: AnswerList[i].IndexId });
            //                }
            //            }

            //            oScope.PreCustomObservationList = AnswerList;
            //        }
            //    }

            //}

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadObservation", Excep);
        }
        finally {
        }
    }

    var LoadAssignedToList = function (AnswerList) {
        try {
            OneViewConsole.Debug("LoadAssignedToList Start", "CustomerComplaintMonitoringFacade.LoadAssignedToList");

            var AssignedToList = [];
            if (oScope.AssignedToList.length > 0) {
                AssignedToList = oScope.AssignedToList;               
            }
            else {
                var Query = "SELECT ServerId,ChildDbElementName FROM OrganizationAssetsNode WHERE ChildDbElementType = " + DATEntityType.RCOMaster_AssignedTo;
                var DbAssignedToList = window.OneViewSqlite.excecuteSqlReader(Query);
                DbAssignedToList = JSON.parse(DbAssignedToList);
                AssignedToList = [];
               
                for (var i = 0; i < DbAssignedToList.length; i++) {
                    var AssignedToFromDB = DbAssignedToList[i];
                    var AssignedToPush = {
                        label: AssignedToFromDB.ChildDbElementName,
                        Answer: AssignedToFromDB.ServerId,
                        id: 0,
                        IndexId: 0,
                        selected: ""
                    }
                    AssignedToList.push(AssignedToPush);
                }
            }

            oScope.AssignedToList = [];
           
            for (var i = 0; i < AssignedToList.length; i++) {
                var AssignedToPush = AssignedToList[i];
                //var AssignedToPush = {
                //    label: AssignedToFromDB.ChildDbElementName,
                //    Answer: AssignedToFromDB.ServerId,
                //    id: 0,
                //    IndexId: 0,
                //    selected: ""
                //}

                //alert('here  AnswerList : ' + JSON.stringify(AnswerList));

                var position = null;
                for (var j = 0; j < AnswerList.length; j++) {
                    var AssignedToSaved = AnswerList[j];
                    // alert(AssignedToPush.ServerId + "," + AssignedToSaved.Answer + "," + AssignedToPush.ChildDbElementName + "," + AssignedToSaved.AnswerValue)
                    if (AssignedToPush.Answer == AssignedToSaved.Answer && AssignedToPush.label == AssignedToSaved.AnswerValue) {
                        AssignedToPush.id = AssignedToSaved.DcResultDetailsId;
                        AssignedToPush.IndexId = AssignedToSaved.IndexId;
                        AssignedToPush.selected = "selected";
                        position = j;
                        break;
                    }
                }

                if (AnswerList != null && AnswerList.length > 0 && position != null) {
                    AnswerList.splice(position, 1);
                }
                position = null;

                //alert('oScope.AssignedToList : ' + JSON.stringify(oScope.AssignedToList));
                var IsExists = false;
                for (var k = 0; k < oScope.AssignedToList.length ; k++) {
                    if (oScope.AssignedToList[k].Answer == AssignedToPush.Answer) {
                        IsExists = true;
                        break;
                    }
                }
                if (IsExists == false) {
                    //alert('AssignedToPush : ' + JSON.stringify(AssignedToPush));
                    oScope.AssignedToList.push(AssignedToPush);
                }
            }

            //alert('oScope.AssignedToList : ' + JSON.stringify(oScope.AssignedToList));


            OneViewConsole.Debug("LoadAssignedToList End", "DataCaptureBO.LoadAssignedToList");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadAssignedToList", Excep);
        }
        finally {
        }
    }


    var GetDcResultDetailsForMulti = function (AryDcResultDetails, Answer, AnswerValue, TemplateNode, DcResultId, IndexId) {
        try {
            //alert(JSON.stringify(TemplateNode));
            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            var _DcResultDetailsEntity = new DcResultDetailsEntity();
            
            _DcResultDetailsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

            if (DcId != undefined && DcId != '' &&  DcId != null)
                _DcResultDetailsEntity.DataCaptureId = DcId;

            if (DcResultId != undefined && DcResultId != '')
                _DcResultDetailsEntity.DataResultsId = DcResultId;

            _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
            _DcResultDetailsEntity.MobileVersionId = 1;

            _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

            _DcResultDetailsEntity.AttributeNodeId = TemplateNode.Id;

            _DcResultDetailsEntity.ControlId = TemplateNode.AnswerMode[0].ControlId;

            _DcResultDetailsEntity.AttributeNodeName = TemplateNode.Name;

            Answer = removeSpecialCharacter(Answer);
            AnswerValue = removeSpecialCharacter(AnswerValue);

            _DcResultDetailsEntity.Answer = Answer;
            _DcResultDetailsEntity.AnswerValue = AnswerValue;

            _DcResultDetailsEntity.IsManual = "true";
            
            _DcResultDetailsEntity.IsMultiMediaAttached = "false";
            _DcResultDetailsEntity.IsSynchronized = "false";
            _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;
          
            _DcResultDetailsEntity.AnswerDataType = TemplateNode.AnswerMode[0].DataType;
            _DcResultDetailsEntity.IsDynamicAnswer = false;
            _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;
            _DcResultDetailsEntity.Latitude = Latitude;
            _DcResultDetailsEntity.Longitude = Longitude;
            _DcResultDetailsEntity.AnswerFKType = DATEntityType.IncidentMaster;

            _DcResultDetailsEntity.IndexId = IndexId;
            _DcResultDetailsEntity.IsMulti = "true";

            return _DcResultDetailsEntity;
        }
        catch (Excep) {           
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailsForMulti", Excep);
        }
        finally {
        }
    }

    this.LoadEditPage = function (DCId, scope) {
        try
        {
            OneViewConsole.Debug("LoadEditPage start", "DataCaptureBO.LoadEditPage");
            OneViewConsole.DataLog("TemplateNodes : " + JSON.stringify(oTemplateNodes), "DataCaptureBO.LoadEditPage");
            OneViewConsole.DataLog("DCId : " + DCId, "DataCaptureBO.LoadEditPage");
            
            MyInstance.GetNCComments(DCId);

            var DCDetailFromDB = GetDCByDCId(DCId);
            MyInstance.DCDetailFromDBList = DCDetailFromDB;
           
            for (NodeId in oTemplateNodes) {                
                if (typeof (oTemplateNodes[NodeId]) != 'function') {

                    var TemplateNodeObject = oTemplateNodes[NodeId];
                    for (itrAnswerMode in TemplateNodeObject.AnswerMode) {
                        
                        if (typeof (TemplateNodeObject.AnswerMode[itrAnswerMode]) != 'function') {
                            var PreEditControlValues = {};
                            var AnswerModeObject = TemplateNodeObject.AnswerMode[itrAnswerMode];
                            var ControlId = AnswerModeObject.ControlId;                           
                            var AttributeAnswers = DCDetailFromDB.AttributeAnswers[NodeId];                            
                            if (AttributeAnswers != undefined) {
                              
                                //Checkboxlist
                                if (TemplateNodeObject.AnswerMode[0].Type == "DCListViewControlConfig" 
                                       && (TemplateNodeObject.AnswerMode[0].ListViewDisplay == 2 && TemplateNodeObject.AnswerMode[0].SelectionType == 1) || (TemplateNodeObject.AnswerMode[0].ListViewDisplay == 1)) {
                                    
                                    if (AttributeAnswers[ControlId] != undefined) {
                                        var AnswerList = AttributeAnswers[ControlId];
                                       // alert('AnswerList : ' + AnswerList);
                                        var LastUpdatedAnswerList = MyInstance.GetLastUpdatedAnswerList(AnswerList);
                                       // alert('LastUpdatedAnswerList : ' + LastUpdatedAnswerList);
                                       //alert('LastUpdatedAnswerList aa : ' + JSON.stringify(LastUpdatedAnswerList));
                                        var DataSourceModelName = ControlId + "DataSource";
                                        //alert(LastUpdatedAnswerList + ', DataSourceModelName : ' + DataSourceModelName)
                                        //before update values kept in this variable
                                        scope[DataSourceModelName + "_OLD"] = LastUpdatedAnswerList;
                                        var DataSourceList = scope[DataSourceModelName];
                                        //alert(DataSourceModelName + ', DataSourceList : ' + DataSourceList);
                                        for (var i = 0; i < DataSourceList.length; i++) {
                                            for (var j = 0; j < LastUpdatedAnswerList.length; j++) {
                                                if (DataSourceList[i].Answer == LastUpdatedAnswerList[j].Answer) {
                                                    scope[DataSourceModelName][i].Selected = true;
                                                }
                                            }
                                        }                                      
                                        //alert(DataSourceModelName + ', scope[DataSourceModelName] : ' + JSON.stringify(scope[DataSourceModelName]));
                                    }
                                }
                                else {
                                    if (AttributeAnswers[ControlId] != undefined) {
                                        var AnswerList = AttributeAnswers[ControlId];
                                        //TODO:This logic may change,need remove coupling between this logic (for ex:Clinet need his own data to view),now couple with LastUpdated Answer

                                        var AnswerToBind = GetLastUpdatedAnswer(AnswerList);                                      
                                        //alert('AnswerToBind :' + JSON.stringify(AnswerToBind));
                                        MyInstance.SetEditValuesInControls(scope, AnswerModeObject, AnswerToBind);
                                        PreEditControlValues[ControlId] = { Answer: AnswerToBind.Answer }
                                    }
                                    else {
                                        PreEditControlValues[ControlId] = { Answer: '' }
                                    }
                                }
                            }
                            MyInstance.PreEditValues[NodeId] = PreEditControlValues;
                        }
                    }
                }
            }

            LoadObservation(DCDetailFromDB);

            MyInstance.SetShiftValueOnEdit(DCId);

            OneViewConsole.Debug("LoadEditPage end", "DataCaptureBO.LoadEditPage");
        }
        catch (Excep) {
           // alert("DataCaptureBO.LoadEditPage Excep : " + Excep + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadEditPage", Excep);
        }
        finally {
            DCDetailFromDB = null;
            TemplateNodeObject = null;
            PreEditControlValues = null;
            AnswerModeObject = null;
            ControlId = null;
            AttributeAnswers = null;
        }
    }

    this.SetEditValuesInControls = function (scope, AnswerModeObject, AnswerToBind) {
        try
        {
            OneViewConsole.Debug("SetEditValuesInControls start", "DataCaptureBO.SetEditValuesInControls");
            OneViewConsole.DataLog("AnswerModeObject : " + JSON.stringify(AnswerModeObject), "DataCaptureBO.SetEditValuesInControls");
            OneViewConsole.DataLog("AnswerToBind : " + JSON.stringify(AnswerToBind), "DataCaptureBO.SetEditValuesInControls");
           
            if (AnswerModeObject.Type == 'DDL') {
              //  alert('AnswerToBind.Answer :' + AnswerToBind.Answer + " ,  AnswerToBind.AnswerValue : " + AnswerToBind.AnswerValue);
                scope[AnswerModeObject.ControlId].Set({ Id: AnswerToBind.Answer, Name: AnswerToBind.AnswerValue, "IsDynamicElement": false });
            }
            else if (AnswerModeObject.DataType == "BOOLEAN") {
                if (AnswerToBind.Answer == "1") {
                    scope.NewDCModel[AnswerModeObject.ControlId] = true;
                }
                else {
                    scope.NewDCModel[AnswerModeObject.ControlId] = false;
                }
            }
            else if (AnswerModeObject.Type == 'Band') {
               
                if (AnswerToBind.Answer != "") {
                    var Colour = AnswerModeObject.BandInfo[AnswerToBind.Answer];
                    if (AnswerModeObject.IsStaticDataSource == undefined || AnswerModeObject.IsStaticDataSource == false) {                     
                        scope[AnswerModeObject.ControlId].Set({ Id: AnswerToBind.Answer, Name: AnswerToBind.AnswerValue, ColourIndex: Colour.ColourIndex, selected: true });
                    }
                    else if (AnswerModeObject.IsStaticDataSource == true) {
                        //alert(AnswerToBind.Answer + " : " + AnswerModeObject.BandInfo[AnswerToBind.Answer]);
                        scope[AnswerModeObject.ControlId].Set({ Id: AnswerToBind.Answer, Name: AnswerToBind.Answer, ColourIndex: Colour.ColourIndex, selected: true });
                    }
                }             
            }
            else if (AnswerModeObject.DataType == "FLOAT") {
                if (AnswerToBind.Answer == "") {                 
                    scope.NewDCModel[AnswerModeObject.ControlId] = AnswerToBind.Answer;
                }
                else {
                    scope.NewDCModel[AnswerModeObject.ControlId] = parseFloat(AnswerToBind.Answer);
                }
            }
            else if (AnswerModeObject.Type == "DATE" && AnswerToBind.Answer != '') {               
                var date = AnswerToBind.Answer.split('-');              
                scope.NewDCModel[AnswerModeObject.ControlId] = new Date(date[2], date[1]-1, date[0]);                
            }
            else if (AnswerModeObject.Type == "MonthYear" && AnswerToBind.Answer != '') {
                document.getElementById(AnswerModeObject.ControlId).value = AnswerToBind.Answer;
                scope.NewDCModel[AnswerModeObject.ControlId] = document.getElementById(AnswerModeObject.ControlId).value;
            }
            else if (AnswerModeObject.Type == "TIME") {
                
               // var Time = AnswerToBind.Answer.split(':');
                //scope.NewDCModel[AnswerModeObject.ControlId] = new Date(0, 0, 0, Time[0], Time[1]);   

                if (AnswerToBind.Answer != "") {
                    //its wokaround for date time controller issue
                    //var Time = AnswerToBind.Answer.split(" ")[1].split(':');
                    scope[AnswerModeObject.ControlId + "_DateTime"] = AnswerToBind.Answer;

                    var AnswerModeDOMobj = document.getElementById(AnswerModeObject.ControlId);
                    if (AnswerModeDOMobj != null) {
                        AnswerModeDOMobj.value = AnswerToBind.Answer.split(" ")[1]; //take time 
                        scope.NewDCModel[AnswerModeObject.ControlId] = AnswerModeDOMobj.value;
                        //scope.NewDCModel[AnswerModeObject.ControlId] = new Date(0, 0, 0, Time[0], Time[1]);
                    }
                    else {
                        var Time = AnswerToBind.Answer.split(" ")[1].split(':');
                        scope.NewDCModel[AnswerModeObject.ControlId] = new Date(0, 0, 0, Time[0], Time[1]);
                    }
                }
            }
            else if ((AnswerModeObject.DataType == 'DATAURL') && (AnswerToBind.Answer != '')) {
                scope.lblSignature = "Signed " + AnswerToBind.LastUpdatedDate;
                scope[AnswerModeObject.ControlId + '_lblSignature'] = "Signed " + AnswerToBind.LastUpdatedDate;
            }
            else if (AnswerModeObject.Type == "DATETIMELOCAL" && AnswerToBind.Answer != '') {
                               
                scope.NewDCModel[AnswerModeObject.ControlId] = new DateTime().GetDateByString(AnswerToBind.Answer);
                //scope[AnswerModeObject.ControlId + "_DateTime"] = AnswerToBind.Answer;
                
            }
            else if (AnswerModeObject.Type == "DCImageCaptureControlConfig") {

                var Query = "Select * From MultiMediaSubElements Where MappedEntityClientGuid = '" + AnswerToBind.DcResultDetailsClientGuid + "' And IsDisabled != 'true'";
                var Result = window.OneViewSqlite.excecuteSqlReader(Query);
                Result = JSON.parse(Result);
                
                if (Result.length > 0) {
                    
                    if (AnswerModeObject.SelectionType == 0) { // Single Selection

                        var MultiMediaElement = {
                            "Id": Result[0].Id,
                            "ServerId": Result[0].ServerId,
                            "MappedEntityClientGuid": Result[0].MappedEntityClientGuid,
                            "Dimension": Result[0].Dimension,
                            "MultiMediaType": Result[0].MultiMediaType,
                            "LocalURL": Result[0].LocalURL,
                            "AlternateName": "No Image",
                            "Comments": Result[0].Comments,
                            "IsDisabled": (Result[0].IsDisabled != "true") ? false : true,
                            "AttributeNodeId": AnswerToBind.AttributeNodeId,
                            "ControlId": AnswerToBind.ControlId
                        };

                        MyInstance.MultiMediaSubElementsList.push(MultiMediaElement);
                        scope[AnswerToBind.ControlId + "_ImageInfo"] = [];
                        scope[AnswerToBind.ControlId + "_ImageInfo"].push({ URL: Result[0].LocalURL, rel: Math.random() });
                        scope.NewDCModel[AnswerToBind.ControlId] = xlatService.xlat("Last updated on ") + Result[0].TimeStamp;
                    }
                    else {
                        //alert("Not implemented exception DCImageCaptureControlConfig multi selection, SelectionType = " + AnswerModeObject.SelectionType + ", DataCaptureBO.SetEditValuesInControls");

                        scope[AnswerToBind.ControlId + "_ImageInfo"] = [];

                        for (var i = 0; i < Result.length; i++) {

                            var MultiMediaElement = {
                                "Id": Result[i].Id,
                                "ServerId": Result[i].ServerId,
                                "MappedEntityClientGuid": Result[i].MappedEntityClientGuid,
                                "Dimension": Result[i].Dimension,
                                "MultiMediaType": Result[i].MultiMediaType,
                                "LocalURL": Result[i].LocalURL,
                                "AlternateName": "No Image",
                                "Comments": Result[i].Comments,
                                "IsDisabled": (Result[i].IsDisabled != "true") ? false : true,
                                "AttributeNodeId": AnswerToBind.AttributeNodeId,
                                "ControlId": AnswerToBind.ControlId
                            };

                            MyInstance.MultiMediaSubElementsList.push(MultiMediaElement);

                            scope[AnswerToBind.ControlId + "_ImageInfo"].push({ URL: Result[i].LocalURL, rel: Math.random(), ControlId: AnswerToBind.ControlId });
                        }

                        scope.NewDCModel[AnswerToBind.ControlId] = xlatService.xlat("Last updated on ") + Result[0].TimeStamp;
                    }
                }
            }
            else {
                if (AnswerModeObject.DataType == "INTEGER") {
                   
                    if (AnswerToBind.Answer != "") 
                        scope.NewDCModel[AnswerModeObject.ControlId] = parseInt(AnswerToBind.Answer);
                    
                    else
                        scope.NewDCModel[AnswerModeObject.ControlId] = AnswerToBind.Answer;

                }

                else {
                    //alert('ssss' + "," + AnswerToBind.Answer + "," + AnswerModeObject.ControlId);
                    scope.NewDCModel[AnswerModeObject.ControlId] = AnswerToBind.Answer;
                }
            }

            // Need to delete
            //if (TemplateId == 44) {
            //    if (AnswerToBind.Answer != "") {
            //        if (AnswerModeObject.ControlId == "txtApprovalTagNo") {
            //            oScope.ApprovalTagNo = true;
            //        }
            //        else if (AnswerModeObject.ControlId == "chkProductStatus") {
            //            oScope.SNCNo = true;
            //        }
            //        else if (AnswerModeObject.ControlId == "chkFrozenType") {
            //            oScope.FrozenState = true;
            //        }
            //    }
            //}
            //if (OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") {
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                if (TemplateId == 44) {
                    if (AnswerToBind.Answer != "") {
                        if (AnswerModeObject.ControlId == "chkVehicleApprovalTag") {
                            if (AnswerToBind.Answer == "1") {
                                oScope.ApprovalTagNo = true;
                            }
                        }
                        else if (AnswerModeObject.ControlId == "chkProductStatus") {
                            if (AnswerToBind.Answer == "22") {
                                oScope.SNCNo = true;
                            }
                        }
                        if (AnswerModeObject.ControlId == "chkGoodsType") {
                            if (AnswerToBind.Answer == "4") {
                                oScope.FrozenState = true;
                            }
                            scope.GoodsTypeId = parseInt(AnswerToBind.Answer);
                        }
                        if (AnswerModeObject.ControlId == "chkProductionDateMode") {
                            if (AnswerToBind.Answer == "55") {
                                scope.PdDate = true;
                                scope.PdMonthAndYear = false;
                            }
                            else {
                                scope.PdDate = false;
                            }
                            if (AnswerToBind.Answer == "56") {
                                scope.PdMonthAndYear = true;
                                scope.PdDate = false;
                            }
                            else {
                                scope.PdMonthAndYear = false;
                            }
                        }
                        if (AnswerModeObject.ControlId == "chkExpiryDateMode") {
                            if (AnswerToBind.Answer == 57) {
                                scope.EXDate = true;
                                scope.EXUsedBy = false;
                                scope.EXUsedBefore = false;
                            }
                            else if (AnswerToBind.Answer == 58) {
                                scope.EXDate = false;
                                scope.EXUsedBy = true;
                                scope.EXUsedBefore = false;
                            }
                            else if (AnswerToBind.Answer == 59) {
                                scope.EXDate = false;
                                scope.EXUsedBy = false;
                                scope.EXUsedBefore = true;
                            }
                            else {
                                scope.EXDate = false;
                                scope.EXUsedBy = false;
                                scope.EXUsedBefore = false;
                            }

                        }
                    }
                }
                else if (TemplateId == 442) {
                    if (AnswerModeObject.ControlId == "chkType") {
                        if (AnswerToBind.Answer == 18) {
                            scope.MachineChiller = true;
                            scope.MachineFreezer = false;
                        }
                        else {
                            scope.MachineChiller = false;
                            scope.MachineFreezer = true;
                        }
                    }
                }
                else if (TemplateId == 535) {
                    ValidatePotWash(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 620) {
                    SetEditValuesForMediaPreparationReport(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 591) {//CurrentStockofLaboratoryMedia
                    if (AnswerModeObject.ControlId == "chkStocktype") {
                        if (AnswerToBind.Answer == 72) {//GlassWare
                            scope.DivGlassware = true;
                            scope.DivMedia = false;
                            scope.NewDCModel.AddlParameterControlId = "";
                            scope.NewDCModel.AddlMediaorReagentsControlId = "";
                            scope.NewDCModel.AddlBrandNameControlId = "";

                        }
                        else if (AnswerToBind.Answer == 73) {//Media
                            scope.DivGlassware = false;
                            scope.DivMedia = true;
                            scope.NewDCModel.AddlGlasswareControlId = "";
                        }
                    }
                }
                    //else if (TemplateId == 738) {////Yearly Verification Certificate
                    //    SetEditValuesForYearlyVerificationCertificate(AnswerModeObject, AnswerToBind);
                    //}
                else if (TemplateId == 575) {////Master List of Microbiology Laboratory Equipment Calibration and Maintenance Status- Rev 1 - (ML-REF- 007)
                    SetEditValuesForMasterListofMLECalibrationandMaintenanceStatus(AnswerModeObject, AnswerToBind);
                }

                else if (TemplateId == 1369) {//Sampling Sheet and Food Analysis
                    SetEditValuesForSamplingSheetAndFoodAnalysis(AnswerModeObject, AnswerToBind);

                }
                else if (TemplateId == 1529) { // Sampling Sheet And Water Analysis
                    SetEditValuesForSamplingSheetAndWaterAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1655) { // Sampling Sheet And Ice Analysis
                    SetEditValuesForSamplingSheetAndIceAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1778) { // Sampling Sheet And Air Analysis
                    SetEditValuesForSamplingSheetAndAirAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1808) { // Sampling Sheet And Hand Swab Analysis
                    SetEditValuesForSamplingSheetAndHandSwabAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1875) { // Sampling Sheet And Linen Analysis
                    SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1837) { //  Sampling Sheet And Equipment swab Analysis
                    SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 293) { //  Temperature Verification of Aircraft Loading
                    SetEditValuesForAircraftLoading(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 1917) { //  Allergen Sample Collection And Report Format - Rev 0 - (HYG- 101)
                    SetEditValuesForSamplingSheetAndAllergenAnalysis(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 3115) { // Airline Complaint Sample First Evaluation Report
                    SetEditValuesForAirlineComplaintSample(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 609) { // Laminar Air Flow Monitoring-Rev 1 - (ML-FRM- 010)
                    SetEditValuesForLaminarAirFlow(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 937) { // Monthly Verification of IR Thermometer - Rev 0 - HYG- 094
                    SetEditValuesForMonthlyVerificationofIR(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 923) { // Monthly Verification of Probe Thermometer - Rev 0 - HYG- 093
                    SetEditValuesForMonthlyVerificationofProbe(AnswerModeObject, AnswerToBind);
                }
                else if (TemplateId == 738) { // Yearly Verification of Probe Thermometer - Rev 1 - (HYG- 056)
                    SetEditValuesForYearlyVerificationofProbe(AnswerModeObject, AnswerToBind);
                }

            }
            //else if (OneViewSessionStorage.Get("ServiceName") == "CMFT") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                SetEditValueForCMFT(AnswerModeObject, AnswerToBind);
            }
            //else if (OneViewSessionStorage.Get("ServiceName") == "TCFMService") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) {
                SetEditValueForTCFM(AnswerModeObject, AnswerToBind);
            }
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 23) {
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 24) {
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 26) {
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 36 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 39) {
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            OneViewConsole.Debug("SetEditValuesInControls end", "DataCaptureBO.SetEditValuesInControls");

        }
        catch (Excep) {
           //// alert("DataCaptureBO.SetEditValuesInControls 11" + Excep);
           //// alert("DataCaptureBO.SetEditValuesInControls 22" + JSON.stringify( Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesInControls", Excep);
        }
        finally {
            Colour = null;
        }
    }

    var SetEditValueForCMFT = function (AnswerModeObject, AnswerToBind) {
        try {
            if (TemplateId == 3) {             
                // SetEditValuesForPreAcceptanceQuestionnaire(AnswerModeObject, AnswerToBind);
                //alert('while edit GlobalTemplateUIEventJobConfigMetaData : ' + JSON.stringify(GlobalTemplateUIEventJobConfigMetaData));
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            else if (TemplateId == 91) {//Pre Acceptance Composition Analysis
                SetEditValuesForPreAcceptanceCompositionAnalysis(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 207) {//SetEditValuesForPreAcceptanceLocalWasteStorage
                // SetEditValuesForPreAcceptanceLocalWasteStorage(AnswerModeObject, AnswerToBind)
                //alert('while edit GlobalTemplateUIEventJobConfigMetaData : ' + JSON.stringify(GlobalTemplateUIEventJobConfigMetaData));
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }            
            else if (TemplateId == 743) {
                SetEditValuesForSingleDepartmentQuestionnaire(AnswerModeObject, AnswerToBind);
            }
            else if (TemplateId == 830) {//Single Department Composition Analysis
                SetEditValuesForSingleDepartmentCompositionAnalysis(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 946) {//SingleDepartmentLocalWasteStorage
                SetEditValuesForSingleDepartmentLocalWasteStorage(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 1462) {//IncidentInvestigationElementsQuestionnaire
                SetEditValuesForIncidentInvestigationElementsQuestionnaire(AnswerModeObject, AnswerToBind)
            }//
            else if (TemplateId == 1554) {//IncidentInvestigationElementsLocalWasteStorage
                SetEditValuesForIncidentInvestigationElementsLocalWasteStorage(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 2070) {//IncidentInvestigationElementsQuestionnaire
                SetEditValuesForLWSEQuestionnaire(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 2671) {//IncidentInvestigationElementsQuestionnaire
                SetEditValuesForSWSPAEQuestionnaire(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 2155) {//SetEditValuesForLWSELocalWasteStorage
                SetEditValuesForLWSELocalWasteStorage(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 2756) {//SetEditValuesForLWSELocalWasteStorage
                SetEditValuesForSingleWasteLocalWasteStorage(AnswerModeObject, AnswerToBind)
            }
            else if (TemplateId == 3271) {//Pre Acceptance Composition Analysis New
                ////SetEditValuesForPreAcceptanceCompositionAnalysis_3271(AnswerModeObject, AnswerToBind)
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AnswerToBind.AttributeNodeId,
                        'ControlId': AnswerToBind.ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': AnswerModeObject,
                        'AnswerToBind': AnswerToBind
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    var oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }
            else if (TemplateId == 4250) {//SetEditValuesForLWSELocalWasteStorage
                SetEditValuesForBulkWasteElements(AnswerModeObject, AnswerToBind);
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValueForCMFT", Excep);
        }
        finally {
        }
    }

    var SetEditValueForTCFM = function (AnswerModeObject, AnswerToBind) {
        try {
            if (TemplateId == 3) {
                SetEditValuesForTescoTraning(AnswerModeObject, AnswerToBind);
            }   
            else if (TemplateId == 160) {
                SetEditValuesForTravisPerkinsTraningModule(AnswerModeObject, AnswerToBind);
            } 
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValueForTCFM", Excep);
        }
        finally {
        }
    }
    var ValidatePotWash = function (AnswerModeObject, AnswerToBind) {
        try {
            
            if (AnswerModeObject.ControlId == "chkWashType") {
                if (AnswerToBind.Answer == 60) {
                    scope.PotMachineReadOnly = true;
                    scope.TrolleyMachineReadOnly = false;
                    scope.DishwashMachineReadOnly = false;
                    scope["AddlTrolleyMachineControlId"].Clear();
                    scope["AddlDishwashMachineControlId"].Clear();
                    scope.NewDCModel.AddlPotMachineControlId = "";                    
                }
                else if (AnswerToBind.Answer == 61) {
                    scope.PotMachineReadOnly = false;
                    scope.TrolleyMachineReadOnly = true;
                    scope.DishwashMachineReadOnly = false;
                    scope["AddlPotMachineControlId"].Clear();
                    scope["AddlDishwashMachineControlId"].Clear();
                    scope.NewDCModel.AddlTrolleyMachineControlId = "";
                                       
                }
                else if (AnswerToBind.Answer == 62) {
                    scope.PotMachineReadOnly = false;
                    scope.TrolleyMachineReadOnly = false;
                    scope.DishwashMachineReadOnly = true;
                    scope["AddlPotMachineControlId"].Clear();
                    scope["AddlTrolleyMachineControlId"].Clear();
                    scope.NewDCModel.AddlDishwashMachineControlId = "";
                }
            }

            if (AnswerModeObject.ControlId == "chkTestType") {
                if (AnswerToBind.Answer == 63) {
                    scope.ThermoLabelReadOnly = true;
                    scope.QuadTestReadOnly = false;
                    scope.ChlorineTestReadOnly = false;
                    //scope.NewDCModel["txtQuadTestControlId"] = "";
                    //scope.NewDCModel["txtChlorineTestControlId"] = "";
                }
                else if (AnswerToBind.Answer == 64) {
                    scope.ThermoLabelReadOnly = false;
                    scope.QuadTestReadOnly = true;
                    scope.ChlorineTestReadOnly = false;
                    //scope["chkThermoLabel"].Clear();
                    //scope.NewDCModel["txtChlorineTestControlId"] = "";
                }
                else if (AnswerToBind.Answer == 65) {
                    scope.ThermoLabelReadOnly = false;
                    scope.QuadTestReadOnly = false;
                    scope.ChlorineTestReadOnly = true;
                    //scope["chkThermoLabel"].Clear();
                    //scope.NewDCModel["txtQuadTestControlId"] = "";
                }
            }

            if (AnswerModeObject.ControlId == "chkThermoLabel") {
                var Washtype = scope["chkWashType"].GetSelectedValue();
                var TrolleyMachine = scope["AddlTrolleyMachineControlId"].GetSelectedText();
                var DishwashMachine = scope["AddlDishwashMachineControlId"].GetSelectedText();
                var TestType=scope["chkTestType"].GetSelectedValue();
               // alert(AnswerToBind.Answer + "," + Washtype + "," + TrolleyMachine + "," + DishwashMachine);
                if (AnswerToBind.Answer == 67) {
                    //if ((Washtype == 60) || (Washtype == 61 && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (1)" && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (2)") || (Washtype == 62 && DishwashMachine != "HOBART   CR 1" && DishwashMachine != "HOBART   TC 1" && DishwashMachine != "HOBART   C 10")) {
                    if ((Washtype == 61 && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (1)" && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (2)") || (Washtype == 62 && DishwashMachine != "HOBART   CR 1" && DishwashMachine != "HOBART   TC 1" && DishwashMachine != "HOBART   C 10")) {
                        scope.QuadTestReadOnly = true;
                    }
                    else {
                        scope.QuadTestReadOnly = false;
                    }
                    if (DcPlaceId == 3) {
                        if (TestType != 64){
                            scope.QuadTestReadOnly = false;
                        }
                    }
                }

                else if (AnswerToBind.Answer == 66) {
                    scope.QuadTestReadOnly = false;
                    //scope.NewDCModel["txtQuadTestControlId"] = "";
                }

                else {
                }
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ValidatePotWash", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForMediaPreparationReport = function (AnswerModeObject, AnswerToBind) {
        try {
            if (AnswerModeObject.ControlId == "chkTypeofMedia") {
                if (AnswerToBind.Answer == 70) {
                    scope.NameofMediaReadOnly = true;
                    scope.NameofDilieuntReadOnly = false;
                    scope.NewDCModel.txtNameofMediaControlId = "";
                    scope.NewDCModel.txtNameofDilieuntControlId = "";
                }
                else if (AnswerToBind.Answer == 71) {
                    scope.NameofMediaReadOnly = false;
                    scope.NameofDilieuntReadOnly = true;
                    scope.NewDCModel.txtNameofMediaControlId = "";
                    scope.NewDCModel.txtNameofDilieuntControlId = "";
                }
            }
            
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForMediaPreparationReport", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForYearlyVerificationCertificate = function (AnswerModeObject, AnswerToBind) {
        try {
            var oThermometerType = scope.chkThermometerType;
            //var oFrequency = scope.chkFrequency;

            if (AnswerModeObject.ControlId == "chkThermometerType") {
                if (AnswerToBind.Answer == 75) {// Probe
                    scope.DivTestCap1 = true;
                    scope.DivTestCap2 = true;
                    scope.DivTestCap3 = true;
                    scope.DivBoilingWater = true;
                    scope.DivProbeThermometerSerialNo = true;

                    scope.DivICECAP = false;
                    scope.DivValidator = false;
                    scope.DivIRThermometerSerialNo = false;
                }
                //else if (AnswerToBind.Answer == 75) {// Probe
                //    scope.DivTestCap1 = true;
                //    scope.DivTestCap2 = false;
                //    scope.DivTestCap3 = false;
                //    scope.DivBoilingWater = false;

                //    scope.DivValidator = false;
                //}
                else if (AnswerToBind.Answer == 74) {// IR
                    scope.DivValidator = true;
                    scope.DivICECAP = true;
                    scope.DivIRThermometerSerialNo = true;

                    scope.DivTestCap1 = false;
                    scope.DivTestCap2 = false;
                    scope.DivTestCap3 = false;
                    scope.DivBoilingWater = false;
                    scope.DivProbeThermometerSerialNo = false;
                }
            }
            /*
            else if (AnswerModeObject.ControlId == "chkFrequency") {
                if (AnswerToBind.Answer == 76 && oThermometerType.GetSelectedValue() == 75) {//Yearly && Probe
                    scope.DivTestCap1 = true;
                    scope.DivTestCap2 = true;
                    scope.DivTestCap3 = true;
                    scope.DivBoilingWater = true;

                    scope.DivValidator = false;
                }
                else if (AnswerToBind.Answer == 77 && oThermometerType.GetSelectedValue() == 75) {//Monthly && Probe
                    scope.DivTestCap1 = true;
                    scope.DivTestCap2 = false;
                    scope.DivTestCap3 = false;
                    scope.DivBoilingWater = false;

                    scope.DivValidator = false;
                }
                else if (AnswerToBind.Answer == 76 && oThermometerType.GetSelectedValue() == 74) {//Yearly && IR
                    scope.DivValidator = true;

                    scope.DivTestCap1 = false;
                    scope.DivTestCap2 = false;
                    scope.DivTestCap3 = false;
                    scope.DivBoilingWater = false;
                }

            }
            */

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForMediaPreparationReport", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForMasterListofMLECalibrationandMaintenanceStatus = function (AnswerModeObject, AnswerToBind) {
        try {
            if (AnswerModeObject.ControlId == "chkExternalCaliberation") {
                if (AnswerToBind.Answer == 78) {
                    scope.DivECServiceProvider = true;
                    scope.DivECCaliberationDueDate = true;
                    //  scope.NewDCModel.AddlParameterControlId = "";                

                }
                else {
                    scope.DivECServiceProvider = false;
                    scope.DivECCaliberationDueDate = false;
                }
            }
            else if (AnswerModeObject.ControlId == "chkPreventionMaintanence") {
                if (AnswerToBind.Answer == 78) {//yes
                    scope.DivPMServiceProvider = true;
                    scope.DivPMS1stpreventiveMaintainence = true;
                    scope.DivPMS2ndpreventiveMaintainence = true;
                    //  scope.NewDCModel.AddlParameterControlId = "";                

                }
                else {
                    scope.DivPMServiceProvider = false;
                    scope.DivPMS1stpreventiveMaintainence = false;
                    scope.DivPMS2ndpreventiveMaintainence = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForMediaPreparationReport", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSamplingSheetAndFoodAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            if (AnswerModeObject.ControlId == "chkParameterTested") {
                if (AnswerToBind.Answer == 122) {//TVB

                    ShowHideSamplingSheetAndFoodAnalysisinBO('TVBShow');

                }
                else if (AnswerToBind.Answer == 123) {//Coliforms              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('ColiformsShow');
                }
                else if (AnswerToBind.Answer == 124) {//E.coll              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('EcollShow');
                }
                else if (AnswerToBind.Answer == 125) {//S.aureus              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('SaureusShow');
                }
                else if (AnswerToBind.Answer == 126) {//B.cereus             
                    ShowHideSamplingSheetAndFoodAnalysisinBO('BcereusShow');
                }
                else if (AnswerToBind.Answer == 127) {//V.parahaemolyticus              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('VparahaemolyticusShow');
                }
                else if (AnswerToBind.Answer == 128) {//Salmonella             
                    ShowHideSamplingSheetAndFoodAnalysisinBO('SalmonellaShow');
                }
                else if (AnswerToBind.Answer == 129) {//Listeria monocytogenes           
                    ShowHideSamplingSheetAndFoodAnalysisinBO('ListeriaShow');
                }
                else if (AnswerToBind.Answer == 130) {//Clostridium perfringens              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('ClostridiumShow');
                }
                else if (AnswerToBind.Answer == 131) {//YMC              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('YMCShow');
                }
                else if (AnswerToBind.Answer == 132) {//Campylobacter              
                    ShowHideSamplingSheetAndFoodAnalysisinBO('CampylobacterShow');
                }
            }

            else if (AnswerModeObject.ControlId == "AddlSamplingToolsControlId") {
                // if (AnswerToBind.Answer == 76274) { //put others id
                //if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "Others") {
                if (AnswerToBind.AnswerValue == "Others"){
                    //show textbox
                    scope.OthersShow = true;
                }
                else {
                    //hide textbox
                    scope.OthersShow = false;
                    scope.NewDCModel.txtOthersControlId = "";
                }
            }

           else if (AnswerModeObject.ControlId == "chkConditionOfAreaOnSampling") {
                if (AnswerToBind.Answer == 115) {
                    scope.AreaConditionShow = true;
                   
                }
                else {
                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;
                    scope["AddlAreaConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersAreaConditionControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleOnReceipt") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleConditionShow = true;
                    
                }
                else {
                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;
                    scope["AddlSampleConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleReceiptControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleAnalysis") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleAnalysisShow = true;
                    
                }
                else {
                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;
                    scope["AddlSampleAnalysisUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleAnalysisControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "AddlAreaConditionUnsatisfactoryControlId") {
                // if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedValue() == 65701) {
                if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "Others") {
                    scope.OthersAreaConditionShow = true;
                }
                else {
                    scope.OthersAreaConditionShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleConditionUnsatisfactoryControlId") {
                //if (scope.AddlSampleConditionUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "Others") {
                    scope.OthersSampleReceiptShow = true;
                }
                else {
                    scope.OthersSampleReceiptShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleAnalysisUnsatisfactoryControlId") {
                // if (scope.AddlSampleAnalysisUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "Others") {
                    scope.OthersSampleAnalysisShow = true;
                }
                else {
                    scope.OthersSampleAnalysisShow = false;
                }
            }

            else if (AnswerModeObject.ControlId == "chkFoodReceivedType") {
                if (AnswerToBind.Answer == 139) {
                    scope.SampleLocationShow = true;
                    scope.OutSourceDetailsShow = false;

                    //scope.NewDCModel.txtCustomerNameControlId = "";
                    //scope.NewDCModel.txtAddressControlId = "";
                    scope.NewDCModel.DTDateofReceiptControlId = "";
                    //scope.NewDCModel.ATReceivingTemperatureControlId = "";
                    //document.getElementById('DTTimeofReceiptControlId').value = '';
                    //scope["DTTimeofReceiptControlId_DateTime"] = "";
                    //scope.NewDCModel.DTTimeofReceiptControlId = "";
                    scope.NewDCModel.txtTransportOfSample = "";

                }
                else if (AnswerToBind.Answer == 140) {
                    scope.OutSourceDetailsShow = true;

                    scope.SampleLocationShow = true;
                }
                else if (AnswerToBind.Answer == 141) {
                    scope.SampleLocationShow = true;
                    scope.OutSourceDetailsShow = false;

                    //scope.NewDCModel.txtCustomerNameControlId = "";
                    //scope.NewDCModel.txtAddressControlId = "";
                    scope.NewDCModel.DTDateofReceiptControlId = "";
                    //scope.NewDCModel.ATReceivingTemperatureControlId = "";
                    //document.getElementById('DTTimeofReceiptControlId').value = '';
                    //scope["DTTimeofReceiptControlId_DateTime"] = "";
                    //scope.NewDCModel.DTTimeofReceiptControlId = "";
                    scope.NewDCModel.txtTransportOfSample = "";
                }
                else {
                    scope.SampleLocationShow = false;
                    //scope.NewDCModel.txtCustomerNameControlId = "";
                    //scope.NewDCModel.txtAddressControlId = "";
                    scope.NewDCModel.DTDateofReceiptControlId = "";
                    //scope.NewDCModel.ATReceivingTemperatureControlId = "";
                    //document.getElementById('DTTimeofReceiptControlId').value = '';
                    //scope["DTTimeofReceiptControlId_DateTime"] = "";
                    //scope.NewDCModel.DTTimeofReceiptControlId = "";
                    scope.NewDCModel.txtTransportOfSample = "";


                    scope.OutSourceDetailsShow = false;
                    //scope.NewDCModel.txtSampleLocationControlId = "";
                }
            }

            else if (AnswerModeObject.ControlId == "chkNAControlId") {
                if (AnswerToBind.Answer == "NA") {
                    scope.Div_txtNARemarksControlId = true;
                    //scope.NewDCModel.txtNARemarksControlId = "No FSS on duty";
                }
                else {
                    scope.Div_txtNARemarksControlId = false;
                    scope.NewDCModel.txtNARemarksControlId = "";
                }

            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForMediaPreparationReport", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSamplingSheetAndHandSwabAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            if (AnswerModeObject.ControlId == "chkParameterTested") {
                var ParameterTested = "";

                if (AnswerToBind.Answer == 145) {//Staph
                    ParameterTested = "StaphShow";
                }
                else if (AnswerToBind.Answer == 146) {//Ecoli              
                    ParameterTested = "EcoliShow";
                }
                scope.StaphShow = false;
                scope.EcoliShow = false;

                scope[ParameterTested] = true;


            }
            else if (AnswerModeObject.ControlId == "chkGeneralAppearance") {
               
                if (AnswerToBind.Answer == 115) {
                    scope.AppearanceRemarksShow = true;

                    scope.divExpectedConditions = true;
                }
                else if (AnswerToBind.Answer == 114) {
                    scope.AppearanceRemarksShow = false;
                    scope.NewDCModel.txtAppearanceRemarksControlId = "";

                    scope.divExpectedConditions = false;
                    scope["AddlUnsatisfactoryExpectedConditionsControlId"].Clear();
                }
            }
            
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSamplingSheetAndHandSwabAnalysis", Excep);
        }
        finally {
        }
    }

    var ShowHideSamplingSheetAndFoodAnalysisinBO = function (ShowParameter) {
        try {
            scope.TVBShow = false;
            scope.ColiformsShow = false;
            scope.EcollShow = false;
            scope.SaureusShow = false;
            scope.BcereusShow = false;
            scope.VparahaemolyticusShow = false;
            scope.SalmonellaShow = false;
            scope.ListeriaShow = false;
            scope.ClostridiumShow = false;
            scope.YMCShow = false;
            scope.CampylobacterShow = false;

            scope[ShowParameter] = true;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ShowHideSamplingSheetAndFoodAnalysis", Excep);
        }
    }


    var SetEditValuesForSamplingSheetAndWaterAnalysis=  function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndWaterAnalysis Start", "AnswerMode.SetEditValuesForSamplingSheetAndWaterAnalysis");
         
            if (AnswerModeObject.ControlId == "chkParameterTested") {
                if (AnswerToBind.Answer == 133) {//TVB
                    EditShowHideSamplingSheetAndWaterAnalysis('TVBShow');
                }
                else if (AnswerToBind.Answer == 134) {//Coliforms              
                    EditShowHideSamplingSheetAndWaterAnalysis('ColiformsShow');
                }
                else if (AnswerToBind.Answer == 135) {//E.coll              
                    EditShowHideSamplingSheetAndWaterAnalysis('EcollShow');
                }
                else if (AnswerToBind.Answer == 136) {//Pseudomonas             
                    EditShowHideSamplingSheetAndWaterAnalysis('PseudomonasShow');
                }
                else if (AnswerToBind.Answer == 137) {//Enterococcus      
                    EditShowHideSamplingSheetAndWaterAnalysis('EnterococcusShow');
                }
                else if (AnswerToBind.Answer == 138) {//SalmonellaShow          
                    EditShowHideSamplingSheetAndWaterAnalysis('SalmonellaShow');
                }

            }

            else if (AnswerModeObject.ControlId == "AddlSamplingToolsControlId") {
              
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    //show textbox
                    scope.OthersShow = true;
                }
                else {
                    //hide textbox
                    scope.OthersShow = false;
                    scope.NewDCModel.txtOthersControlId = "";
                }
            }

            else if (AnswerModeObject.ControlId == "AddlLocationControlId") {
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    //show textbox
                    scope.OthersLocationShow = true;
                }
                else {
                    //hide textbox
                    scope.OthersLocationShow = false;
                    scope.NewDCModel.txtOthersLocationControlId = "";
                }
            }

            else if (AnswerModeObject.ControlId == "chkConditionOfAreaOnSampling") {
                if (AnswerToBind.Answer == 115) {
                    scope.AreaConditionShow = true;

                }
                else {
                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;
                    scope["AddlAreaConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersAreaConditionControlId = "";

                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleOnReceipt") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleConditionShow = true;

                }
                else {
                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;
                    scope["AddlSampleConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleReceiptControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleAnalysis") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleAnalysisShow = true;

                }
                else {
                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;
                    scope["AddlSampleAnalysisUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleAnalysisControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "AddlAreaConditionUnsatisfactoryControlId") {
                //if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedValue() == 65701) {
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    scope.OthersAreaConditionShow = true;
                }
                else {
                    scope.OthersAreaConditionShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleConditionUnsatisfactoryControlId") {
                //if (scope.AddlSampleConditionUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    scope.OthersSampleReceiptShow = true;
                }
                else {
                    scope.OthersSampleReceiptShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleAnalysisUnsatisfactoryControlId") {
                // if (scope.AddlSampleAnalysisUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    scope.OthersSampleAnalysisShow = true;
                }
                else {
                    scope.OthersSampleAnalysisShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "chkNAControlId") {               
                if (AnswerToBind.Answer == "NA") {
                    scope.Div_txtNARemarksControlId = true;
                    //scope.NewDCModel.txtNARemarksControlId = "No FSS on duty";
                }
                else {
                    scope.Div_txtNARemarksControlId = false;
                    scope.NewDCModel.txtNARemarksControlId = "";
                }
                
            }
            

            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndWaterAnalysis End", "AnswerMode.SetEditValuesForSamplingSheetAndWaterAnalysis");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForSamplingSheetAndWaterAnalysis", Excep);
        }


    }

    var EditShowHideSamplingSheetAndWaterAnalysis= function (ShowParameter) {
        try {
            scope.TVBShow = false;
            scope.ColiformsShow = false;
            scope.EcollShow = false;
            scope.PseudomonasShow = false;
            scope.EnterococcusShow = false;
            scope.SalmonellaShow = false;


            scope[ShowParameter] = true;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.EditShowHideSamplingSheetAndWaterAnalysis", Excep);
        }
    }

    var SetEditValuesForSamplingSheetAndIceAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndIceAnalysis Start", "AnswerMode.SetEditValuesForSamplingSheetAndIceAnalysis");

            if (AnswerModeObject.ControlId == "chkParameterTested") {
                if (AnswerToBind.Answer == 133) {//TVB
                    EditShowHideSamplingSheetAndIceAnalysis('TVBShow');
                }
                else if (AnswerToBind.Answer == 134) {//Coliforms              
                    EditShowHideSamplingSheetAndIceAnalysis('ColiformsShow');
                }
                else if (AnswerToBind.Answer == 135) {//E.coll              
                    EditShowHideSamplingSheetAndIceAnalysis('EcollShow');
                }
                else if (AnswerToBind.Answer == 136) {//Pseudomonas             
                    EditShowHideSamplingSheetAndIceAnalysis('PseudomonasShow');
                }
                else if (AnswerToBind.Answer == 137) {//Enterococcus      
                    EditShowHideSamplingSheetAndIceAnalysis('EnterococcusShow');
                }
                else if (AnswerToBind.Answer == 138) {//SalmonellaShow          
                    EditShowHideSamplingSheetAndIceAnalysis('SalmonellaShow');
                }

            }

            else if (AnswerModeObject.ControlId == "AddlSamplingToolsControlId") {
                // if (AnswerToBind.Answer == 65700) { //put others id
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    //show textbox
                    scope.OthersShow = true;
                }
                else {
                    //hide textbox
                    scope.OthersShow = false;
                    scope.NewDCModel.txtOthersControlId = "";
                }
            }

            else if (AnswerModeObject.ControlId == "AddlLocationControlId") {
                //if (AnswerToBind.Answer == 65700) { //put others id
                if (AnswerToBind.AnswerValue == "Others") { //put others id
                    //show textbox
                    scope.OthersLocationShow = true;
                }
                else {
                    //hide textbox
                    scope.OthersLocationShow = false;
                    scope.NewDCModel.txtOthersLocationControlId = "";
                }
            }

            else if (AnswerModeObject.ControlId == "chkConditionOfAreaOnSampling") {
                if (AnswerToBind.Answer == 115) {
                    scope.AreaConditionShow = true;

                }
                else {
                    scope.AreaConditionShow = false;
                    scope.OthersAreaConditionShow = false;
                    scope["AddlAreaConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersAreaConditionControlId = "";

                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleOnReceipt") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleConditionShow = true;

                }
                else {
                    scope.SampleConditionShow = false;
                    scope.OthersSampleReceiptShow = false;
                    scope["AddlSampleConditionUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleReceiptControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "chkConditionOfSampleAnalysis") {
                if (AnswerToBind.Answer == 115) {
                    scope.SampleAnalysisShow = true;

                }
                else {
                    scope.SampleAnalysisShow = false;
                    scope.OthersSampleAnalysisShow = false;
                    scope["AddlSampleAnalysisUnsatisfactoryControlId"].Clear();
                    scope.NewDCModel.txtOthersSampleAnalysisControlId = "";
                }
            }
            else if (AnswerModeObject.ControlId == "AddlAreaConditionUnsatisfactoryControlId") {
                // if (scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedValue() == 65701) {
                if (AnswerToBind.AnswerValue == "Others") {
                    scope.OthersAreaConditionShow = true;
                }
                else {
                    scope.OthersAreaConditionShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleConditionUnsatisfactoryControlId") {
                //if (scope.AddlSampleConditionUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (AnswerToBind.AnswerValue == "Others") { 
                    scope.OthersSampleReceiptShow = true;
                }
                else {
                    scope.OthersSampleReceiptShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "AddlSampleAnalysisUnsatisfactoryControlId") {
                // if (scope.AddlSampleAnalysisUnsatisfactoryControlId.GetSelectedValue() == 65702) {
                if (AnswerToBind.AnswerValue == "Others") {
                    scope.OthersSampleAnalysisShow = true;
                }
                else {
                    scope.OthersSampleAnalysisShow = false;
                }
            }
            else if (AnswerModeObject.ControlId == "chkNAControlId") {
                if (AnswerToBind.Answer == "NA") {
                    scope.Div_txtNARemarksControlId = true;
                    //scope.NewDCModel.txtNARemarksControlId = "No FSS on duty";
                }
                else {
                    scope.Div_txtNARemarksControlId = false;
                    scope.NewDCModel.txtNARemarksControlId = "";
                }

            }

            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndIceAnalysis End", "AnswerMode.SetEditValuesForSamplingSheetAndIceAnalysis");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForSamplingSheetAndIceAnalysis", Excep);
        }


    }

    var SetEditValuesForSamplingSheetAndAirAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndIceAnalysis Start", "AnswerMode.SetEditValuesForSamplingSheetAndIceAnalysis");
            var ParameterTested = "";

            if (AnswerModeObject.ControlId == "chkParameterTested") {
              
                if (AnswerToBind.Answer == 142) {//TVB
                    ParameterTested = "TVBShow";
                }
                else if (AnswerToBind.Answer == 143) {//Coliforms              
                    ParameterTested = "ColiformsShow";
                }
                else if (AnswerToBind.Answer == 144) {//YeasAndMould           
                    ParameterTested = "YeasAndMouldShow";
                }


                scope.TVBShow = false;
                scope.ColiformsShow = false;
                scope.YeasAndMouldShow = false;

                if (ParameterTested!=""){
                    scope[ParameterTested] = true;
                }

            }

            else if (AnswerModeObject.ControlId == "chkTestMethod") {
                if (AnswerToBind.Answer == 68) {//Air Sampler
                    scope.ExposureShow = false;
                    scope.VolumeOfAirShow = true;
                    scope.DivDTTimeControlIdShow = true;
                    scope.Div_DTCompletionDate1ControlId = true;
                    scope.Div_DTCompletionDate2ControlId = false;
                    document.getElementById('lblTVBActualValue').innerHTML = "Actual Value CFU / m&#179";
                    document.getElementById('lblYMCActualValue').innerHTML = "Actual Value CFU / m&#179";
                }
                else if (AnswerToBind.Answer == 69) {//Open Plate              
                    scope.ExposureShow = true;
                    scope.VolumeOfAirShow = false;
                    scope.DivDTTimeControlIdShow = false;
                    scope.Div_DTCompletionDate1ControlId = false;
                    scope.Div_DTCompletionDate2ControlId = true;
                    document.getElementById('lblTVBActualValue').innerHTML = "Actual Value CFU / 15 min exposure";
                    document.getElementById('lblYMCActualValue').innerHTML = "Actual Value CFU / 15 min exposure";
                }
                else {
                    scope.ExposureShow = false;
                    scope.VolumeOfAirShow = false;
                    scope.DivDTTimeControlIdShow = true;
                    scope.Div_DTCompletionDate1ControlId = false;
                    scope.Div_DTCompletionDate2ControlId = false;
                    document.getElementById('lblTVBActualValue').innerHTML = "Actual Value";
                    document.getElementById('lblYMCActualValue').innerHTML = "Actual Value";
                }
            }

            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndIceAnalysis End", "AnswerMode.SetEditValuesForSamplingSheetAndIceAnalysis");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForSamplingSheetAndIceAnalysis", Excep);
        }


    }

    var EditShowHideSamplingSheetAndIceAnalysis = function (ShowParameter) {
        try {
            scope.TVBShow = false;
            scope.ColiformsShow = false;
            scope.EcollShow = false;
            scope.PseudomonasShow = false;
            scope.EnterococcusShow = false;
            scope.SalmonellaShow = false;


            scope[ShowParameter] = true;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.EditShowHideSamplingSheetAndIceAnalysis", Excep);
        }
    }

    var SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis Start", "AnswerMode.SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis");
            var ParameterTested = "";
          
            if (AnswerModeObject.ControlId == "chkParameterTested") {
                if (AnswerToBind.Answer == 147) {//TVB
                    ParameterTested = "TVBShow";
                }
                else if (AnswerToBind.Answer == 148) {//Coliforms              
                    ParameterTested = "ColiformsShow";
                }
                else if (AnswerToBind.Answer == 149) {//Ecoli              
                    ParameterTested = "EcoliShow";
                }
                else if (AnswerToBind.Answer == 150) {//Listeria              
                    ParameterTested = "ListeriaShow";
                }
                else if (AnswerToBind.Answer == 151) {//YeasAndMould           
                    ParameterTested = "YeasAndMouldShow";
                }


                scope.TVBShow = false;
                scope.ColiformsShow = false;
                scope.EcoliShow = false;
                scope.ListeriaShow = false;
                scope.YeasAndMouldShow = false;

                if (ParameterTested != "") {
                    scope[ParameterTested] = true;
                }
            }


            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis End", "AnswerMode.SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForSamplingSheetAndLinenOrEquipmentSwabAnalysis", Excep);
        }


    }

    var SetEditValuesForAircraftLoading = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForAircraftLoading Start", "AnswerMode.SetEditValuesForAircraftLoading");
            var ParameterTested = "";

            if (AnswerModeObject.ControlId == "chkChillerAvailability") {
                if (AnswerToBind.Answer == 1) {//TVB
                    scope.DivGalleryChillerShow = true;
                }
                else {
                    scope.DivGalleryChillerShow = false;
                }
            }

            OneViewConsole.Debug("SetEditValuesForAircraftLoading End", "AnswerMode.SetEditValuesForAircraftLoading");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForAircraftLoading", Excep);
        }


    }

    var SetEditValuesForSamplingSheetAndAllergenAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndAllergenAnalysis Start", "AnswerMode.SetEditValuesForSamplingSheetAndAllergenAnalysis");
            var ParameterTested = "";

            if (AnswerModeObject.ControlId == "chkParameterTested") {                

                if (AnswerToBind.Answer == 152) {//Total Milk Allergen
                    ParameterTested = "DivMilkShow";
                }
                else if (AnswerToBind.Answer == 153) {//Egg Allergen              
                    ParameterTested = "DivEggShow";
                }
                else if (AnswerToBind.Answer == 154) {//Almond Allergen              
                    ParameterTested = "DivAlmondShow";
                }
                else if (AnswerToBind.Answer == 155) {//Peanut Allergen              
                    ParameterTested = "DivPeanutShow";
                }
                else if (AnswerToBind.Answer == 156) {//Gladin Allergen           
                    ParameterTested = "DivGladinShow";
                }
                else if (AnswerToBind.Answer == 157) {//Mustard Allergen           
                    ParameterTested = "DivMustardShow";
                }
                else if (AnswerToBind.Answer == 158) {//Soy Allergen           
                    ParameterTested = "DivSoyShow";
                }


                scope.DivMilkShow = false;
                scope.DivEggShow = false;
                scope.DivAlmondShow = false;
                scope.DivPeanutShow = false;
                scope.DivGladinShow = false;
                scope.DivMustardShow = false;
                scope.DivSoyShow = false;

                if (ParameterTested != "") {
                    scope[ParameterTested] = true;
                }
            }


            OneViewConsole.Debug("SetEditValuesForSamplingSheetAndAllergenAnalysis End", "AnswerMode.SetEditValuesForSamplingSheetAndAllergenAnalysis");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForSamplingSheetAndAllergenAnalysis", Excep);
        }


    }

    var SetEditValuesForAirlineComplaintSample = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForAirlineComplaintSample Start", "AnswerMode.SetEditValuesForAirlineComplaintSample");

            if (AnswerModeObject.ControlId == "chkSourceofForeignObjectControlId") {
                if (AnswerToBind.Answer == 165) {
                    scope["DivOthers"] = true;
                }
                else {
                    scope["DivOthers"] = false;
                }
            }
            else if (AnswerModeObject.ControlId == "chkSampleSourceControlId") {
                if (AnswerToBind.Answer == 167) {//Supplier
                    scope["DivForwardCPD"] = true;
                    scope["DivFoodPoint"] = false;
                }
                else if (AnswerToBind.Answer == 168) {//Food Point
                    scope["DivForwardCPD"] = false;
                    scope["DivFoodPoint"] = true;
                }
                else {
                    scope["DivForwardCPD"] = false;
                    scope["DivFoodPoint"] = false;
                }
            }

            OneViewConsole.Debug("SetEditValuesForAirlineComplaintSample End", "AnswerMode.SetEditValuesForAirlineComplaintSample");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForAirlineComplaintSample", Excep);
        }


    }

    var SetEditValuesForLaminarAirFlow = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForLaminarAirFlow Start", "AnswerMode.SetEditValuesForLaminarAirFlow");

            if (AnswerModeObject.ControlId == "chkTestMethod") {
                if (AnswerToBind.Answer == 68) {//Air Sampler
                    scope.AirSamplerDetailsShow = true;
                    scope.OpenPlateDetailsShow = false;

                    document.getElementById('lblTVBColonyCount').innerHTML = "Colony Count CFU / m&#179";
                    document.getElementById('lblYMCColonyCount').innerHTML = "Colony Count CFU / m&#179";
                }
                else if (AnswerToBind.Answer == 69) {//Open Plate              
                    scope.AirSamplerDetailsShow = false;
                    scope.OpenPlateDetailsShow = true;

                    document.getElementById('lblTVBColonyCount').innerHTML = "Colony Count CFU / 15 min exposure";
                    document.getElementById('lblYMCColonyCount').innerHTML = "Colony Count CFU / 15 min exposure";
                }
                else {
                    scope.AirSamplerDetailsShow = false;
                    scope.OpenPlateDetailsShow = false;

                    document.getElementById('lblTVBColonyCount').innerHTML = "Colony Count CFU / m&#179";
                    document.getElementById('lblYMCColonyCount').innerHTML = "Colony Count CFU / m&#179";
                }
            }
            else if (AnswerModeObject.ControlId == "chkParameterTested") {
                if (AnswerToBind.Answer == 179) {//TVB
                    scope.TVBShow = true;
                    scope.YMCShow = false;
                }
                else if (AnswerToBind.Answer == 180) {//YMC
                    scope.TVBShow = false;
                    scope.YMCShow = true;
                }
                else {
                    scope.TVBShow = false;
                    scope.YMCShow = false;
                }
            }

            OneViewConsole.Debug("SetEditValuesForLaminarAirFlow End", "AnswerMode.SetEditValuesForLaminarAirFlow");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForLaminarAirFlow", Excep);
        }


    }

    var SetEditValuesForMonthlyVerificationofIR = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForMonthlyVerificationofIR Start", "AnswerMode.SetEditValuesForMonthlyVerificationofIR");

            if (AnswerModeObject.ControlId == "ChkThermometerStatusControlId") {
                if (AnswerToBind.Answer == "Not Available" || AnswerToBind.Answer == "Damage" || AnswerToBind.Answer == "Lost") {
                    scope.DateOfVerificationShow = false;
                    scope.ICECAPmethodShow = false;
                    scope.ValidatorMethodShow = false;
                    scope.OtherhermometerStatusShow = false;
                }
                else if (AnswerToBind.Answer == "Other") {
                    scope.DateOfVerificationShow = false;
                    scope.ICECAPmethodShow = false;
                    scope.ValidatorMethodShow = false;
                    scope.OtherhermometerStatusShow = true;
                }
                else {
                    scope.DateOfVerificationShow = true;
                    scope.ICECAPmethodShow = true;
                    scope.ValidatorMethodShow = true;
                    scope.OtherhermometerStatusShow = false;
                }
            }           

            OneViewConsole.Debug("SetEditValuesForMonthlyVerificationofIR End", "AnswerMode.SetEditValuesForMonthlyVerificationofIR");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForMonthlyVerificationofIR", Excep);
        }


    }

    this.GetNCDcID = function (DcId) {
        try
        {
            OneViewConsole.Debug("GetNCDcID start", "DataCaptureBO.GetNCDcID");
            OneViewConsole.DataLog("DcId : " + DcId, "DataCaptureBO.GetNCDcID");

            var query = "SELECT DISTINCT Id FROM DataCaptureEntity WHERE ClientGuid IN(SELECT ActionDetailsEntity.DataCaptureClientGuid FROM DCNCMapping INNER JOIN  ActionDetailsEntity  ON DCNCMapping.ActionClientGuid=ActionDetailsEntity.ActionClientGuid  INNER JOIN DataCaptureEntity ON DCNCMapping.DataCaptureClientGuid=DataCaptureEntity.ClientGuid WHERE DataCaptureEntity.Id=" + DcId + ")";
           // alert('query :' + query);
            var result = window.OneViewSqlite.excecuteSqlReader(query);
            result = JSON.parse(result);
            if (result.length > 0)
            { return result[0].Id; }
            else {
                return undefined;
            }

          
            OneViewConsole.Debug("SetEditValuesInControls end", "DataCaptureBO.SetEditValuesInControls");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetNCDcID", Excep);
        }
        finally {
            query = null;
            result = null;
        }
    }

    ///Set Shift on edit of record
    this.SetShiftValueOnEditOLD = function (DCId) {
        try
        {
            OneViewConsole.Debug("SetShiftValueOnEdit start", "DataCaptureBO.SetShiftValueOnEdit");
            OneViewConsole.DataLog("DCId : " + DCId, "DataCaptureBO.SetShiftValueOnEdit");

            var _oDcResults = oDataCaptureDAO.GetDcResults_DAO(DCId);
            var _oLastUpdatedDcResult = GetLastUpdatedShift(_oDcResults);
            var oShift = new AnswerModeUserControl({ 'Scope': oScope, 'ControlId': 'chkShift', 'DataSourceModelName': 'ShiftOptions', 'DisplayElementModelName': 'NewDCModel.chkShift' });
            oShift.Set({ Id: _oLastUpdatedDcResult.ShiftId, Name: _oLastUpdatedDcResult.ShiftName, ColourIndex: 'Green', selected: true });

            OneViewConsole.Debug("SetEditValuesInControls end", "DataCaptureBO.SetShiftValueOnEdit");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetShiftValueOnEdit", Excep);
        }
        finally {
            _oDcResults = null;
            _oLastUpdatedDcResult = null;
            oShift = null;
        }
    }

    this.SetShiftValueOnEdit = function (DCId) {
        try {
            OneViewConsole.Debug("SetShiftValueOnEdit start", "DataCaptureBO.SetShiftValueOnEdit");
            OneViewConsole.DataLog("DCId : " + DCId, "DataCaptureBO.SetShiftValueOnEdit");

            var _oDcResults = oDataCaptureDAO.GetDcResults_DAO(DCId);
            var _oLastUpdatedDcResult = GetLastUpdatedShift(_oDcResults);
           
            if (_oLastUpdatedDcResult.ShiftId != 0 && _oLastUpdatedDcResult.ShiftId != "") {
                oScope.chkShift.id = _oLastUpdatedDcResult.ShiftId;
                oScope.chkShift.text = _oLastUpdatedDcResult.ShiftName;
            }
            
            OneViewConsole.Debug("SetEditValuesInControls end", "DataCaptureBO.SetShiftValueOnEdit");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetShiftValueOnEdit", Excep);
        }
        finally {
            _oDcResults = null;
            _oLastUpdatedDcResult = null;
            oShift = null;
        }
    }
    function GetLastUpdatedShift(_oDcResults) {
        try {
            OneViewConsole.Debug("GetLastUpdatedShift start", "DataCaptureBO.GetLastUpdatedShift");
            OneViewConsole.DataLog("DCResults : " + JSON.stringify(_oDcResults), "DataCaptureBO.GetLastUpdatedShift");

            var ShiftObj = _oDcResults[0];
            var _DateTime = new DateTime();
            var LastUpdatedDate = _DateTime.GetDateByString(_oDcResults[0].LastUpdatedDate);
            if (_oDcResults.length > 1) {
                for (var i = 0; i < _oDcResults.length; i++) {
                    if (LastUpdatedDate < _DateTime.GetDateByString(_oDcResults[i].LastUpdatedDate)) {
                        LastUpdatedDate = _DateTime.GetDateByString(_oDcResults[i].LastUpdatedDate);
                        ShiftObj = _oDcResults[i];
                    }
                }
            }
            OneViewConsole.Debug("GetLastUpdatedShift end", "DataCaptureBO.GetLastUpdatedShift");
            return ShiftObj;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetLastUpdatedShift", Excep);
        }
        finally {
            ShiftObj = null;
            LastUpdatedDate = null;
        }
    }


    
    function GetLastUpdatedAnswerNew(AnswerLst) {
        try {
            OneViewConsole.Debug("GetLastUpdatedAnswer start", "DataCaptureBO.GetLastUpdatedAnswer");
            OneViewConsole.DataLog("AnswerList : " + JSON.stringify(AnswerLst), "DataCaptureBO.GetLastUpdatedAnswer");
            var IndexArray=[];
            var FinalArray={};
            var AnswerObj = '';
            if (AnswerLst.length > 1) {
                for (var i = 0; i < AnswerLst.length; i++) {
                    if(IndexArray.indexOf(AnswerLst[0].Index) !=-1)
                        IndexArray.push(AnswerLst[0].Index);
                }


                for (var j = 0; j < IndexArray.length; j++) {
                    var LastUpdatedDate ='';
                    for (var i = 0; i < AnswerLst.length; i++) {
                        if(IndexArray[j]==AnswerLst[i].Index)
                        {
                            if(LastUpdatedDate !='')
                            {
                                if (LastUpdatedDate < AnswerLst[i].LastUpdatedDate) {
                                    LastUpdatedDate = AnswerLst[i].LastUpdatedDate;
                                    AnswerObj= AnswerLst[i];
                                }
                            }
                            else
                            {
                                LastUpdatedDate=AnswerLst[i].LastUpdatedDate;
                                AnswerObj= AnswerLst[i];
                            }
                        }
                        if(AnswerLst.length ==i)
                        {
                            FinalArray[j]=AnswerObj;
                        }
                    }
                }
            }
            OneViewConsole.Debug("GetLastUpdatedAnswer end", "DataCaptureBO.GetLastUpdatedAnswer");
            if(FinalArray[1] ==undefined)
                return FinalArray[0];
            else
                return FinalArray;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetLastUpdatedShift", Excep);
        }
        finally {
            AnswerObj = null;
            LastUpdatedDate = null;
        }
    }

    function GetLastUpdatedAnswer(AnswerLst) {
        try {
            OneViewConsole.Debug("GetLastUpdatedAnswer start", "DataCaptureBO.GetLastUpdatedAnswer");
            OneViewConsole.DataLog("AnswerList : " + JSON.stringify(AnswerLst), "DataCaptureBO.GetLastUpdatedAnswer");
           // alert('AnswerLst :' + JSON.stringify(AnswerLst));
            var AnswerObj = AnswerLst[0];
          //  var LastUpdatedDate = AnswerLst[0].LastUpdatedDate;
            var _DateTime = new DateTime();
            var LastUpdatedDate = _DateTime.GetDateByString(AnswerLst[0].LastUpdatedDate);
            
            if (AnswerLst.length > 1) {
                for (var i = 0; i < AnswerLst.length; i++) {
                    if (LastUpdatedDate < _DateTime.GetDateByString(AnswerLst[i].LastUpdatedDate)) {
                        LastUpdatedDate = _DateTime.GetDateByString(AnswerLst[i].LastUpdatedDate);
                        AnswerObj = AnswerLst[i];
                    }
                }
            }
            OneViewConsole.Debug("GetLastUpdatedAnswer end", "DataCaptureBO.GetLastUpdatedAnswer");
            return AnswerObj;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetLastUpdatedShift", Excep);
        }
        finally {
            AnswerObj = null;
            LastUpdatedDate = null;
        }
    }

    function GetDCByDCId(DCId) {
        try {
            OneViewConsole.Debug("GetDCByDCId start", "DataCaptureBO.GetDCByDCId");
            OneViewConsole.DataLog("DCId : " + DCId, "DataCaptureBO.GetDCByDCId");

            var result = oDataCaptureDAO.GetDCResultDetailsByDCId_DAO(DCId);

            if (result.length > 0) {
                MyInstance.CurrentDcClientGuid = result[0].DataCaptureClientGuid;                
            }

            if (result.length != 0) {
                var DataCaptureId = result[0].DataCaptureId;
                var DCAnswerInfo = { 'DataCaptureId': DataCaptureId, 'AttributeAnswers': {} };
                var i = 0;
                var totalLength = result.length;
                var AttributeNodeId = result[i].AttributeNodeId;
                var FormatedAttributeAnswerDetails = [];

                //Iterate the wrt Node
                while (true) {
                    if (result[i] != undefined && AttributeNodeId == result[i].AttributeNodeId) {

                        var FormatedControlAnswerDetails = [];
                        
                        //{2(ControlId): [ { 'SystemUserId': 1, 'Answer': '1', 'AnswerValue': 'Chicken', 'LastUpdatedDate': '10/5/2012' },{ 'SystemUserId': 2, 'Answer': '2', 'AnswerValue': 'Chicken65', 'LastUpdatedDate': '11/5/2012' } ] }
                        var ControlId = result[i].ControlId;
                        while (true) {
                            if (result[i] != undefined && AttributeNodeId == result[i].AttributeNodeId && ControlId == result[i].ControlId) {
                                var anwerArray = result[i];
                                var AnwerDetails = { 'SystemUserId': anwerArray.SystemUserId, 'Answer': anwerArray.Answer, 'AnswerValue': anwerArray.AnswerValue, 'LastUpdatedDate': anwerArray.LastUpdatedDate, 'AttributeNodeId': AttributeNodeId, 'ControlId': ControlId, "DcResultDetailsId": anwerArray.DcResultDetailsId, "DcResultDetailsClientGuid": anwerArray.DcResultDetailsClientGuid, "IndexId": anwerArray.IndexId }
                                FormatedControlAnswerDetails.push(AnwerDetails);
                                i = i + 1;
                            }
                            else {
                                FormatedAttributeAnswerDetails[ControlId] = FormatedControlAnswerDetails;
                                break;
                            }
                        }
                    }
                    else {
                        DCAnswerInfo.AttributeAnswers[AttributeNodeId] = FormatedAttributeAnswerDetails;
                        FormatedAttributeAnswerDetails = [];
                        if (i < totalLength)
                            AttributeNodeId = result[i].AttributeNodeId;
                        else {
                            break;
                        }
                    }
                }
            }
            OneViewConsole.Debug("GetDCByDCId end", "DataCaptureBO.GetDCByDCId");
            return DCAnswerInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCByDCId", Excep);
        }
        finally {
            result = null;
            DataCaptureId = null;
            DCAnswerInfo = null;
            i = null;
            totalLength = null;
            AttributeNodeId = null;
            FormatedAttributeAnswerDetails = null;
            FormatedControlAnswerDetails = null;
            ControlId = null;
            anwerArray = null;
            AnwerDetails = null;
        }
    }
    //############## Load Edit Page  End ################



    this.ReCheckDCNCMapping = function () {
        try {
            OneViewConsole.Debug("ReCheckDCNCMapping start", "DataCaptureBO.ReCheckDCNCMapping");
          
            for (var itrAttrId in TemplateNodes) {
               // alert('itrAttrId ' + itrAttrId);
                MyInstance.EvaluateActionNCStatus(itrAttrId, true);
            }

            OneViewConsole.Debug("ReCheckDCNCMapping end", "DataCaptureBO.ReCheckDCNCMapping");
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ReCheckDCNCMapping", Excep);
        }
    }


    //############## New DC  Start ################
    this.SaveDC = function (IsSubmit, IsAutoSubmit, ScoreDetails, ReqDetails) {
        var _oOneViewSqlitePlugin = new OneViewSqlitePlugin();
        try
        {
            OneViewConsole.Debug("SaveDC start", "DataCaptureBO.SaveDC");

            try
            {              
                //if (MyInstance.BeforeSaveDCEventHandler != undefined)
                //  MyInstance.BeforeSaveDCEventHandler(this);

                var IsSuccess = false;
              
                //create action
                if (AttributeWiseActionDict != undefined)
                    BeforeSaveDC_CreateAction();

                _oDataCaptureEntity = MyInstance.GetCompleteDataCaptureEntity(oScope, oTemplateNodes,ScoreDetails);
                this.CurrentDcClientGuid = _oDataCaptureEntity.ClientGuid;
             
                var DcResultDetailsHistoryList = MyInstance.GetDcResultDetailsHistory(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, "");

                var OperationName = (IsSubmit != undefined && IsSubmit == true) ? 'Submit' : 'Save';
               
               // alert(JSON.stringify(_oDataCaptureEntity));
                var AryDcResultDetails = _oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList;
                
                var IsAutoSave = false;
                if (ReqDetails != undefined) {
                    IsAutoSave = ReqDetails.IsAutoSave;
                }

                var oDefaultValidationResponse = null;
                if (MyInstance.SaveDCValidatorConfigList != null && MyInstance.SaveDCValidatorConfigList.length > 0) {
                    var parm = { DataCaptureEntity: AryDcResultDetails, scope: oScope, toaster: oToaster, xlatService: oxlatService, ClientValidatorConfigList: MyInstance.SaveDCValidatorConfigList, Operation: OperationName, 'IsEnableMandatoryStyle': MyInstance.IsEnableMandatoryStyle, 'IsPageLoad': false, 'PageLoadMandatoryOperation': MyInstance.PageLoadMandatoryOperation, 'IsAutoSave': IsAutoSave };
                    var _oVallidationHandler = new VallidationHandler();
                    oDefaultValidationResponse = _oVallidationHandler.Validate(parm);
                    oDefaultValidationResponse = oDefaultValidationResponse.IsSuccess;
                }
                else
                {
                    oDefaultValidationResponse = true;
                }
                
                // If vallidation success
                if (oDefaultValidationResponse != null && oDefaultValidationResponse == true) {

                    if (CustomValidations(IsSubmit,IsAutoSubmit)) {
                        if (ValidateNCAndComments()) {

                            //EKFC 
                            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                                if (TemplateId != 535 && TemplateId != 8272) {
                                    // alert('in' + TemplateId);
                                    MyInstance.ReCheckDCNCMapping();
                                }
                            }
                            //EKFC 
                           else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                               if (TemplateId != 8272 && TemplateId != 12208) {
                                    // alert('in' + TemplateId);
                                    MyInstance.ReCheckDCNCMapping();
                                }
                            }
                            _oOneViewSqlitePlugin.StartTransaction();

                            // Need to remove
                            SaveObservation(AryDcResultDetails);

                            var oDCResultsEntity = _oDataCaptureEntity.DcResultsEntitylist[0];
                            //alert('oDCResultsEntity : ' + JSON.stringify(oDCResultsEntity));
                            MyInstance.CreateDynamicElements(oDCResultsEntity.DcResultDetailsEntityList);
                            //alert('after dynamic');

                          //  alert(IsAutoSubmit);

                            if (IsAutoSubmit == undefined || IsAutoSubmit == true) {
                                _oDataCaptureEntity.IsCompleted = SetIsCompletedStatus(_oDataCaptureEntity);
                            }
                            else {
                                if (_oDataCaptureEntity.IsCompleted != true) {
                                    _oDataCaptureEntity.IsCompleted = false;
                                }
                            }

                          //  alert("_oDataCaptureEntity.IsCompleted:"+_oDataCaptureEntity.IsCompleted);
                      
                            SetNCStatus(_oDataCaptureEntity);

                            oDataCaptureDAO.Create(_oDataCaptureEntity);
                            var _oDcResultDetailsHistoryDAO = new DcResultDetailsHistoryDAO();
                            _oDcResultDetailsHistoryDAO.Create(DcResultDetailsHistoryList);

                            SaveNCMapping(_oDataCaptureEntity);

                            //Action insert code
                            var Res = MyInstance.InsertCustomActionInDb(_oDataCaptureEntity);

                            var _oDcPendingTaskBO = new DcPendingTaskBO();
                            _oDcPendingTaskBO.UpdateStatus(true, _oDataCaptureEntity.IsCompleted);

                            var _oDasboardBO = new DasboardBO(oScope, '', oxlatService, '', '', '', '');
                            _oDasboardBO.UpdateTaskStatus_NewDC(_oDataCaptureEntity.IsCompleted);

                            OneViewSessionStorage.Save("IsDcCompletedBeforeEdit", _oDataCaptureEntity.IsCompleted);                            
                            OneViewSessionStorage.Save("IsDcSynchronizedBeforeEdit", 'false');

                            CreateMultiMediaSubElements(_oDataCaptureEntity.Id);
                            if (MyInstance.ActionManualFollowUpInfoHandler != null){
                                MyInstance.ActionManualFollowUpInfoHandler();
                            }

                            MyInstance.ClearControls(scope, oTemplateNodes);
                            MyInstance.RefreshDDL(scope, oTemplateNodes, _oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList);
                            MyInstance.setDefaultValue();
                            AttributeWiseActionDict = {};
                            NCListForDelete = [];
                            MyInstance.MultiMediaSubElementsList = [];


                            OneViewConsole.Debug("SaveDC end", "DataCaptureBO.SaveDC");

                            // NC custom (Need to remove)
                            CommentsResult = {};
                            ObservationResult = {};
                            MyInstance.DCNCMappingList = [];
                            MyInstance.FormActionCount = 0;
                            CPActionResult = {};
                            CPTemplateResult = {};

                            //Todo :: (Sangeeta Bhatt : 06-10-2017) : Need to remove , temporarily kept for hiding two saved messages
                            if (OneViewSessionStorage.Get("ServiceId") == 23) {
                                if (OneViewSessionStorage.Get("TemplateId") != 3) {
                                    navigator.notification.alert(xlatService.xlat('SavedSuccessfully'), ['OK'], "");
                                }
                            }
                            else {
                                if (ReqDetails != undefined && ReqDetails.IsAutoSave == true) {
                                    //No alert
                                }
                                else {
                                    navigator.notification.alert(xlatService.xlat('SavedSuccessfully'), ['OK'], "");
                                }
                            }
                            // oToaster.pop('success', xlatService.xlat('Title_Success'), xlatService.xlat('SavedSuccessfully'));

                            _oOneViewSqlitePlugin.EndTransaction();

                            //var _oOneViewAutoUploadPlugin = new OneViewAutoUploadPlugin();
                            //_oOneViewAutoUploadPlugin.Start();

                            IsSuccess = true;
                        }
                    }
                }

                return IsSuccess;
            }
            catch (Excep) {
                //alert('DataCaptureBO.SaveDC' + Excep);
               //alert('DataCaptureBO.SaveDC' + JSON.stringify(Excep));
                OneViewConsole.Error("Error :" + Excep, "DataCaptureBO.SaveDC");
                _oOneViewSqlitePlugin.Rollback();
                return false;
            }
            finally {
                _oOneViewSqlitePlugin = null;
                AryDcResultDetails = null;
                oDefaultValidationResponse = null;
                parm = null;
                _oVallidationHandler = null;
                oDCResultsEntity = null;
            }
        }
       
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SaveDC", Excep);
        }
    }

    this.DCImageCaptureAnswerModeSaveEventHandler = function (AttributeNodeId, ControlId, SelectionType) {

        try {

            var _oOneViewCordovaCameraPlugin = new OneViewCordovaCameraPlugin();
            _oOneViewCordovaCameraPlugin.CaptureImage(function (_ImageURL) {

                if (SelectionType == 0) {

                    DCImageCaptureAnswerModeUpdateEventHandler(AttributeNodeId, ControlId, SelectionType);

                    var MultiMediaElement = {
                        "Id": 0,
                        "ServerId": 0,
                        "MappedEntityClientGuid": "",
                        "Dimension": DATEntityType.DCResultDetails,
                        "MultiMediaType": "image/jpg",
                        "LocalURL": _ImageURL,
                        "AlternateName": "No Image",
                        "Comments": "",
                        "IsDisabled": false,
                        "AttributeNodeId": AttributeNodeId,
                        "ControlId": ControlId
                    };

                    MyInstance.MultiMediaSubElementsList.push(MultiMediaElement);
                    oScope[ControlId + "_ImageInfo"] = [];
                    oScope[ControlId + "_ImageInfo"].push({ URL: _ImageURL, rel: Math.random(), "ControlId": ControlId });
                    oScope.NewDCModel[ControlId] = xlatService.xlat("Last updated on ") + new DateTime().GetDateAndTime();
                    oScope.$apply();
                }
                else {
                    //alert("Not implemented exception DCImageCaptureControlConfig multi selection, SelectionType = " + SelectionType + ", DataCaptureBO.DCImageCaptureAnswerModeEventHandler");

                    if (oScope[ControlId + "_ImageInfo"] == "") {
                        oScope[ControlId + "_ImageInfo"] = [];
                    }

                    var MultiMediaElement = {
                        "Id": 0,
                        "ServerId": 0,
                        "MappedEntityClientGuid": "",
                        "Dimension": DATEntityType.DCResultDetails,
                        "MultiMediaType": "image/jpg",
                        "LocalURL": _ImageURL,
                        "AlternateName": "No Image",
                        "Comments": "",
                        "IsDisabled": false,
                        "AttributeNodeId": AttributeNodeId,
                        "ControlId": ControlId
                    };

                    MyInstance.MultiMediaSubElementsList.push(MultiMediaElement);
                    
                    oScope[ControlId + "_ImageInfo"].push({ URL: _ImageURL, rel: Math.random(), "ControlId": ControlId });
                    oScope.NewDCModel[ControlId] = xlatService.xlat("Last updated on ") + new DateTime().GetDateAndTime();
                    oScope.$apply();
                }
            });           
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.DCImageCaptureAnswerModeEventHandler", xlatService);
        }
    }

    this.DCImageCaptureAnswerModeDeleteEventHandler = function (AttributeNodeId, ControlId, SelectionType) {

        try {
            if (SelectionType == 0) {

                if (oScope.NewDCModel[ControlId] != "") {

                    var oOneViewCordovaPlugin = new OneViewCordovaPlugin();
                    oOneViewCordovaPlugin.DefaultConfirmBox("Confirmation", "Are you sure you want to delete ?", function (ConfirmationId) {

                        if (ConfirmationId == '2') {

                            DCImageCaptureAnswerModeUpdateEventHandler(AttributeNodeId, ControlId, SelectionType);

                            oScope[ControlId + "_ImageInfo"] = [];
                            oScope.NewDCModel[ControlId] = "";
                            oScope.$apply();
                        }
                    });
                }               
            }
            else {
                //alert("Not implemented exception DCImageCaptureControlConfig multi selection, SelectionType = " + SelectionType + ", DataCaptureBO.DCImageCaptureAnswerModeDeleteEventHandler");

                if (oScope.NewDCModel[ControlId] != "") {

                    var oOneViewCordovaPlugin = new OneViewCordovaPlugin();
                    oOneViewCordovaPlugin.DefaultConfirmBox("Confirmation", "Are you sure you want to delete ?", function (ConfirmationId) {

                        if (ConfirmationId == '2') {

                            DCImageCaptureAnswerModeUpdateEventHandler(AttributeNodeId, ControlId, SelectionType);

                            oScope[ControlId + "_ImageInfo"] = [];
                            oScope.NewDCModel[ControlId] = "";
                            oScope.$apply();
                        }
                    });
                }
            }
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.DCImageCaptureAnswerModeDeleteEventHandler", xlatService);
        }
    }

    this.MultiMediaDeleteEventHandler = function (ControlId, LocalURL) {

        try {           
            for (var i = 0; i < MyInstance.MultiMediaSubElementsList.length; i++) {
                
                if (MyInstance.MultiMediaSubElementsList[i].ControlId == ControlId && MyInstance.MultiMediaSubElementsList[i].LocalURL == LocalURL) {

                    var ImagePath = MyInstance.MultiMediaSubElementsList[i].LocalURL.split("/");
                    oOneViewAppInfoPlugin.ClearCacheFilesByName(ImagePath[ImagePath.length - 1]);

                    if (MyInstance.MultiMediaSubElementsList[i].Id == 0) {
                        MyInstance.MultiMediaSubElementsList.splice(i, 1);
                        break;
                    }
                    else {
                        MyInstance.MultiMediaSubElementsList[i].IsDisabled = true;
                        break;
                    }
                }
            }
            
            for (var i = 0; i < oScope[ControlId + "_ImageInfo"].length; i++) {

                if (oScope[ControlId + "_ImageInfo"][i].ControlId == ControlId && oScope[ControlId + "_ImageInfo"][i].URL == LocalURL) {

                    oScope[ControlId + "_ImageInfo"].splice(i, 1);
                    break;
                }
            }

            if (oScope[ControlId + "_ImageInfo"] != "" && oScope[ControlId + "_ImageInfo"].length == 0) {
                oScope.NewDCModel[ControlId] = "";
            }

            oScope.$apply();
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.MultiMediaDeleteEventHandler", xlatService);
        }
    }

    var DCImageCaptureAnswerModeUpdateEventHandler = function (AttributeNodeId, ControlId, SelectionType) {

        try {
            if (SelectionType == 0) {
                for (var i = 0; i < MyInstance.MultiMediaSubElementsList.length; i++) {

                    if (MyInstance.MultiMediaSubElementsList[i].AttributeNodeId == AttributeNodeId && MyInstance.MultiMediaSubElementsList[i].ControlId == ControlId) {

                        var ImagePath = oScope[ControlId + "_ImageInfo"][0].URL.split("/");
                        oOneViewAppInfoPlugin.ClearCacheFilesByName(ImagePath[ImagePath.length - 1]);

                        if (MyInstance.MultiMediaSubElementsList[i].Id == 0) {
                            MyInstance.MultiMediaSubElementsList.splice(i, 1);
                            break;
                        }
                        else {
                            MyInstance.MultiMediaSubElementsList[i].IsDisabled = true;
                            break;
                        }
                    }
                }
            }
            else {                
                for (var i = 0; i < MyInstance.MultiMediaSubElementsList.length; i++) {

                    if (MyInstance.MultiMediaSubElementsList[i].AttributeNodeId == AttributeNodeId && MyInstance.MultiMediaSubElementsList[i].ControlId == ControlId) {

                        var ImagePath = MyInstance.MultiMediaSubElementsList[i].LocalURL.split("/");
                        oOneViewAppInfoPlugin.ClearCacheFilesByName(ImagePath[ImagePath.length - 1]);

                        if (MyInstance.MultiMediaSubElementsList[i].Id == 0) {
                            MyInstance.MultiMediaSubElementsList.splice(i, 1);
                            i--;                            
                        }
                        else {
                            MyInstance.MultiMediaSubElementsList[i].IsDisabled = true;                           
                        }
                    }
                }
            }
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.DCImageCaptureAnswerModeUpdateEventHandler", xlatService);
        }
    }

    var CreateMultiMediaSubElements = function (DataCaptureId) {

        try {
            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            for (var i = 0; i < MyInstance.MultiMediaSubElementsList.length; i++) {

                if (MyInstance.MultiMediaSubElementsList[i].Dimension == DATEntityType.DCNCMapping) {

                    if (MyInstance.MultiMediaSubElementsList[i].RuleId != undefined && MyInstance.MultiMediaSubElementsList[i].RuleId != "") {

                        var Query = "Select ClientGuid From DCNCMapping Where NCRuleId = " + MyInstance.MultiMediaSubElementsList[i].RuleId + " And DataCaptureClientGuid = '" + MyInstance.CurrentDcClientGuid + "'";
                        var Result = window.OneViewSqlite.excecuteSqlReader(Query);
                        Result = JSON.parse(Result);

                        if (Result.length > 0) {
                            MyInstance.MultiMediaSubElementsList[i].MappedEntityClientGuid = Result[0].ClientGuid;
                        }
                    }
                }
                else if (MyInstance.MultiMediaSubElementsList[i].Dimension == DATEntityType.DCResultDetails) {

                    var Query = "Select ClientGuid From DcResultDetailsEntity Where AttributeNodeId = '" + MyInstance.MultiMediaSubElementsList[i].AttributeNodeId + "' And ControlId = '" + MyInstance.MultiMediaSubElementsList[i].ControlId + "' And DataCaptureId = " + DataCaptureId;
                    var Result = window.OneViewSqlite.excecuteSqlReader(Query);
                    Result = JSON.parse(Result);

                    if (Result.length > 0) {
                        MyInstance.MultiMediaSubElementsList[i].MappedEntityClientGuid = Result[0].ClientGuid;
                    }
                }
                else if (DcId == null) {
                    MyInstance.MultiMediaSubElementsList[i].MappedEntityClientGuid = MyInstance.CurrentDcClientGuid;
                }
                
                if (MyInstance.MultiMediaSubElementsList[i].Id == 0 && (MyInstance.MultiMediaSubElementsList[i].IsDisabled == false || MyInstance.MultiMediaSubElementsList[i].IsDisabled == 'false')) {

                    var _oMultiMediaSubElements = new MultiMediaSubElements();

                    _oMultiMediaSubElements.ClientGuid = OneViewUniqueGenerator.GetGuid();
                    _oMultiMediaSubElements.MobileVersionId = 1;
                    _oMultiMediaSubElements.ServiceId = OneViewSessionStorage.Get("ServiceId");

                    _oMultiMediaSubElements.MappedEntityClientGuid = MyInstance.MultiMediaSubElementsList[i].MappedEntityClientGuid;
                    _oMultiMediaSubElements.Dimension = MyInstance.MultiMediaSubElementsList[i].Dimension;
                    _oMultiMediaSubElements.MultiMediaType = MyInstance.MultiMediaSubElementsList[i].MultiMediaType;
                    _oMultiMediaSubElements.LocalURL = MyInstance.MultiMediaSubElementsList[i].LocalURL;

                    _oMultiMediaSubElements.Comments = MyInstance.MultiMediaSubElementsList[i].Comments;
                    _oMultiMediaSubElements.CreatedDate = CurrenntDateAndTime;
                    _oMultiMediaSubElements.TimeStamp = CurrenntDateAndTime;
                    _oMultiMediaSubElements.IsSynchronized = "false";
                    _oMultiMediaSubElements.IsMultiMediaSynchronized = "false";
                    _oMultiMediaSubElements.IsDisabled = MyInstance.MultiMediaSubElementsList[i].IsDisabled;

                    var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("MultiMediaSubElements");
                    _oDcResultDetailsEntityDAO.CreateMaster(_oMultiMediaSubElements);
                }
                else if (MyInstance.MultiMediaSubElementsList[i].Id != 0 && (MyInstance.MultiMediaSubElementsList[i].IsDisabled == true || MyInstance.MultiMediaSubElementsList[i].IsDisabled == 'true')) {

                    if (MyInstance.MultiMediaSubElementsList[i].ServerId != 0) {

                        var UpdateQuery = "UPDATE MultiMediaSubElements SET TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false',IsDisabled='true' WHERE Id = " + MyInstance.MultiMediaSubElementsList[i].Id;
                        window.OneViewSqlite.excecuteSql(UpdateQuery);
                    }
                    else {                    
                        var DeleteQuery = "DELETE FROM MultiMediaSubElements WHERE Id = " + MyInstance.MultiMediaSubElementsList[i].Id;                        
                        window.OneViewSqlite.excecuteSql(DeleteQuery);
                    }
                }
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateMultiMediaSubElements", Excep);
        }
    }

    var CustomValidations = function (IsSubmit,IsAutoSubmit) {

        try {
            var IsSuccess = true;
          
            if (IsAutoSubmit == undefined || IsAutoSubmit == true) {
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                if (IsSubmit != undefined && IsSubmit == true) {
                    if (TemplateId == 44) { IsSuccess = MyInstance.GoodReceivingMandatoryValidation(undefined, true) }
                    else if (TemplateId == 591) { IsSuccess = CurrentStockofLaboratoryMediaVallidation() }
                        //   else if (TemplateId == 575) { IsSuccess = MasterListofMLECalibrationandMaintenanceStatusVallidation() }
                    else if (TemplateId == 738) { IsSuccess = YearlyVerificationforProbeThermometerValidation(undefined, true) }
                        // else if (TemplateId == 442) { IsSuccess = ChillerFreezerCheckingVallidation(true) }
                    else if (TemplateId == 3115) { IsSuccess = AirlineComplaintSampleVallidation(true) }
                    else if (TemplateId == 8272) { IsSuccess = DispatchingTemperatureVallidation(undefined, true) }
                    else if (TemplateId == 711) { IsSuccess = TempMonitoringReportofLabEquipmentVallidation(undefined, true) }
                    else if (TemplateId == 609) { IsSuccess = LaminarAirFlowMonitoringValidation(undefined, true) }
                    else if (TemplateId == 923) { IsSuccess = MonthlyVerificationofProbeThermometerValidation(undefined, true) }
                    else if (TemplateId == 937) { IsSuccess = MonthlyVerificationofIRThermometerValidation(undefined, true) }                    
                    else if (TemplateId == 12606) { IsSuccess = CustomerComplaintMonitoringFormVallidation(undefined, true) }


                }


                if (TemplateId == 535) { IsSuccess = PotTrolleyDishwashVallidation() }
              

                // else   if (TemplateId == 44) { IsSuccess = GoodsReceivingVallidation() }

                if (IsSubmit != undefined && IsSubmit == true) {
                    if (TemplateId == 2) { IsSuccess = MyInstance.CookingAndBlastChillingEKFC1Validation(undefined, true); };//cooking bc monito
                    if (TemplateId == 3) { IsSuccess = MyInstance.CookingAndBlastChillingEKFC1Validation(undefined, true); };//cooking bc varific
                    //if (TemplateId == 1529) { IsSuccess = MyInstance.SampleSheetAndWaterAnalysisValidation(undefined, true); };//water analysis
                    //if (TemplateId == 1655) { IsSuccess = MyInstance.SampleSheetAndIceAnalysisValidation(undefined, true); };//Ice analysis
                    if (TemplateId == 1529) { IsSuccess = MyInstance.WaterAnalysisValidation(undefined, true); };//water analysis
                    if (TemplateId == 1655) { IsSuccess = MyInstance.IceAnalysisValidation(undefined, true); };//Ice analysis
                    //if (TemplateId == 1778) { IsSuccess = MyInstance.SampleSheetAndAirAnalysisValidation(undefined, true); };//Air analysis   
                    if (TemplateId == 575) { IsSuccess = MyInstance.MicrobiologyLaboratoryEquipmentCalibration(undefined, true) }
                }
            }
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                if (IsSubmit != undefined && IsSubmit == true) {
                    if (TemplateId == 8272) { IsSuccess = DispatchingTemperatureVallidation(undefined, true) }
                    if (TemplateId == 12208) { IsSuccess = NewDispatchingTemperatureVallidation(undefined, true) }
                }
            }
                //else if (OneViewSessionStorage.Get("ServiceName") == "CMFT") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                IsSuccess = CustomValidationForCMFT(IsSubmit);
            }
                //else if (OneViewSessionStorage.Get("ServiceName") == "TCFMService") {
            else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) {
                IsSuccess = CustomValidationForTCFM(IsSubmit);
            }
            }
            return IsSuccess;

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CustomVallidatins", Excep);
        }
    }

    var CustomValidationForCMFT = function (IsSubmit) {
        try {
            var IsSuccess = true;

            if (IsSubmit != undefined && IsSubmit == true) {
               // if (TemplateId == 3 ) { IsSuccess = PreAcceptanceQuestionnaireValidation(undefined, true); };
                if (TemplateId == 91) { IsSuccess = PreAcceptanceCompositionAnalysisValidation(undefined, true); };
                //if (TemplateId == 207) { IsSuccess = PreAcceptanceLocalWasteStorageValidation(undefined, true); };
                if (TemplateId == 743) { IsSuccess = SingleDepartmentQuestionnaireValidation(undefined, true); };
                if (TemplateId == 830) { IsSuccess = SingleDepartmentCompositionAnalysisValidation(undefined, true); };
                if (TemplateId == 946) { IsSuccess = SingleDepartmentLocalWasteStorageValidation(undefined, true); };
                if (TemplateId == 1462) { IsSuccess = IncidentInvestigationElementsQuestionnaireValidation(undefined, true); };
                if (TemplateId == 1554) { IsSuccess = IncidentInvestigationElementsLocalWasteStorageValidation(undefined, true); };
                if (TemplateId == 2070) { IsSuccess = LWSEQuestionnaireValidation(undefined, true); };
                if (TemplateId == 2671) { IsSuccess = SWSPAEQuestionnaireValidation(undefined, true); };
                if (TemplateId == 2155) { IsSuccess = LWSELocalWasteStorageValidation(undefined, true); };
                if (TemplateId == 2756) { IsSuccess = SingleWasteLocalWasteStorageValidation(undefined, true); };
               // if (TemplateId == 3271) { IsSuccess = PreAcceptanceCompositionAnalysisValidationNew(undefined, true); };
                if (TemplateId == 4250) { IsSuccess = BulkWasteElementValidation(undefined, true); };
                
            }
            
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CustomValidationForCMFT", Excep);
        }
    }

    var CustomValidationForTCFM = function (IsSubmit) {
        try {
            var IsSuccess = true;

            if (IsSubmit != undefined && IsSubmit == true) {
                if (TemplateId == 3) { IsSuccess = TescoTraningValidation(undefined, true); };
                if (TemplateId == 160) { IsSuccess = TravisPerkinsTraningModuleValidation(undefined, true); };
             

            }

            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CustomValidationForCMFT", Excep);
        }
    }

    var SignatureSaveVallidation = function () {
        try {
            var IsSuccess = true;
            var SignatureMsg = 'Please provide signature again in';
            if (MyInstance.NCTemplateId != undefined) {

                var NcTemplateNodes;
                if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    NcTemplateNodes = _oTemplateConfigDAO.GetMetaData(ServiceId, MyInstance.NCTemplateId);
                }
                else {
                    NcTemplateNodes = TemplateMetaData[ServiceId][MyInstance.NCTemplateId];
                }
				//new
               // var NcTemplateNodes = new CustomPageTemplateNodeFormatterComponent().FormatTemplateNode(TemplateMetaData_NCForm);

                //alert(MyInstance.NCTemplateId +'NcTemplateNodes : ' + JSON.stringify(NcTemplateNodes));

                for (var itrAttrId in NcTemplateNodes) {
                    var _oAttributeInfo = NcTemplateNodes[itrAttrId];
                    // alert('_oAttributeInfo : ' + JSON.stringify(_oAttributeInfo));
                    for (var _oPrimarayAnswerModeInfo in _oAttributeInfo.AnswerMode) {
                        if (typeof (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]) != 'function') {
                            if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'SignaturePad') {
                                if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "DATAURL" && oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsModified"] == true) {
                                    var signaturePad = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_SignaturePad"];
                                    var SignatureString = (signaturePad.toDataURL()).split(',');

                                    if (signaturePad.isEmpty() == false) {
                                        var SignatureString = (signaturePad.toDataURL()).split(',');
                                        //alert('SignatureString[1] here : ' + SignatureString[1]);
                                        if (SignatureString[1] == undefined || SignatureString[1] == null || SignatureString[1] == '') {
                                            IsSuccess = false;
                                            if (SignatureMsg == 'Please provide signature again in') {
                                                SignatureMsg = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SignatureVallidationMsg;
                                               // alert('1' + _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SignatureVallidationMsg);
                                            }
                                            else {
                                                SignatureMsg = ' and' + _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SignatureVallidationMsg;

                                               // alert('2' + _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SignatureVallidationMsg);
                                            }

                                            // alert('Please provide signature again')
                                        }
                                    }

                                }
                            }
                        }
                    }

                }
            }
         //   alert('Notification :: ' + MyInstance.SignatureMsg);
           // alert('IsSuccess :' + IsSuccess);
            return IsSuccess;
        }
        catch (Excep) {
            //alert("DataCaptureBO.SignatureSaveVallidation Excep 1" + Excep);
            //alert("DataCaptureBO.SignatureSaveVallidation Excep 2" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SignatureSaveVallidation", Excep);
        }
    }

    var CheckTemperatureVallidation = function () {

        try {
            var CookingTemp = (oScope.NewDCModel["txtCoreTempControlId"] != undefined) ? oScope.NewDCModel["txtCoreTempControlId"] : "";
            var PreTempIn = (oScope.NewDCModel["ATPreChillerTempInControlId"] != undefined) ? oScope.NewDCModel["ATPreChillerTempInControlId"] : "";
            var PreTempOut = (oScope.NewDCModel["ATPreChillerTempOutControlId"] != undefined) ? oScope.NewDCModel["ATPreChillerTempOutControlId"] : "";
            var BcTempIn = (oScope.NewDCModel["ATBlastChillerTempInControlId"] != undefined) ? oScope.NewDCModel["ATBlastChillerTempInControlId"] : "";
            var BcTempOut = (oScope.NewDCModel["ATBlastChillerTempOutControlId"] != undefined) ? oScope.NewDCModel["ATBlastChillerTempOutControlId"] : "";

            //alert("CookingTemp :" + CookingTemp + " ,PreTempIn : " + PreTempIn + ", PreTempOut : " + PreTempOut + ", BcTempIn : " + BcTempIn + ", BcTempOut : " + BcTempOut);

            var IsSuccess = true;

            //if (CookingTemp == "" && (PreTempIn != "" || PreTempOut != "" || BcTempIn != "" || BcTempOut != "")) {
            //    alert(xlatService.xlat('Title_Notification') + ': Please enter Cooking Temp');
            //    IsSuccess = false;
            //}
            //else if (CookingTemp != "" && PreTempIn == "" && PreTempOut != "") {
            //    alert(xlatService.xlat('Title_Notification') + ': Please enter Pre-chiller Temp In');
            //    IsSuccess = false;
            //}
            //else if (CookingTemp != "" && BcTempIn == "" && BcTempOut != "") {
            //    alert(xlatService.xlat('Title_Notification') + ': Please enter Blast Chiller Temp In');
            //    IsSuccess = false;
            //}
            if (CookingTemp != "" && PreTempIn != "" && CookingTemp < PreTempIn) {
                navigator.notification.alert(xlatService.xlat('CookingTempPreTempInMsg'), ['OK'], "");
                IsSuccess = false;
            }
            else if (CookingTemp != "" && BcTempIn != "" && CookingTemp < BcTempIn) {
                navigator.notification.alert(xlatService.xlat('CookingTempBTempInMsg'), ['OK'], "");
                IsSuccess = false;
            }
            else if (BcTempOut != "" && PreTempIn != "" && BcTempOut > PreTempIn) {
                navigator.notification.alert(xlatService.xlat('PreTempInBTempOutMsg'), ['OK'], "");
                IsSuccess = false;
            }
            else if (PreTempIn != "" && PreTempOut != "" && PreTempOut > PreTempIn) {
                navigator.notification.alert(xlatService.xlat('PreTempInPreTempOutMsg'), ['OK'], "");
                IsSuccess = false;
            }
            else if (BcTempIn != "" && BcTempOut != "" && BcTempOut > BcTempIn) {
                navigator.notification.alert(xlatService.xlat('BTempInBTempOutMsg'), ['OK'], "");
                IsSuccess = false;
            }           
            
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckTemperatureVallidation", Excep);
        }
    }

    var GoodsReceivingVallidationOLD = function () {

        try {          
            var GoodsType = oScope["chkGoodsType"].GetSelectedValue();
            var FrozenState = oScope["chkFrozenType"].GetSelectedValue();
            var DMVechicleTag = oScope["chkVehicleApprovalTag"].GetSelectedValue();
            var ProductStatus = oScope["chkProductStatus"].GetSelectedValue();
            var ApprovalTag = oScope.NewDCModel["txtApprovalTagNo"];
            var SNCNo = oScope.NewDCModel["txtSNCNo"];

            var IsSuccess = true;

            //alert("GoodsType : " + GoodsType + ", FrozenState : " + FrozenState + ", DMVechicleTag : " + DMVechicleTag + ", ProductStatus : " + ProductStatus + ", ApprovalTag : " + ApprovalTag + ", SNCNo : " + SNCNo);

            if (GoodsType == 4 && DMVechicleTag == 1 && ProductStatus == 22) {
                if (FrozenState == '' && ApprovalTag == '' && SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-004 :: Please select Frozen State, Approval Tag No and SNC No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (FrozenState == '' && ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-005 :: Please select Frozen State and Approval Tag No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (FrozenState == '' && SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-006 :: Please select Frozen State and SNC No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (ApprovalTag == '' && SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-007 :: Please select Approval Tag No and SNC No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (FrozenState == '') {
                    navigator.notification.alert("MN-RQ-GRV-008 :: Please select Frozen State", ['OK'], "");
                    IsSuccess = false;
                }
                else if (ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-009 :: Please select Approval Tag No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-010 :: Please select SNC No", ['OK'], "");
                    IsSuccess = false;
                }
            }
            else if (GoodsType == 4 && DMVechicleTag == 1) {
                if (FrozenState == '' && ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-005 :: Please select Frozen State and Approval Tag No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (FrozenState == '') {
                    navigator.notification.alert("MN-RQ-GRV-008 :: Please select Frozen State", ['OK'], "");
                    IsSuccess = false;
                }
                else if (ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-009 :: Please select Approval Tag No", ['OK'], "");
                    IsSuccess = false;
                }
            }
            else if (GoodsType == 4 && ProductStatus == 22) {
                if (FrozenState == '' && SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-006 :: Please select Frozen State and SNC No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (FrozenState == '') {
                    navigator.notification.alert("MN-RQ-GRV-008 :: Please select Frozen State", ['OK'], "");
                    IsSuccess = false;
                }
                else if (SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-010 :: Please select SNC No", ['OK'], "");
                    IsSuccess = false;
                }
            }
            else if (DMVechicleTag == 1 && ProductStatus == 22) {
                if (ApprovalTag == '' && SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-007 :: Please select Approval Tag No and SNC No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-009 :: Please select Approval Tag No", ['OK'], "");
                    IsSuccess = false;
                }
                else if (SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-010 :: Please select SNC No", ['OK'], "");
                    IsSuccess = false;
                }
            }
            else if (GoodsType == 4) {
                if (FrozenState == '') {
                    navigator.notification.alert("MN-RQ-GRV-008 :: Please select Frozen State", ['OK'], "");
                    IsSuccess = false;
                }
            }
            else if (DMVechicleTag == 1) {
                if (ApprovalTag == '') {
                    navigator.notification.alert("MN-RQ-GRV-009 :: Please select Approval Tag", ['OK'], "");
					
                    IsSuccess = false;
                }
            }
            else if (ProductStatus == 22) {
                if (SNCNo == '') {
                    navigator.notification.alert("MN-RQ-GRV-010 :: Please select SNC No", ['OK'], "");
                    IsSuccess = false;
                }
            }
          
            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GoodsReceivingVallidation", Excep);
        }
    }

    var GoodsReceivingVallidation = function () {
        try {
            var GoodsType = oScope["chkGoodsType"].GetSelectedValue();
            var FrozenState = oScope["chkFrozenType"].GetSelectedValue();
            var DMVechicleTag = oScope["chkVehicleApprovalTag"].GetSelectedValue();
            var ProductStatus = oScope["chkProductStatus"].GetSelectedValue();
            var ApprovalTag = oScope.NewDCModel["txtApprovalTagNo"];
            var SNCNo = oScope.NewDCModel["txtSNCNo"];

            var ProductionDateMode = oScope["chkProductionDateMode"].GetSelectedValue();
            var PDDate = oScope.NewDCModel["DTDATEControlId"];
            var PDMonthYear = oScope.NewDCModel["PdDateMonthAndYearControlId"];
            var ExpiryDateMode = oScope["chkExpiryDateMode"].GetSelectedValue();
            var ExDate = oScope.NewDCModel["EXDATEControlId"];
            var ExUseBy = oScope.NewDCModel["EXDateUsedByMonthAndYearControlId"];
            var ExUseBefore = oScope.NewDCModel["EXUsedBeforeControlId"];

            var IsSuccess = true;

            //alert("GoodsType : " + GoodsType + ", FrozenState : " + FrozenState + ", DMVechicleTag : " + DMVechicleTag + ", ProductStatus : " + ProductStatus + ", ApprovalTag : " + ApprovalTag + ", SNCNo : " + SNCNo);

            //alert(' ProductionDateMode : ' + ProductionDateMode + " , PDDate : " + PDDate + " , PDMonthYear :" + PDMonthYear + " , ExpiryDateMode :" + ExpiryDateMode + " , ExDate :" + ExDate + " , ExUseBy :" + ExUseBy + " , ExUseBefore :" + ExUseBefore);

			navigator.notification.alert((' ProductionDateMode : ' + ProductionDateMode +  " , ExpiryDateMode :" + ExpiryDateMode  ), ['OK'], "");
			
            var msg = "MN-RQ-GRV-001 :: Please select";
            if (GoodsType == 4 && FrozenState == '') {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Frozen State";
                }
                else {
                    msg = msg + " Frozen State";
                }

                IsSuccess = false;
            }
            if (DMVechicleTag == 1 && ApprovalTag == '') {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Approval Tag No";
                }
                else {
                    msg = msg + " Approval Tag No";
                }

                IsSuccess = false;

            }
            if (ProductStatus == 22 && SNCNo == '') {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " SNC No";
                }
                else {
                    msg = msg + " SNC No";
                }

                IsSuccess = false;

            }

            if (ProductionDateMode == 55 && PDDate == "") {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Production Date";
                }
                else {
                    msg = msg + " Production Date";
                }

                IsSuccess = false;
            }

            else if (ProductionDateMode == 56 && PDMonthYear == "") {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Production Month & Year";
                }
                else {
                    msg = msg + " Production Month & Year";
                }

                IsSuccess = false;
            }

            if (ExpiryDateMode == 57 && ExDate == "") {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Expiry Date";
                }
                else {
                    msg = msg + " Expiry Date";
                }

                IsSuccess = false;
            }

            else if (ExpiryDateMode == 58 && ExUseBy == "") {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Use By";
                }
                else {
                    msg = msg + " Use By";
                }

                IsSuccess = false;
            }

            else if (ExpiryDateMode == 59 && ExUseBefore == "") {
                if (msg != "MN-RQ-GRV-001 :: Please select") {
                    msg = msg + " ," + " Use Before";
                }
                else {
                    msg = msg + " Use Before";
                }

                IsSuccess = false;
            }

            if (IsSuccess == false) {
                navigator.notification.alert(msg, ['OK'], "");
            }

            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GoodsReceivingVallidation", Excep);
        }
    }

    var CurrentStockofLaboratoryMediaVallidation = function () {

        try {         

            var oStocktype = oScope["chkStocktype"].GetSelectedValue();

            var IsSuccess = true;

            
            if (oStocktype == 72) {//GlassWare                  
                if (scope.NewDCModel.AddlGlasswareControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Glassware", ['OK'], "");
                    IsSuccess = false;
                  }
             }
            else if (oStocktype == 73) {//Media                  
                if (scope.NewDCModel.AddlParameterControlId == "" && scope.NewDCModel.AddlMediaorReagentsControlId == "" && scope.NewDCModel.AddlBrandNameControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Parameter,Media or Reagents and Brand Name", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlParameterControlId == "" && scope.NewDCModel.AddlMediaorReagentsControlId == "" && scope.NewDCModel.AddlBrandNameControlId != "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Parameter and Media or Reagents", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlParameterControlId == "" && scope.NewDCModel.AddlMediaorReagentsControlId != "" && scope.NewDCModel.AddlBrandNameControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Parameter and Brand Name", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlParameterControlId != "" && scope.NewDCModel.AddlMediaorReagentsControlId == "" && scope.NewDCModel.AddlBrandNameControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Media or Reagents and Brand Name", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlParameterControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Parameter", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlMediaorReagentsControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Media or Reagents", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.AddlBrandNameControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please select Brand Name", ['OK'], "");
                    IsSuccess = false;
                }
             }            

            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CurrentStockofLaboratoryMediaVallidation", Excep);
        }
    }

    var MasterListofMLECalibrationandMaintenanceStatusVallidation = function () {

        try {

            var oExternalCaliberation = oScope["chkExternalCaliberation"].GetSelectedValue();
            var oPreventionMaintanence = oScope["chkPreventionMaintanence"].GetSelectedValue();

            var IsSuccess = true;

            if (oExternalCaliberation == 78 && oPreventionMaintanence == 78) {
                if (scope.NewDCModel.txtECServiceProviderControlId == "" && scope.NewDCModel.txtPMServiceProviderControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please enter External Caliberation Service Provider and Preventive Maintanance Service Provider", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.txtECServiceProviderControlId == "" && scope.NewDCModel.txtPMServiceProviderControlId != "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please enter External Caliberation Service Provider", ['OK'], "");
                    IsSuccess = false;
                }
                else if (scope.NewDCModel.txtECServiceProviderControlId != "" && scope.NewDCModel.txtPMServiceProviderControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please enter Preventive Maintanance Service Provider", ['OK'], "");
                    IsSuccess = false;
                }
            }
           else if (oExternalCaliberation == 78) {                  
                if (scope.NewDCModel.txtECServiceProviderControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please enter External Caliberation Service Provider", ['OK'], "");
                    IsSuccess = false;
                }
            }
           else if (oPreventionMaintanence == 78) {
                if (scope.NewDCModel.txtPMServiceProviderControlId == "") {
                    navigator.notification.alert("MN-RQ-CST-008 :: Please enter Preventive Maintanance Service Provider", ['OK'], "");
                    IsSuccess = false;
                }
            }

            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CurrentStockofLaboratoryMediaVallidation", Excep);
        }
    }

    var YearlyVerificationCertificateforProbeThermometerVallidation = function () {

        try {

            var oThermometerType = oScope["chkThermometerType"].GetSelectedValue();
            var CommonMessage = "MN-RQ-CST-008 :: Please enter ";
            var ErrorMessage = "";
            var ProbeThermometerSerialNo = oScope.AddlThermometerCodeControlId.GetSelectedText();
            var IRThermometerSerialNo = oScope.AddlIRThermometerCodeControlId.GetSelectedText();

            var IsSuccess = true;

            if (oThermometerType == 75) { //probe    
                if (ProbeThermometerSerialNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Thermometer Serial No";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap1RefNoControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap1 Test Cap Ref No";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap1StandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap1 Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap1ObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap1 Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap1DeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap1 Deviation Value";
                    IsSuccess = false;
                }
                //Testcap2
                if (scope.NewDCModel.TestCap2TestCapRefNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap2 Test Cap Ref No";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap2StandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap2 Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap2ObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap2 Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap2DeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap2 Deviation Value";
                    IsSuccess = false;
                }
                //Testcap3
                if (scope.NewDCModel.TestCap3TestCapRefNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap3 Test Cap Ref No";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap3StandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap3 Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap3ObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap3 Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtTestCap3DeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap3 Deviation Value";
                    IsSuccess = false;
                }
                //Bolingwater
                if (scope.NewDCModel.txtBoilingWaterStandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Boling Water Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtBoilingWaterObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Boling Water Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtBoilingWaterDeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Boling Water Deviation Value";
                    IsSuccess = false;
                }
            }
            else if (oThermometerType == 74) {//IR
                //ICE CAP Method
                if (IRThermometerSerialNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Thermometer Serial No";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtICEStandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ICE CAP Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtICEObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ICE CAP Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtICEDeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ICE CAP Deviation Value";
                    IsSuccess = false;
                }

                //Validator
                //ICE CAP Method
                if (scope.NewDCModel.txtValidatorStandardValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Validator Standard Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtValidatorObservedValueControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Validator Observed Value";
                    IsSuccess = false;
                }
                if (scope.NewDCModel.txtValidatorDeviationValueControlId === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Validator Deviation Value";
                    IsSuccess = false;
                }
            }
          
            if (IsSuccess == false) {
                alert(CommonMessage + ErrorMessage);
            }
            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CurrentStockofLaboratoryMediaVallidation", Excep);
        }
    }

    var YearlyVerificationforProbeThermometerValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            
            var IsSuccess = true;


            var ErrorMessage = "";

            var IsSuccess = true;

            var Department = "";
            var Department1 = "";
            var Section = "";

            var Allocation = "";
            var ThermometerCode = "";
            var ThermometerSerialNumber = "";
            var ThermometerModelNo = "";

            var DateOfCalibration = "";
            var DueDate = "";
            var TestCap1TestCapRefNo = "";
            var TestCap1StandardValue = "";
            var TestCap1ObservedValue = "";
            var TestCap1DeviationValue = "";

            var TestCap2TestCapRefNo = "";
            var TestCap2StandardValue = "";
            var TestCap2ObservedValue = "";
            var TestCap2DeviationValue = "";

            var TestCap3TestCapRefNo = "";
            var TestCap3StandardValue = "";
            var TestCap3ObservedValue = "";
            var TestCap3DeviationValue = "";

            var BoilingWaterStandardValue = "";
            var BoilingWaterObservedValue = "";
            var BoilingWaterDeviationValue = "";

            var ThermometerStatus = "";
            var OtherThermometerStatus = "";


            if (AryDcResultDetails == undefined) {


                /*Start*/
                Department = oScope["AddlDepartmentControlId"].GetSelectedValue();
                Department1 = oScope["AddlDepartment1ControlId"].GetSelectedValue();
                Section = oScope.NewDCModel.txtSectionControlId;
                Allocation = oScope.NewDCModel.txtAllocationControlId;
                ThermometerCode = oScope["AddlThermometerCodeControlId"].GetSelectedValue();
                //ThermometerSerialNumber = oScope.NewDCModel.txtThermometerSerialNoControlId;
                //ThermometerModelNo = oScope.NewDCModel.txtThermometerModelNoControlId;
                ThermometerSerialNumber = oScope.NewDCModel.AddlThermometerSerialNoControlId;
                ThermometerModelNo = oScope.NewDCModel.AddlThermometerModelNoControlId;
                DateOfCalibration = oScope.NewDCModel.DTDDateOfCalibrationControlId;
                DueDate = oScope.NewDCModel.DTDueDateControlId;

                TestCap1TestCapRefNo = oScope.NewDCModel.txtTestCap1RefNoControlId;
                TestCap1StandardValue = oScope.NewDCModel.txtTestCap1StandardValueControlId;
                TestCap1ObservedValue = oScope.NewDCModel.txtTestCap1ObservedValueControlId;
                TestCap1DeviationValue = oScope.NewDCModel.txtTestCap1DeviationValueControlId;


                TestCap2TestCapRefNo = oScope.NewDCModel.txtTestCap2RefNoControlId;
                TestCap2StandardValue = oScope.NewDCModel.txtTestCap2StandardValueControlId;
                TestCap2ObservedValue = oScope.NewDCModel.txtTestCap2ObservedValueControlId;
                TestCap2DeviationValue = oScope.NewDCModel.txtTestCap2DeviationValueControlId;


                TestCap3TestCapRefNo = oScope.NewDCModel.txtTestCap3RefNoControlId;
                TestCap3StandardValue = oScope.NewDCModel.txtTestCap3StandardValueControlId;
                TestCap3ObservedValue = oScope.NewDCModel.txtTestCap3ObservedValueControlId;
                TestCap3DeviationValue = oScope.NewDCModel.txtTestCap3DeviationValueControlId;



                BoilingWaterStandardValue = oScope.NewDCModel.txtBoilingWaterStandardValueControlId;
                BoilingWaterObservedValue = oScope.NewDCModel.txtBoilingWaterObservedValueControlId;
                BoilingWaterDeviationValue = oScope.NewDCModel.txtBoilingWaterDeviationValueControlId;


                ThermometerStatus = oScope["ChkThermometerStatusControlId"].GetSelectedText();
                OtherThermometerStatus = oScope.NewDCModel.txtTOtherThermometerStatusControlId;

                /*End*/

            }
            else {

                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartmentControlId') {
                        Department = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartment1ControlId') {
                        Department1 = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtSectionControlId') {
                        Section = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtAllocationControlId') {
                        Allocation = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlThermometerCodeControlId') {
                        ThermometerCode = valueFromPage;
                    }                   
                    if (AryDcResultDetails[itr2].ControlId == 'AddlThermometerSerialNoControlId') {                       
                        ThermometerSerialNumber = valueFromPage;
                    }                  
                    if (AryDcResultDetails[itr2].ControlId == 'AddlThermometerModelNoControlId') {                     
                        ThermometerModelNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'DTDDateOfCalibrationControlId') {
                        DateOfCalibration = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1RefNoControlId') {
                        TestCap1TestCapRefNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1StandardValueControlId') {
                        TestCap1StandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1ObservedValueControlId') {
                        TestCap1ObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1DeviationValueControlId') {
                        TestCap1DeviationValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap2RefNoControlId') {
                        TestCap2TestCapRefNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap2StandardValueControlId') {
                        TestCap2StandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap2ObservedValueControlId') {
                        TestCap2ObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap2DeviationValueControlId') {
                        TestCap2DeviationValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap3RefNoControlId') {
                        TestCap3TestCapRefNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap3StandardValueControlId') {
                        TestCap3StandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap3ObservedValueControlId') {
                        TestCap3ObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap3DeviationValueControlId') {
                        TestCap3DeviationValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtBoilingWaterStandardValueControlId') {
                        BoilingWaterStandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtBoilingWaterObservedValueControlId') {
                        BoilingWaterObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtBoilingWaterDeviationValueControlId') {
                        BoilingWaterDeviationValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'ChkThermometerStatusControlId') {
                        ThermometerStatus = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTOtherThermometerStatusControlId') {
                        OtherThermometerStatus = valueFromPage;
                    }
                }

            }

            //alert("Department" + Department + "  /n Section :" + Section+  "  /n Allocation :" + Allocation+ "  /n ThermometerCode :" + ThermometerCode+ "  /n ThermometerSerialNumber :" + ThermometerSerialNumber+ "  /n ThermometerModelNo :" + ThermometerModelNo+ "  /n DateOfCalibration :" + DateOfCalibration)
            if (Department == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Unit";
                IsSuccess = false;
            }
            if (Department1 == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Department";
                IsSuccess = false;
            }


            if (Section == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Section";
                IsSuccess = false;
            }
            if (Allocation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Allocation";
                IsSuccess = false;
            }

            if (ThermometerCode == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Code";
                IsSuccess = false;
            }

            if (ThermometerSerialNumber == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Serial Number";
                IsSuccess = false;
            }

            if (ThermometerModelNo == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Model No";
                IsSuccess = false;
            }

            if (ThermometerStatus == "") {

                if (DateOfCalibration == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Date Of Verification";
                    IsSuccess = false;
                }

                
                if (TestCap1TestCapRefNo === "" || TestCap1StandardValue === "" || TestCap1ObservedValue === "" || TestCap1DeviationValue === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap 0 Method";
                    IsSuccess = false;
                }

                if (TestCap2TestCapRefNo === "" || TestCap2StandardValue === "" || TestCap2ObservedValue === "" || TestCap2DeviationValue === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap 3.0 Method";
                    IsSuccess = false;
                }

                if (TestCap3TestCapRefNo === "" || TestCap3StandardValue === "" || TestCap3ObservedValue === "" || TestCap3DeviationValue === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap -18.0 Method";
                    IsSuccess = false;
                }

                if (BoilingWaterStandardValue === "" || BoilingWaterObservedValue === "" || BoilingWaterDeviationValue === "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Boiling Water";
                    IsSuccess = false;
                }
                
            }
            else {
                if (ThermometerStatus == "Other" && OtherThermometerStatus == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Other";
                    IsSuccess = false;
                }
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-YVP-002 :: Please enter ' + ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
            
        }
        catch (Excep) {
            //alert('DataCaptureBO.YearlyVerificationforProbeThermometerValidation Excep :  '+ Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.YearlyVerificationforProbeThermometerValidation", Excep);
        }
    }

    var ChillerFreezerCheckingVallidation = function (IsAlertMessageEnabled) {

        try {

            var oType = oScope["chkType"].GetSelectedValue();
            var CommonMessage = "MN-RQ-CFC-008 :: Please enter ";
            var ErrorMessage = "";
            var MachineChiller = oScope.AddlMachineChiller.GetSelectedText();
            var MachineFreezer = oScope.AddlMachineFreezer.GetSelectedText();

            var IsSuccess = true;

            if (oType == 18) { //Chiller    
                if (MachineChiller == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Machine-Chiller";
                    IsSuccess = false;
                }            
            }
            else if (oType == 19) { //Freezer    
                if (MachineFreezer == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Machine-Freezer";
                    IsSuccess = false;
                }
            }

            if (IsSuccess == false && IsAlertMessageEnabled==true) {
                alert(CommonMessage + ErrorMessage);
            }
            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ChillerFreezerCheckingVallidation", Excep);
        }
    }

    var SampleSheetAndWaterAnalysisCustomValidation = function () {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            var scope = oScope;
            if (scope.NewDCModel.txtSamplingNoControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample No.";
                IsSuccess = false;
            }
            if (scope.txtSamplingMethodControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Method";
                IsSuccess = false;
            }
            
            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtLocationControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Location";
            //    IsSuccess = false;
            //}

            //if (scope.AddlSectorControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Sector";
            //    IsSuccess = false;
            //}
            //if (scope.AddlAirlineControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Airline";
            //    IsSuccess = false;
            //}
            //if (scope.AddlClassControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Class";
            //    IsSuccess = false;
            //}
            if (document.getElementById("DTDateTimeOfCollectionControlId").value == "" || document.getElementById("DTDateTimeOfCollectionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date & Time Collection";
                IsSuccess = false;
            }
            if (scope.NewDCModel.ATSampleCollectionTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Collection Temp";
                IsSuccess = false;
            }
            //if (document.getElementById("DTSampleCollectionTimeControlId") != null && document.getElementById("DTSampleCollectionTimeControlId").value == "" && document.getElementById("DTSampleCollectionTimeControlId").value == null) {
            if ( document.getElementById("DTSampleCollectionTimeControlId").value == "" || document.getElementById("DTSampleCollectionTimeControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Collection Time";
                IsSuccess = false;
            }
            if (scope.NewDCModel.ATAmbientTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Temp";
                IsSuccess = false;
            }
            if (document.getElementById("DTAmbientTimeControlId").value == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Time";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && scope.NewDCModel.ATLabChillerTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Temp";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && document.getElementById("DTLabChillerTimeControlId").value == "" && document.getElementById("DTLabChillerTimeControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Time";
            }
            if (scope.AddlSamplingToolsControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Tools";
                IsSuccess = false;
            }
            //if (scope.AddlSampleContainerControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Container ";
            //    IsSuccess = false;
            //}
            if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Condition of area";
                IsSuccess = false;
            }
            else if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == 254 && scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Area condition";
                IsSuccess = false;
            }
            // if (scope.NewDCModel.DTAnalysisDateControlId == "") {
            if (document.getElementById("DTAnalysisDateControlId").value == "" || document.getElementById("DTAnalysisDateControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Date";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTAnalysisCompletionDateControlId == "") {
            if (document.getElementById("DTAnalysisCompletionDateControlId").value == "" || document.getElementById("DTAnalysisCompletionDateControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Completion Date";
                IsSuccess = false;
            }
            if (scope["chkAnalysisReason"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "AnalysisReason";
                IsSuccess = false;
            }
            if ((scope["chkNAControlId"].GetSelectedText() == "" )&& (scope.NewDCModel.DTDateofRecieptControlId == "" || scope.NewDCModel.DTDateofRecieptControlId == null || scope.NewDCModel.DTDateofRecieptControlId == undefined)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Reciept";
                IsSuccess = false;
            }           
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }
            //

            //if (IsSuccess == false) {
            //    alert(ErrorMessage);
            //}
            

            return IsSuccess;

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetAndWaterAnalysisController.ShowWaterAnalysisValidation", xlatService);
        }
    }

    var SampleSheetAndIceAnalysisCustomValidation = function () {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            var scope = oScope;
            if (scope.NewDCModel.txtSamplingNoControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample No.";
                IsSuccess = false;
            }
            if (scope.txtSamplingMethodControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Method";
                IsSuccess = false;
            }

            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtLocationControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Location";
            //    IsSuccess = false;
            //}

            //if (scope.AddlSectorControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Sector";
            //    IsSuccess = false;
            //}
            //if (scope.AddlAirlineControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Airline";
            //    IsSuccess = false;
            //}
            //if (scope.AddlClassControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Class";
            //    IsSuccess = false;
            //}
            if (scope.NewDCModel.ATSampleCollectionTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Collection Temp";
                IsSuccess = false;
            }
            if (document.getElementById("DTSampleCollectionTimeControlId").value == "" || document.getElementById("DTSampleCollectionTimeControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Collection Time";
                IsSuccess = false;
            }
            if (scope.NewDCModel.ATAmbientTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Temp";
                IsSuccess = false;
            }
            if (document.getElementById("DTAmbientTimeControlId").value == "" || document.getElementById("DTAmbientTimeControlId").value ==null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Time";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && scope.NewDCModel.ATLabChillerTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Temp";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && (document.getElementById("DTLabChillerTimeControlId").value == "" || document.getElementById("DTLabChillerTimeControlId").value == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Time";
                 IsSuccess = false;
            }
            if (scope.AddlSamplingToolsControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Tools";
                IsSuccess = false;
            }
            if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Condition of area";
                IsSuccess = false;
            }
            else if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == 254 && scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Area condition";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTAnalysisDateControlId == "" || scope.NewDCModel.DTAnalysisDateControlId == null) {
            
            if (document.getElementById("DTAnalysisDateControlId").value == "" || document.getElementById("DTAnalysisDateControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Date";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTAnalysisCompletionDateControlId == "" || scope.NewDCModel.DTAnalysisDateControlId == null) {
            if (document.getElementById("DTAnalysisCompletionDateControlId").value == "" || document.getElementById("DTAnalysisCompletionDateControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Completion Date";
                IsSuccess = false;
            }
            if (scope["chkAnalysisReason"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "AnalysisReason";
                IsSuccess = false;
            }           
            //if ((scope["chkNAControlId"].GetSelectedText() == "") && (scope.NewDCModel.DTDateofRecieptControlId == "" || scope.NewDCModel.DTDateofRecieptControlId == null || scope.NewDCModel.DTDateofRecieptControlId == undefined)) {
            if ((scope["chkNAControlId"].GetSelectedText() == "") && (document.getElementById("DTDateofRecieptControlId").value == "" || document.getElementById("DTDateofRecieptControlId").value == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Reciept";
                IsSuccess = false;
            }          
            //if (scope.NewDCModel.DTTimeofRecieptControlId == "" || scope.NewDCModel.DTTimeofRecieptControlId == null || scope.NewDCModel.DTTimeofRecieptControlId == undefined) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Time of Reciept";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.DTDateOfProductionControlId == "" || scope.NewDCModel.DTDateOfProductionControlId == null || scope.NewDCModel.DTDateOfProductionControlId == undefined) {
            //if (document.getElementById("DTDateOfProductionControlId").value == "" || document.getElementById("DTDateOfProductionControlId").value == null) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Date of Production";
            //    IsSuccess = false;
            //}
            //if (scope["chkProductionShiftControlId"].GetSelectedValue() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Production Shift";
            //    IsSuccess = false;
            //}
            if (scope.NewDCModel.txtPreservationOrTransportationControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Preservation/Transportation";
                IsSuccess = false;
            }
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            //
            
            //if (IsSuccess == false) {
            //    alert(ErrorMessage);
            //}
            return IsSuccess;

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetAndWaterAnalysisController.ShowWaterAnalysisValidation", xlatService);
        }
    }
   
    this.SampleSheetAndWaterAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try{

        var IsSuccess = true;       
        var ErrorMessage = "";
        var Result = { IsSuccess: true, ErrorMessage: "" };
        IsSuccess = SampleSheetAndWaterAnalysisCustomValidation();
        Result.IsSuccess = IsSuccess;
        if (IsSuccess==true){       

        if (AryDcResultDetails != undefined) {


            for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                var valueFromPage = AryDcResultDetails[itr2].Answer;



                if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                    var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();


                    if (ParameterTested != "") {
                        

                        //Result = ParameterTestedValidation(Result, "TVB", "txtEquipmentUsed1ControlId", "txtColonyCountDilutionFirst1ControlId", "txtColonyCountDilutionSecond1ControlId", "txtFactor1ControlId", "txtResult1ControlId", "AddlEvaluation1ControlId");
                        //Result = ParameterTestedValidation(Result, "Coliforms", "txtEquipmentUsed2ControlId", "txtColonyCountDilutionFirst2ControlId", "txtColonyCountDilutionSecond2ControlId", "txtFactor2ControlId", "txtResult2ControlId", "AddlEvaluation2ControlId");
                        //Result = ParameterTestedValidation(Result, "E.coli", "txtEquipmentUsed3ControlId", "txtColonyCountDilutionFirst3ControlId", "txtColonyCountDilutionSecond3ControlId", "txtFactor3ControlId", "txtResult3ControlId", "AddlEvaluation3ControlId");
                        //Result = ParameterTestedValidation(Result, "Pseudomonas", "txtEquipmentUsed4ControlId", "txtColonyCountDilutionFirst4ControlId", "txtColonyCountDilutionSecond4ControlId", "txtFactor4ControlId", "txtResult4ControlId", "AddlEvaluation4ControlId");
                        //Result = ParameterTestedValidation(Result, "Enterococcus", "txtEquipmentUsed5ControlId", "txtColonyCountDilutionFirst5ControlId", "txtColonyCountDilutionSecond5ControlId", "txtFactor5ControlId", "txtResult5ControlId", "AddlEvaluation5ControlId");
                        //Result = ParameterTestedValidation(Result, "Salmonella", "txtEquipmentUsed6ControlId", "txtColonyCountDilutionFirst6ControlId", "txtColonyCountDilutionSecond6ControlId", "txtFactor6ControlId", "txtResult6ControlId", "AddlEvaluation6ControlId");

                        Result = ParameterTestedValidation(Result, "TVB", "txtEquipmentUsed1ControlId", "txtColonyCountDilutionFirst1ControlId", "txtResult1ControlId", "AddlEvaluation1ControlId");
                        Result = ParameterTestedValidation(Result, "Coliforms", "txtEquipmentUsed2ControlId", "txtColonyCountDilutionFirst2ControlId",  "txtResult2ControlId", "AddlEvaluation2ControlId");
                        Result = ParameterTestedValidation(Result, "E.coli", "txtEquipmentUsed3ControlId", "txtColonyCountDilutionFirst3ControlId", "txtResult3ControlId", "AddlEvaluation3ControlId");
                        Result = ParameterTestedValidation(Result, "Pseudomonas", "txtEquipmentUsed4ControlId", "txtColonyCountDilutionFirst4ControlId",  "txtResult4ControlId", "AddlEvaluation4ControlId");
                        Result = ParameterTestedValidation(Result, "Enterococcus", "txtEquipmentUsed5ControlId", "txtColonyCountDilutionFirst5ControlId",  "txtResult5ControlId", "AddlEvaluation5ControlId");
                        Result = ParameterTestedValidation(Result, "Salmonella", "txtEquipmentUsed6ControlId", "txtColonyCountDilutionFirst6ControlId", "txtResult6ControlId", "AddlEvaluation6ControlId");

                        if (Result.IsSuccess == true) {
                            if (oScope.NewDCModel["txtEquipmentUsed1ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed2ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed3ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed4ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed5ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed6ControlId"] == "")
                            {
                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }
                     
                    }
                    else {
                        //alert("Parametere not selected");

                        Result.ErrorMessage = "Parameter Tested";
                        Result.IsSuccess = false;
                    }
                }

            }
        }
        else {
            alert('Not Implemeted');
        }
  
        }
        IsSuccess = Result.IsSuccess;

        if (IsSuccess == false && IsAlertMessageEnabled == true) {
           
            var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
            alert(finalMesg);
        }

        return IsSuccess;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SampleSheetAndWaterAnalysisValidation", Excep);
        }

    }

    this.SampleSheetAndIceAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {

            var IsSuccess = true;
            var ErrorMessage = "";
            var Result = { IsSuccess: true, ErrorMessage: "" };
            IsSuccess = SampleSheetAndIceAnalysisCustomValidation();
            Result.IsSuccess = IsSuccess;
            if (IsSuccess == true) {

                if (AryDcResultDetails != undefined) {


                    for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                        var valueFromPage = AryDcResultDetails[itr2].Answer;



                        if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                            var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();


                            if (ParameterTested != "") {


                                //Result = ParameterTestedValidation(Result, "TVB", "txtEquipmentUsed1ControlId", "txtColonyCountDilutionFirst1ControlId", "txtColonyCountDilutionSecond1ControlId", "txtFactor1ControlId", "txtResult1ControlId", "AddlEvaluation1ControlId");
                                //Result = ParameterTestedValidation(Result, "Coliforms", "txtEquipmentUsed2ControlId", "txtColonyCountDilutionFirst2ControlId", "txtColonyCountDilutionSecond2ControlId", "txtFactor2ControlId", "txtResult2ControlId", "AddlEvaluation2ControlId");
                                //Result = ParameterTestedValidation(Result, "E.coli", "txtEquipmentUsed3ControlId", "txtColonyCountDilutionFirst3ControlId", "txtColonyCountDilutionSecond3ControlId", "txtFactor3ControlId", "txtResult3ControlId", "AddlEvaluation3ControlId");
                                //Result = ParameterTestedValidation(Result, "Pseudomonas", "txtEquipmentUsed4ControlId", "txtColonyCountDilutionFirst4ControlId", "txtColonyCountDilutionSecond4ControlId", "txtFactor4ControlId", "txtResult4ControlId", "AddlEvaluation4ControlId");
                                //Result = ParameterTestedValidation(Result, "Enterococcus", "txtEquipmentUsed5ControlId", "txtColonyCountDilutionFirst5ControlId", "txtColonyCountDilutionSecond5ControlId", "txtFactor5ControlId", "txtResult5ControlId", "AddlEvaluation5ControlId");
                                //Result = ParameterTestedValidation(Result, "Salmonella", "txtEquipmentUsed6ControlId", "txtColonyCountDilutionFirst6ControlId", "txtColonyCountDilutionSecond6ControlId", "txtFactor6ControlId", "txtResult6ControlId", "AddlEvaluation6ControlId");

                                Result = ParameterTestedValidation(Result, "TVB", "txtEquipmentUsed1ControlId", "txtColonyCountDilutionFirst1ControlId",  "txtResult1ControlId", "AddlEvaluation1ControlId");
                                Result = ParameterTestedValidation(Result, "Coliforms", "txtEquipmentUsed2ControlId", "txtColonyCountDilutionFirst2ControlId",  "txtResult2ControlId", "AddlEvaluation2ControlId");
                                Result = ParameterTestedValidation(Result, "E.coli", "txtEquipmentUsed3ControlId", "txtColonyCountDilutionFirst3ControlId", "txtResult3ControlId", "AddlEvaluation3ControlId");
                                Result = ParameterTestedValidation(Result, "Pseudomonas", "txtEquipmentUsed4ControlId", "txtColonyCountDilutionFirst4ControlId", "txtResult4ControlId", "AddlEvaluation4ControlId");
                                Result = ParameterTestedValidation(Result, "Enterococcus", "txtEquipmentUsed5ControlId", "txtColonyCountDilutionFirst5ControlId", "txtResult5ControlId", "AddlEvaluation5ControlId");
                                Result = ParameterTestedValidation(Result, "Salmonella", "txtEquipmentUsed6ControlId", "txtColonyCountDilutionFirst6ControlId", "txtResult6ControlId", "AddlEvaluation6ControlId");

                                if (Result.IsSuccess == true) {
                                    if (oScope.NewDCModel["txtEquipmentUsed1ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed2ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed3ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed4ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed5ControlId"] == "" && oScope.NewDCModel["txtEquipmentUsed6ControlId"] == "") {
                                        Result.ErrorMessage = "Parameter Tested";
                                        Result.IsSuccess = false;
                                    }
                                }
                            }
                            else {
                                //alert("Parametere not selected");

                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }

                    }
                }
                else {
                    alert('Not Implemeted');
                }

            }
            IsSuccess = Result.IsSuccess;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SampleSheetAndIceAnalysisValidation", Excep);
        }

    }

    //var ParameterTestedValidation = function (ResultMessage, ParameterType, EquipmentUsed, ColonyCount1, ColonyCount2, ColonyCount3, Result, Evaluation) {
    var ParameterTestedValidation = function (ResultMessage, ParameterType, EquipmentUsed, ColonyCount1, Result, Evaluation) {
        try{
        var IsSuccess = true;
        var ErrorMessage = "";
        ErrorMessage = ResultMessage.ErrorMessage;
        IsSuccess = ResultMessage.IsSuccess;

        //if (oScope.NewDCModel[EquipmentUsed] != "" || oScope.NewDCModel[ColonyCount1] != "" || oScope.NewDCModel[ColonyCount2] != "" || oScope.NewDCModel[ColonyCount3] != "" || oScope.NewDCModel[Result] != "" || oScope[Evaluation].GetSelectedText() != "") {
        if (oScope.NewDCModel[EquipmentUsed] != "" || oScope.NewDCModel[ColonyCount1] != "" || oScope.NewDCModel[Result] != "" || oScope[Evaluation].GetSelectedText() != "") {
            if (oScope.NewDCModel[EquipmentUsed] == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-EquipmentUsed";
                IsSuccess = false;
            }
            if (oScope.NewDCModel[ColonyCount1] == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-ColonyCount1";
                IsSuccess = false;
            }
            /*
            if (oScope.NewDCModel[ColonyCount2] == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-ColonyCount2";
                IsSuccess = false;
            }
            if (oScope.NewDCModel[ColonyCount1] == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-ColonyCount3";
                IsSuccess = false;
            }
            */
            if (oScope.NewDCModel[Result] == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-Result";
                IsSuccess = false;
            }
            if (oScope[Evaluation].GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + ParameterType + "-Evaluation";
                IsSuccess = false;
            }
        }
        ResultMessage.ErrorMessage = ErrorMessage;
        ResultMessage.IsSuccess = IsSuccess;
       
        return ResultMessage;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ParameterTestedValidation", Excep);
        }


    }


    var SampleSheetAndAirAnalysisCustomValidation = function () {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            var scope = oScope;
           

            //if (scope.NewDCModel.txtSamplingNoControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample No.";
            //    IsSuccess = false;
            //}

            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }
            //if (scope.AddlUnitControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Unit";
            //    IsSuccess = false;
            //}
            //if (scope.AddlDepartmentControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Department";
            //    IsSuccess = false;
            //}
            //if (scope.AddlSectionControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Section";
            //    IsSuccess = false;
            //}
            //if (document.getElementById("DTTimeControlId").value == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Time";
            //}
            //if (scope.NewDCModel.DTAnalysisDateControlId == "") {
            if (document.getElementById("DTDateofAnalysisControlId").value == "" || document.getElementById("DTDateofAnalysisControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Date";
                IsSuccess = false;
            }

            //if ((scope.AddlEvaluation1ControlId.GetSelectedText() == "F" || scope.AddlEvaluation3ControlId.GetSelectedText() == "F")
            //    && (scope.NewDCModel.txtFollowUpStatusControlId == undefined || scope.NewDCModel.txtFollowUpStatusControlId == "" || scope.NewDCModel.txtFollowUpStatusControlId == null)) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Follow Up Status";
            //    IsSuccess = false;
            //}
            if (scope["chkTestMethod"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }

            else if (scope["chkTestMethod"].GetSelectedValue() == 69) {//Open Plate
                // if (scope.NewDCModel.DTExposureStartTimeControlId == "") {
                if (document.getElementById("DTExposureStartTimeControlId").value == "" || document.getElementById("DTExposureStartTimeControlId").value == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Exposure Start Time";
                    IsSuccess = false;
                }
                //if (scope.NewDCModel.DTExposureEndTimeControlId == "") {
                if (document.getElementById("DTExposureEndTimeControlId").value == "" || document.getElementById("DTExposureEndTimeControlId").value == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Exposure End Time";
                    IsSuccess = false;
                }
                // if (scope.NewDCModel.DTExposureTimeControlId == "") {
                if (document.getElementById("DTExposureTimeControlId").value == "" || document.getElementById("DTExposureTimeControlId").value == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Exposure Time";
                    IsSuccess = false;
                }

                //if (scope.NewDCModel.DTCompletionDate2ControlId == "") {
                if (document.getElementById("DTCompletionDate2ControlId").value == "" || document.getElementById("DTCompletionDate2ControlId").value == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Completion Date";
                    IsSuccess = false;
                }
            }
            else if (scope["chkTestMethod"].GetSelectedValue() == 68) { //Air Sampler
                //if (scope.NewDCModel.DTCompletionDate1ControlId == "") {
                if (document.getElementById("DTCompletionDate1ControlId").value == "" || document.getElementById("DTCompletionDate1ControlId").value == null) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Completion Date";
                    IsSuccess = false;
                }
            }
            
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }
            //if (IsSuccess == false) {
            //    alert( ErrorMessage);
            //}
            return IsSuccess;

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetAndWaterAnalysisController.ShowWaterAnalysisValidation", xlatService);
        }
    }

    this.SampleSheetAndAirAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {

            var IsSuccess = true;
            var ErrorMessage = "";
            var Result = { IsSuccess: true, ErrorMessage: "" };
            IsSuccess = SampleSheetAndAirAnalysisCustomValidation();
            Result.IsSuccess = IsSuccess;
            if (IsSuccess == true) {

                if (AryDcResultDetails != undefined) {


                    for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                        var valueFromPage = AryDcResultDetails[itr2].Answer;



                        if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                            var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();


                            if (ParameterTested != "") {


                                Result = ActualValueAirParameterTestedValidation(Result, "TVB", "txtActualValue1ControlId");
                                // Result = ActualValueAirParameterTestedValidation(Result, "Coliforms", "txtActualValue2ControlId");
                                Result = ActualValueAirParameterTestedValidation(Result, "YeasAndMould", "txtActualValue3ControlId");
                           
                                if (Result.IsSuccess == true) {
                                    if (oScope.NewDCModel["txtActualValue1ControlId"] == "" && oScope.NewDCModel["txtActualValue3ControlId"] == "") {
                                        Result.ErrorMessage = "Parameter Tested";
                                        Result.IsSuccess = false;
                                    }
                                }
                            }
                            else {
                                //alert("Parametere not selected");

                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }

                    }
                }
                else {
                    alert('Not Implemeted');
                }

            }
            IsSuccess = Result.IsSuccess;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                alert(finalMesg);
            }
            //alert("Result "+JSON.stringify(Result));
            return IsSuccess;
        }
        catch (Excep) {
         //  alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SampleSheetAndIceAnalysisValidation", Excep);
        }

    }

    var ActualValueAirParameterTestedValidation = function (ResultMessage, ParameterType, ActualValue) {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            ErrorMessage = ResultMessage.ErrorMessage;
            IsSuccess = ResultMessage.IsSuccess;

            if (oScope.NewDCModel[ActualValue] != "") {

                if (oScope.NewDCModel[ActualValue] == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-ActualValue";
                    IsSuccess = false;
                }                
            }
            ResultMessage.ErrorMessage = ErrorMessage;
            ResultMessage.IsSuccess = IsSuccess;

            return ResultMessage;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ActualValueAirParameterTestedValidation", Excep);
        }


    }

    var ActualAndEvaluationAirParameterTestedValidation = function (ResultMessage, ParameterType, ActualValue, Evaluation) {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            ErrorMessage = ResultMessage.ErrorMessage;
            IsSuccess = ResultMessage.IsSuccess;

            if (oScope.NewDCModel[ActualValue] != "" || oScope[Evaluation].GetSelectedText() != "") 
            {

                if (oScope.NewDCModel[ActualValue] == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-ActualValue";
                    IsSuccess = false;
                }             
                if (oScope[Evaluation].GetSelectedText() == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-Evaluation";
                    IsSuccess = false;
                }
            }
            ResultMessage.ErrorMessage = ErrorMessage;
            ResultMessage.IsSuccess = IsSuccess;

            return ResultMessage;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ParameterTestedValidation", Excep);
        }


    }

    var ResultAndEvaluationAirParameterTestedValidation = function (ResultMessage, ParameterType, ActualValue, Evaluation) {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            ErrorMessage = ResultMessage.ErrorMessage;
            IsSuccess = ResultMessage.IsSuccess;

            if (oScope[ActualValue].GetSelectedText() != "" || oScope[Evaluation].GetSelectedText() != "") {

                if (oScope[ActualValue].GetSelectedText() == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-Result";
                    IsSuccess = false;
                }
                if (oScope[Evaluation].GetSelectedText() == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-Evaluation";
                    IsSuccess = false;
                }
            }
            ResultMessage.ErrorMessage = ErrorMessage;
            ResultMessage.IsSuccess = IsSuccess;

            return ResultMessage;
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ParameterTestedValidation", Excep);
        }


    }

    this.SampleSheetAndAllergenAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {

            var IsSuccess = true;
            var ErrorMessage = "";
            var Result = { IsSuccess: true, ErrorMessage: "" };
            IsSuccess = SampleSheetAndAllergenAnalysisCustomValidation();
            Result.IsSuccess = IsSuccess;
           // alert("Result11:" + JSON.stringify(Result));
            if (IsSuccess == true) {

                if (AryDcResultDetails != undefined) {


                    for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                        var valueFromPage = AryDcResultDetails[itr2].Answer;



                        if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                            var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();


                            if (ParameterTested != "") {


                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Total Milk Allergen", "txtCriticalValue1ControlId", "AddlUnitFirst1ControlId", "txtDetectionLimit1ControlId", "txtDetectedValue1ControlId", "AddlUnitSecond1ControlId", "txtDeviatedValue1ControlId", "AddlEvaluation1ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Egg Allergen", "txtCriticalValue2ControlId", "AddlUnitFirst2ControlId", "txtDetectionLimit2ControlId", "txtDetectedValue2ControlId", "AddlUnitSecond2ControlId", "txtDeviatedValue2ControlId", "AddlEvaluation2ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Almond Allergen", "txtCriticalValue3ControlId", "AddlUnitFirst3ControlId", "txtDetectionLimit3ControlId", "txtDetectedValue3ControlId", "AddlUnitSecond3ControlId", "txtDeviatedValue3ControlId", "AddlEvaluation3ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Peanut Allergen", "txtCriticalValue4ControlId", "AddlUnitFirst4ControlId", "txtDetectionLimit4ControlId", "txtDetectedValue4ControlId", "AddlUnitSecond4ControlId", "txtDeviatedValue4ControlId", "AddlEvaluation4ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Gladin Allergen", "txtCriticalValue5ControlId", "AddlUnitFirst5ControlId", "txtDetectionLimit5ControlId", "txtDetectedValue5ControlId", "AddlUnitSecond5ControlId", "txtDeviatedValue5ControlId", "AddlEvaluation5ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Mustard Allergen", "txtCriticalValue6ControlId", "AddlUnitFirst6ControlId", "txtDetectionLimit6ControlId", "txtDetectedValue6ControlId", "AddlUnitSecond6ControlId", "txtDeviatedValue6ControlId", "AddlEvaluation6ControlId");
                                //Result = ParameterTestedAllergenAnalysisValidation(Result, "Soy Allergen", "txtCriticalValue7ControlId", "AddlUnitFirst7ControlId", "txtDetectionLimit7ControlId", "txtDetectedValue7ControlId", "AddlUnitSecond7ControlId", "txtDeviatedValue7ControlId", "AddlEvaluation7ControlId");
                                //*****************Change Request -----remove critical value and Unit ,Evaluation is not mandatory *************
                                //*****************Change Request 05-10-2015-----All parameters are not tested at a time. It should not mandatory for all the parameter .Any one parameter test only is mandatory*************
                                Result = ParameterTestedAllergenAnalysisValidation(Result, "Total Milk Allergen", "txtDetectionLimit1ControlId", "txtDetectedValue1ControlId", "AddlUnitSecond1ControlId");                                
                                if (Result.IsSuccess ==false){
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Egg Allergen", "txtDetectionLimit2ControlId", "txtDetectedValue2ControlId", "AddlUnitSecond2ControlId");
                                }                                
                                if (Result.IsSuccess == false) {
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Almond Allergen", "txtDetectionLimit3ControlId", "txtDetectedValue3ControlId", "AddlUnitSecond3ControlId");
                                }                                
                                if (Result.IsSuccess == false) {
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Peanut Allergen", "txtDetectionLimit4ControlId", "txtDetectedValue4ControlId", "AddlUnitSecond4ControlId");
                                }                                
                                if (Result.IsSuccess == false) {
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Gladin Allergen", "txtDetectionLimit5ControlId", "txtDetectedValue5ControlId", "AddlUnitSecond5ControlId");
                                }                                
                                if (Result.IsSuccess == false) {
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Mustard Allergen", "txtDetectionLimit6ControlId", "txtDetectedValue6ControlId", "AddlUnitSecond6ControlId");
                                }                                
                                if (Result.IsSuccess == false) {
                                    Result = ParameterTestedAllergenAnalysisValidation(Result, "Soy Allergen", "txtDetectionLimit7ControlId", "txtDetectedValue7ControlId", "AddlUnitSecond7ControlId");
                                }
                                //alert("Result :" + JSON.stringify(Result));
                                //if (Result.IsSuccess == true) {
                                //    if (oScope.NewDCModel["txtCriticalValue1ControlId"] == "" && oScope.NewDCModel["txtCriticalValue2ControlId"] == "" && oScope.NewDCModel["txtCriticalValue3ControlId"] == "" && oScope.NewDCModel["txtCriticalValue4ControlId"] == "" && oScope.NewDCModel["txtCriticalValue5ControlId"] == "" && oScope.NewDCModel["txtCriticalValue6ControlId"] == "" && oScope.NewDCModel["txtCriticalValue7ControlId"] == "") {
                                //        Result.ErrorMessage = "Parameter Tested";
                                //        Result.IsSuccess = false;
                                //    }
                                //}
                            }
                            else {
                                //alert("Parametere not selected");

                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }

                    }
                }
                else {
                    alert('Not Implemeted');
                }

            }
            IsSuccess = Result.IsSuccess;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SampleSheetAndWaterAnalysisValidation", Excep);
        }

    }

    var SampleSheetAndAllergenAnalysisCustomValidation = function () {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            var scope = oScope;
          
            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }
            if (scope.NewDCModel.DTDateofCollectionControlId == "" || scope.NewDCModel.DTDateofCollectionControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date Of Collection";
                IsSuccess = false;
            }
            //if (document.getElementById("DTTimeofCollectionControlId").value == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Time";
            //    IsSuccess = false;
            //}
            if (scope.NewDCModel.DTDateofAnalysisControlId == "" || scope.NewDCModel.DTDateofAnalysisControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date Of Analysis";
                IsSuccess = false;
            }
            if (scope.NewDCModel.DTDateofCompletionControlId == "" || scope.NewDCModel.DTDateofCompletionControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Completion";
                IsSuccess = false;
            }
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            //if (document.getElementById("DTTimeControlId").value == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Time";
            //    IsSuccess = false;
            //}
            //

            //if (IsSuccess == false) {
            //    alert(CommonMessage + " " + ErrorMessage);
            //}
            return IsSuccess;

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaputureBO.SampleSheetAndAllergenAnalysisCustomValidation", xlatService);
        }
    }

    //var ParameterTestedAllergenAnalysisValidation = function (ResultMessage, ParameterType, CriticalValue, UnitFirst, DetectionLimit, DetectedValue, UnitSecond, DeviatedValue, Evaluation) {
    //var ParameterTestedAllergenAnalysisValidation = function (ResultMessage, ParameterType, CriticalValue, UnitFirst, DetectionLimit, DetectedValue, UnitSecond, Evaluation) {
    var ParameterTestedAllergenAnalysisValidation = function (ResultMessage, ParameterType, DetectionLimit, DetectedValue, UnitSecond) {
        try {
            var IsSuccess = true;
            var ErrorMessage = "";
            ErrorMessage = ResultMessage.ErrorMessage;
            //*****************Change Request 05-10-2015-----All parameters are not tested at a time. It should not mandatory for all the parameter .Any one parameter test only is mandatory so below code commented*************
            //IsSuccess = ResultMessage.IsSuccess;
          
            //if (oScope.NewDCModel[CriticalValue] != "" || oScope[UnitFirst].GetSelectedText() != "" || oScope.NewDCModel[DetectionLimit] != "" || oScope.NewDCModel[DetectedValue] != "" || oScope[UnitSecond].GetSelectedText() != "" ||  oScope[Evaluation].GetSelectedText() != "") {
            if (oScope.NewDCModel[DetectionLimit] != "" || oScope[DetectedValue].GetSelectedText() != "" || oScope[UnitSecond].GetSelectedText() != "") {

                //if (oScope.NewDCModel[CriticalValue] == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + ParameterType + "-CriticalValue";
                //    IsSuccess = false;
                //}
                //if (oScope[UnitFirst].GetSelectedText() == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + ParameterType + "-Unit";
                //    IsSuccess = false;
                //}
                if (oScope.NewDCModel[DetectionLimit] == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-DetectionLimit";
                    IsSuccess = false;
                }
                
                if (oScope[DetectedValue].GetSelectedText() == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-DetectedValue";
                    IsSuccess = false;
                }
                if (oScope[UnitSecond].GetSelectedText() == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + ParameterType + "-Unit";
                    IsSuccess = false;
                }
                //if (oScope.NewDCModel[DeviatedValue] == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + ParameterType + "-DeviatedValue";
                //    IsSuccess = false;
                //}
                //if (oScope[Evaluation].GetSelectedText() == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + ParameterType + "-Evaluation";
                //    IsSuccess = false;
                //}
            }
            ResultMessage.ErrorMessage = ErrorMessage;
            ResultMessage.IsSuccess = IsSuccess;

            return ResultMessage;
        }
        catch (Excep) {
          // alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ParameterTestedAllergenAnalysisValidation", Excep);
        }


    }

    this.CookingAndBlastChillingEKFC1Validation = function (AryDcResultDetails,IsAlertMessageEnabled) {

        try {
            var IsSuccess = true;
            var AddlProductControlId = '';
            var AddlProductTypeControlId = '';

            //cooking
            var txtCoreTempControlId = '';
            var DTCookingTimeControlId ='';

            //bc
            var AddlBlastChillerNoControlId = '';

            //bcin
            var DTBlastChillerTimeInControlId = '';
            var ATBlastChillerTempInControlId = '';

            //bc out
            var DTBlastChillerTimeOutControlId ='';
            var ATBlastChillerTempOutControlId ='';


            //pre in
            var DTPreChillerTimeInControlId = '';
            var ATPreChillerTempInControlId = '';

            //pre out
            var DTPreChillerTimeOutControlId = '';
            var ATPreChillerTempOutControlId = '';

            var AddlAirlineControlId = '';
            var AddlFlightControlId = '';
            var AddlSectorControlId = '';
            var AddlFAndBControlId = '';
            if (AryDcResultDetails == undefined) {

                AddlProductControlId = oScope["AddlProductControlId"].GetSelectedText();
                AddlProductTypeControlId = oScope["AddlProductTypeControlId"].GetSelectedText();

                //cooking
                 txtCoreTempControlId = oScope.NewDCModel["txtCoreTempControlId"];
                //DTCookingTimeControlId = oScope["DTCookingTimeControlId_DateTime"];
                 DTCookingTimeControlId = oScope.NewDCModel["DTCookingTimeControlId"];

                //bc
                 AddlBlastChillerNoControlId = oScope["AddlBlastChillerNoControlId"].GetSelectedText();

                //bcin
                //DTBlastChillerTimeInControlId = oScope["DTBlastChillerTimeInControlId_DateTime"];
                 DTBlastChillerTimeInControlId = oScope.NewDCModel["DTBlastChillerTimeInControlId"];
                 ATBlastChillerTempInControlId = oScope.NewDCModel["ATBlastChillerTempInControlId"];

                //bc out
                //DTBlastChillerTimeOutControlId = oScope["DTBlastChillerTimeOutControlId_DateTime"];
                 DTBlastChillerTimeOutControlId = oScope.NewDCModel["DTBlastChillerTimeOutControlId"];
                 ATBlastChillerTempOutControlId = oScope.NewDCModel["ATBlastChillerTempOutControlId"];


                //pre in
                //DTPreChillerTimeInControlId = oScope["DTPreChillerTimeInControlId_DateTime"];
                 DTPreChillerTimeInControlId = oScope.NewDCModel["DTPreChillerTimeInControlId"];
                 ATPreChillerTempInControlId = oScope.NewDCModel["ATPreChillerTempInControlId"];

                //pre out
                //DTPreChillerTimeOutControlId = oScope["DTPreChillerTimeOutControlId_DateTime"];
                 DTPreChillerTimeOutControlId = oScope.NewDCModel["DTPreChillerTimeOutControlId"];
                 ATPreChillerTempOutControlId = oScope.NewDCModel["ATPreChillerTempOutControlId"];

                //AirLine
                 AddlAirlineControlId = oScope["AddlAirlineControlId"].GetSelectedText();
                //Flight
                 AddlFlightControlId = oScope["AddlFlightControlId"].GetSelectedText();
                //Sector
                 AddlSectorControlId = oScope["AddlSectorControlId"].GetSelectedText();
                //FandB
                 AddlFAndBControlId = oScope["AddlFAndBControlId"].GetSelectedText();
            }
            else {
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;
                    
                    if (AryDcResultDetails[itr2].ControlId == 'AddlProductControlId')
                        AddlProductControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlProductTypeControlId')
                        AddlProductTypeControlId = valueFromPage;

                    //cooking
                    if (AryDcResultDetails[itr2].ControlId == 'txtCoreTempControlId')
                        txtCoreTempControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'DTCookingTimeControlId')
                         DTCookingTimeControlId = valueFromPage;

                    //bc
                    if (AryDcResultDetails[itr2].ControlId == 'AddlBlastChillerNoControlId')
                        AddlBlastChillerNoControlId = valueFromPage;

                    //bcin
                    if (AryDcResultDetails[itr2].ControlId == 'DTBlastChillerTimeInControlId')
                        DTBlastChillerTimeInControlId = valueFromPage;
                    if (AryDcResultDetails[itr2].ControlId == 'ATBlastChillerTempInControlId')
                           ATBlastChillerTempInControlId = valueFromPage;

                    //bc out
                    if (AryDcResultDetails[itr2].ControlId == 'DTBlastChillerTimeOutControlId')
                        DTBlastChillerTimeOutControlId = valueFromPage;
                    if (AryDcResultDetails[itr2].ControlId == 'ATBlastChillerTempOutControlId')
                         ATBlastChillerTempOutControlId = valueFromPage;


                    //pre in
                    if (AryDcResultDetails[itr2].ControlId == 'DTPreChillerTimeInControlId')
                        DTPreChillerTimeInControlId = valueFromPage;
                    if (AryDcResultDetails[itr2].ControlId == 'ATPreChillerTempInControlId')
                      ATPreChillerTempInControlId = valueFromPage;

                    //pre out
                    if (AryDcResultDetails[itr2].ControlId == 'DTPreChillerTimeOutControlId')
                        DTPreChillerTimeOutControlId = valueFromPage;
                    if (AryDcResultDetails[itr2].ControlId == 'ATPreChillerTempOutControlId')
                        ATPreChillerTempOutControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlAirlineControlId')
                        AddlAirlineControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlFlightControlId')
                        AddlFlightControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlSectorControlId')
                        AddlSectorControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlFAndBControlId')
                        AddlFAndBControlId = valueFromPage;
                }
            }

            var IsSuccess = true;
            var finalMesg = '';


            if (AddlProductControlId == '') {
                finalMesg = finalMesg + ' ,Product';
                IsSuccess = false;
            }

            if (AddlProductTypeControlId == '') {
                finalMesg = finalMesg + ' ,ProductType';
                IsSuccess = false;
            }

            if ((AddlAirlineControlId == '' || AddlAirlineControlId == undefined) && (AddlFlightControlId == '' || AddlFlightControlId == undefined) && (AddlSectorControlId == '' || AddlSectorControlId == undefined) && (AddlFAndBControlId == '' || AddlFAndBControlId == undefined)) {
                finalMesg = finalMesg + ' ,Sector / Airline / Flight / F&B & Other';
                IsSuccess = false;
            }

            //cooking
            if (txtCoreTempControlId == '') {
                finalMesg = finalMesg + ' ,Cooking Temp';
                IsSuccess = false;
            }



            if (DTCookingTimeControlId == '' || DTCookingTimeControlId == undefined) {
                finalMesg = finalMesg + ' ,Cooking Time';
                IsSuccess = false;
            }

            //bc
            //if prein and preout entered,BC No is not mandatory
            if (AddlBlastChillerNoControlId == '' &&  (ATBlastChillerTempInControlId != '' || ATBlastChillerTempOutControlId !='')) {
                finalMesg = finalMesg + ' ,Blast chiller Number';
                IsSuccess = false;
            }

            ////bc in 
            ////if prein and preout entered,BC in is not mandatory
            //if (DTBlastChillerTimeInControlId == '' && DTPreChillerTimeInControlId == '' && DTPreChillerTimeInControlId == '' ) {
            //    finalMesg = finalMesg + ' ,Blast chiller Time in / Pre Chiller Time in';
            //    IsSuccess = false;
            //}

            //if prein and preout entered,BC in is not mandatory
            if (ATBlastChillerTempInControlId == '' && ATPreChillerTempInControlId == ''  ) {
                finalMesg = finalMesg + ' ,Blast chiller Temp in / Pre chiller Temp in';
                IsSuccess = false;
            }
            else if (ATBlastChillerTempOutControlId != '' && ATBlastChillerTempInControlId=='') {
                {
                    finalMesg = finalMesg + ' ,Blast chiller Temp in';
                    IsSuccess = false;
                }
            }

            //if prein and preout entered,BC in is not mandatory
            if ((DTBlastChillerTimeInControlId == '' || DTBlastChillerTimeInControlId == undefined) && (DTPreChillerTimeInControlId == '' || DTPreChillerTimeInControlId == undefined)) {
                finalMesg = finalMesg + ' ,Blast chiller Time in / Pre Chiller Time in';
                IsSuccess = false;
            }
            else if ((DTBlastChillerTimeOutControlId != '') && (DTBlastChillerTimeInControlId == '' || DTBlastChillerTimeInControlId == undefined)) {
                {
                    finalMesg = finalMesg + ' ,Blast chiller Time in';
                    IsSuccess = false;
                }
            }


            ////if prein and preout entered,BC in is not mandatory
            //if (ATBlastChillerTempInControlId == '' && ATPreChillerTempInControlId == '') {
            //    finalMesg = finalMesg + ' ,Blast chiller Temp in / Pre chiller Temp in';
            //    IsSuccess = false;
            //}
            //else if (ATBlastChillerTempOutControlId != '' && ATBlastChillerTempInControlId == '') {
            //    {
            //        finalMesg = finalMesg + ' ,Blast chiller Temp in';
            //        IsSuccess = false;
            //    }
            //}


            //bc out 
            //if prein and preout entered,BC out is not mandatory
            //if (DTBlastChillerTimeOutControlId == '' && DTPreChillerTimeOutControlId == '') {
            //    finalMesg = finalMesg + ' ,Blast chiller Time Out / Pre chiller Time out';
            //    IsSuccess = false;
            //}
            //if prein and preout entered,BC out is not mandatory

            if (ATBlastChillerTempOutControlId == '' && ATPreChillerTempOutControlId == '' && ATBlastChillerTempInControlId == '') {
                finalMesg = finalMesg + ' ,Blast chiller Temp Out / Pre chiller Temp out';
                IsSuccess = false;
            }
            else if (ATBlastChillerTempOutControlId == '' && ATBlastChillerTempInControlId != '') {
                {
                    finalMesg = finalMesg + ' ,Blast chiller Temp out';
                    IsSuccess = false;
                }
            }
            

            //alert('DTBlastChillerTimeOutControlId :' + DTBlastChillerTimeOutControlId);
            //alert('DTPreChillerTimeOutControlId :' + DTPreChillerTimeOutControlId);
            //alert('DTBlastChillerTimeInControlId : ' + DTBlastChillerTimeInControlId);
         


            if ((DTBlastChillerTimeOutControlId == '' || DTBlastChillerTimeOutControlId == undefined) && (DTPreChillerTimeOutControlId == '' || DTPreChillerTimeOutControlId == undefined) && (DTBlastChillerTimeInControlId == '' || DTBlastChillerTimeInControlId == undefined)) {
                finalMesg = finalMesg + ' ,Blast chiller Time Out / Pre chiller Time out';
                IsSuccess = false;
            }
            else {
                if (DTBlastChillerTimeOutControlId == '' && DTBlastChillerTimeInControlId != '') {
                    {
                        finalMesg = finalMesg + ' ,Blast chiller Time out';
                        IsSuccess = false;
                    }
                }
                if (ATPreChillerTempOutControlId != '' && DTPreChillerTimeOutControlId=='') {
                    finalMesg = finalMesg + ' ,Pre chiller Time out';
                    IsSuccess = false;
                }
            }


            ////pre in
            ////
            //if (DTPreChillerTimeInControlId == '' && ATBlastChillerTempInControlId =='') {
            //    finalMesg = finalMesg + ' ,Pre chiller Time in';
            //    IsSuccess = false;
            //}
            //if (ATPreChillerTempInControlId == '' && ATBlastChillerTempInControlId == '') {
            //    finalMesg = finalMesg + ' ,Pre chiller Temp in';
            //    IsSuccess = false;
            //}


            ////pre in
            //if (DTPreChillerTimeOutControlId == '' && ATBlastChillerTempOutControlId=='') {
            //    finalMesg = finalMesg + ' ,Pre chiller Time out';
            //    IsSuccess = false;
            //}
            //if (ATPreChillerTempOutControlId == '' && ATBlastChillerTempOutControlId == '') {
            //    finalMesg = finalMesg + ' ,Pre chiller Temp Out';
            //    IsSuccess = false;
            //}

            if (IsSuccess == false && IsAlertMessageEnabled==true) {
                finalMesg = finalMesg.substring(2)
                finalMesg = 'MN-RQ-CBM-002 :: Please enter ' + finalMesg;
                alert(finalMesg);
            }
           
            return IsSuccess;
        }
        catch (Excep) {
           // alert('CookingAndBlastChillingEKFC1Validation' + Excep + JSON.stringify(Excep))
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CookingAndBlastChillingEKFC1Validation", Excep);
        }
    }

    this.GoodReceivingMandatoryValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {
          
            var IsSuccess = true;
            var finalMesg = "";

            var AddlPurchaseOrderNoControlId = '';
            var AddlProductControlId = '';            
            var AddlSupplierControlId = '';
            var chkGoodsType = '';           
            var AddlReceivingUnitControlId = '';           
            var ATSurfaceTempControlId = '';
            var DTTimeControlId = '';            
            var chkPestSignToggle = '';
            var chkPackagingIntegrity = '';           
            var chkRefStatus = '';
            var ATTruckTempControlId = '';            
            var chkTruckStripCurtains = '';
            var chkTruckCleanliness = '';
            var chkVehicleApprovalTag = '';
            var chkDeliveryStaffHairBeardNets = '';
            var chkDeliveryStaffUniformCondition = '';
            var chkProductStatus = '';

            var chkProductionDateMode = '';
            var DTDATEControlId = '';
            var PdDateMonthAndYearControlId = ''

            var chkExpiryDateMode = '';
            var EXDATEControlId = '';
            var EXUsedBeforeControlId = '';
            var EXDateUsedByMonthAndYearControlId = '';

           
            var chkFrozenType = '';
            var txtApprovalTagNo = '';
            var txtSNCNo = '';
                      

            if (AryDcResultDetails == undefined) {
                AddlPurchaseOrderNoControlId = oScope["AddlPurchaseOrderNoControlId"].GetSelectedText();
                AddlProductControlId = oScope["AddlProductControlId"].GetSelectedText();
                AddlSupplierControlId = oScope["AddlSupplierControlId"].GetSelectedText();

                chkGoodsType = oScope["chkGoodsType"].GetSelectedValue();

                AddlReceivingUnitControlId = oScope["AddlReceivingUnitControlId"].GetSelectedText();

                ATSurfaceTempControlId = oScope.NewDCModel["ATSurfaceTempControlId"];
                DTTimeControlId = oScope["DTTimeControlId_DateTime"];

                chkPestSignToggle = oScope["chkPestSignToggle"].GetSelectedValue();
                chkPackagingIntegrity = oScope["chkPackagingIntegrity"].GetSelectedValue();
                chkRefStatus = oScope["chkRefStatus"].GetSelectedValue();

                ATTruckTempControlId = oScope.NewDCModel["ATTruckTempControlId"];

                chkTruckStripCurtains = oScope["chkTruckStripCurtains"].GetSelectedValue();
                chkTruckCleanliness = oScope["chkTruckCleanliness"].GetSelectedValue();
                chkVehicleApprovalTag = oScope["chkVehicleApprovalTag"].GetSelectedValue();
                chkDeliveryStaffHairBeardNets = oScope["chkDeliveryStaffHairBeardNets"].GetSelectedValue();
                chkDeliveryStaffUniformCondition = oScope["chkDeliveryStaffUniformCondition"].GetSelectedValue();
                chkProductStatus = oScope["chkProductStatus"].GetSelectedValue();

                chkProductionDateMode = oScope["chkProductionDateMode"].GetSelectedValue();
                DTDATEControlId = oScope.NewDCModel["DTDATEControlId"];
                PdDateMonthAndYearControlId = oScope.NewDCModel["PdDateMonthAndYearControlId"];

                chkExpiryDateMode = oScope["chkExpiryDateMode"].GetSelectedValue();
                EXDATEControlId = oScope.NewDCModel["EXDATEControlId"];
                EXDateUsedByMonthAndYearControlId = oScope.NewDCModel["EXDateUsedByMonthAndYearControlId"];
                EXUsedBeforeControlId = oScope.NewDCModel["EXUsedBeforeControlId"];

                chkFrozenType = oScope["chkFrozenType"].GetSelectedValue();
                txtApprovalTagNo = oScope.NewDCModel["txtApprovalTagNo"];
                txtSNCNo = oScope.NewDCModel["txtSNCNo"];

              
            }

            else {
              
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlPurchaseOrderNoControlId')
                        AddlPurchaseOrderNoControlId = AryDcResultDetails[itr2].AnswerValue;

                    else if (AryDcResultDetails[itr2].ControlId == 'AddlProductControlId')
                        AddlProductControlId = AryDcResultDetails[itr2].AnswerValue;

                    else if (AryDcResultDetails[itr2].ControlId == 'AddlSupplierControlId')
                        AddlSupplierControlId = AryDcResultDetails[itr2].AnswerValue;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkGoodsType')
                        chkGoodsType = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'AddlReceivingUnitControlId')
                        AddlReceivingUnitControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'ATSurfaceTempControlId')
                        ATSurfaceTempControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'DTTimeControlId')
                        DTTimeControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkPestSignToggle')
                        chkPestSignToggle = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkPackagingIntegrity')
                        chkPackagingIntegrity = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkRefStatus')
                        chkRefStatus = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'ATTruckTempControlId')
                        ATTruckTempControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkTruckStripCurtains')
                        chkTruckStripCurtains = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkTruckCleanliness')
                        chkTruckCleanliness = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkVehicleApprovalTag')
                        chkVehicleApprovalTag = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkDeliveryStaffHairBeardNets')
                        chkDeliveryStaffHairBeardNets = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkDeliveryStaffUniformCondition')
                        chkDeliveryStaffUniformCondition = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkProductStatus')
                        chkProductStatus = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkProductionDateMode')
                        chkProductionDateMode = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'DTDATEControlId')
                        DTDATEControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'PdDateMonthAndYearControlId')
                        PdDateMonthAndYearControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkExpiryDateMode')
                        chkExpiryDateMode = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'EXDATEControlId')
                        EXDATEControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'EXDateUsedByMonthAndYearControlId')
                        EXDateUsedByMonthAndYearControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'EXUsedBeforeControlId')
                        EXUsedBeforeControlId = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'chkFrozenType')
                        chkFrozenType = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'txtApprovalTagNo')
                        txtApprovalTagNo = valueFromPage;

                    else if (AryDcResultDetails[itr2].ControlId == 'txtSNCNo')
                        txtSNCNo = valueFromPage;                  
                }

            }

            //Checking mandatory data
            if (AddlPurchaseOrderNoControlId == '') {
                finalMesg = finalMesg + ' ,Purchase Order No.';
                IsSuccess = false;
            }

            if (AddlProductControlId == '') {
                finalMesg = finalMesg + ' ,Product';
                IsSuccess = false;
            }
            if (AddlSupplierControlId == '') {
                finalMesg = finalMesg + ' ,Supplier';
                IsSuccess = false;
            }

            if (chkGoodsType == '') {
                finalMesg = finalMesg + ' ,Goods Type';
                IsSuccess = false;
            }
            else if (chkGoodsType == 4 && chkFrozenType == '') {
                finalMesg = finalMesg + ' ,Frozen State';
                IsSuccess = false;                
            }

            if (AddlReceivingUnitControlId == '') {
                finalMesg = finalMesg + ' ,Receiving Unit';
                IsSuccess = false;
            }

            if (ATSurfaceTempControlId == '') {
                finalMesg = finalMesg + ' ,Surface Temp';
                IsSuccess = false;
            }

            if (DTTimeControlId == '') {
                finalMesg = finalMesg + ' ,Time';
                IsSuccess = false;
            }

            if (chkPestSignToggle == '') {
                finalMesg = finalMesg + ' ,Pest Sign';
                IsSuccess = false;
            }

            if (chkPackagingIntegrity == '') {
                finalMesg = finalMesg + ' ,Packaging Integrity';
                IsSuccess = false;
            }

            if (chkRefStatus == '') {
                finalMesg = finalMesg + ' ,Refrigerator Status';
                IsSuccess = false;
            }
            if (ATTruckTempControlId == '') {
                finalMesg = finalMesg + ' ,Truck Temp';
                IsSuccess = false;
            }
            if (chkTruckStripCurtains == '') {
                finalMesg = finalMesg + ' ,Truck Strip Curtains';
                IsSuccess = false;
            }
            if (chkTruckCleanliness == '') {
                finalMesg = finalMesg + ' ,Truck Cleanliness';
                IsSuccess = false;
            }
            if (chkVehicleApprovalTag == '') {
                finalMesg = finalMesg + ' ,DM Vehicle Approval Tag';
                IsSuccess = false;
            }
            else if (chkVehicleApprovalTag == 1 && txtApprovalTagNo == '') {               
                finalMesg = finalMesg + ' ,Approval Tag No';
                IsSuccess = false;
            }
            if (chkDeliveryStaffHairBeardNets == '') {
                finalMesg = finalMesg + ' ,Delivery Staff`s Hair Beard Nets';
                IsSuccess = false;
            }
            if (chkDeliveryStaffUniformCondition == '') {
                finalMesg = finalMesg + ' ,Delivery Staff`s Uniform Condition';
                IsSuccess = false;
            }
            if (chkProductStatus == '') {
                finalMesg = finalMesg + ' ,Product Status';
                IsSuccess = false;
            }
            else if (chkProductStatus == 22 && txtSNCNo == '') {
                finalMesg = finalMesg + ' ,SNC No';
                IsSuccess = false;
            }
            if (chkProductionDateMode == '' && chkExpiryDateMode == '') {
                //alert(chkProductionDateMode);
                finalMesg = finalMesg + ' ,Production Date Mode';
                IsSuccess = false;
            }
            else if (chkProductionDateMode == 55 && DTDATEControlId == "") {
                //alert(chkProductionDateMode);
                finalMesg = finalMesg + ' ,Production Date';
                IsSuccess = false;
            }

            else if (chkProductionDateMode == 56 && PdDateMonthAndYearControlId == "") {
                //alert(chkProductionDateMode);
                finalMesg = finalMesg + ' ,Production Month & Year';
                IsSuccess = false;
            }
            if (chkExpiryDateMode == '' && chkProductionDateMode == '' && chkProductionDateMode == '') {
                //alert(chkExpiryDateMode);
                finalMesg = finalMesg + ' /Expiry Date Mode';
                IsSuccess = false;
            }
            else if (chkExpiryDateMode == 57 && EXDATEControlId == "") {
               // alert(chkExpiryDateMode);
                finalMesg = finalMesg + " ,Expiry Date";
                IsSuccess = false;
            }

            else if (chkExpiryDateMode == 58 && EXDateUsedByMonthAndYearControlId == "") {
               // alert(chkExpiryDateMode);
                finalMesg = finalMesg + " ,Use By";
                IsSuccess = false;
            }

            else if (chkExpiryDateMode == 59 && EXUsedBeforeControlId == "") {
                //alert(chkExpiryDateMode);
                finalMesg = finalMesg + " ,Use Before";
                IsSuccess = false;
            }
           
            
            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                finalMesg = finalMesg.substring(2)
                finalMesg = 'MN-RQ-CBM-002 :: Please enter ' + finalMesg;            
                alert(finalMesg);
            }
           
            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GoodsReceivingVallidation", Excep);
        }
    }

    var PotTrolleyDishwashVallidationOLD = function () {
        try {          
            var TestType = oScope["chkTestType"].GetSelectedValue();
            var ThermoLabel = oScope["chkThermoLabel"].GetSelectedValue();
            var QuadTest = oScope.NewDCModel["txtQuadTestControlId"];
            var ChlorineTest = oScope.NewDCModel["txtChlorineTestControlId"];

            var WashType = oScope["chkWashType"].GetSelectedValue();
            var PotMachineNo = oScope.AddlPotMachineControlId.GetSelectedText();
            var TrolleyMachineNo = oScope.AddlTrolleyMachineControlId.GetSelectedText();
            var DishwashMachineNo = oScope.AddlDishwashMachineControlId.GetSelectedText();

            var TrolleyMachine = scope["AddlTrolleyMachineControlId"].GetSelectedText();
            var DishwashMachine = scope["AddlDishwashMachineControlId"].GetSelectedText();
            var WashType = oScope["chkWashType"].GetSelectedValue();
            
            var IsSuccess = true;

            //alert('TestType :' + TestType + ', ThermoLabel :' + ThermoLabel + ', QuadTest :' + QuadTest + ', ChlorineTest :' + ChlorineTest);
            // alert('ThermoLabel :' + ThermoLabel + ", WashType :" + WashType + ", TrolleyMachine :" + TrolleyMachine + ", DishwashMachine :" + DishwashMachine);

            //Thermo
            if (TestType == 63) {
                if (ThermoLabel == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-002 :: Please select ThermoLabel", ['OK'], "");
                }

                else if (DcPlaceId !=3 && ThermoLabel == 67 && (WashType == 60 || (WashType == 61 && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (1)" && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (2)") || (WashType == 62 && DishwashMachine != "HOBART   CR 1" && DishwashMachine != "HOBART   TC 1" && DishwashMachine != "HOBART   C 10")) && QuadTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-003 :: Please select QuadTest", ['OK'], "");
                }
                //else if (ThermoLabel == 67 && QuadTest == '') {
                //    IsSuccess = false;
                //    alert("MN-RQ-DPT-003 :: Please select QuadTest");
                //}
            }

            //Quad
            else if (TestType == 64) {
                if (QuadTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-003 :: Please select QuadTest", ['OK'], "");
                }
            }

             //ChlorineTest
            else if (TestType == 64) {
                if (ChlorineTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-004 :: Please select ChlorineTest", ['OK'], "");
                }
            }


            if (WashType == 60 && PotMachineNo == '' ){
                IsSuccess = false;
                navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
            }

            else if (WashType == 61 && TrolleyMachineNo == '') {
                IsSuccess = false;
                navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
            }
            else if (WashType == 62 && DishwashMachineNo == '') {
                IsSuccess = false;
                navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
            }


            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PotTrolleyDishwashVallidation", Excep);
        }
    }


    var PotTrolleyDishwashVallidation = function () {
        try {
            var TestType = oScope["chkTestType"].GetSelectedValue();
            var ThermoLabel = oScope["chkThermoLabel"].GetSelectedValue();
            var QuadTest = oScope.NewDCModel["txtQuadTestControlId"];
            var ChlorineTest = oScope.NewDCModel["txtChlorineTestControlId"];

            var WashType = oScope["chkWashType"].GetSelectedValue();
            var PotMachineNo = oScope.AddlPotMachineControlId.GetSelectedText();
            var TrolleyMachineNo = oScope.AddlTrolleyMachineControlId.GetSelectedText();
            var DishwashMachineNo = oScope.AddlDishwashMachineControlId.GetSelectedText();

            var TrolleyMachine = scope["AddlTrolleyMachineControlId"].GetSelectedText();
            var DishwashMachine = scope["AddlDishwashMachineControlId"].GetSelectedText();
            var WashType = oScope["chkWashType"].GetSelectedValue();

            var IsSuccess = true;

            //alert('TestType :' + TestType + ', ThermoLabel :' + ThermoLabel + ', QuadTest :' + QuadTest + ', ChlorineTest :' + ChlorineTest);
            // alert('ThermoLabel :' + ThermoLabel + ", WashType :" + WashType + ", TrolleyMachine :" + TrolleyMachine + ", DishwashMachine :" + DishwashMachine);

           // alert('oScope.NewDCModel["DTTimeControlId"] : ' + oScope.NewDCModel["DTTimeControlId"])
            //Thermo
            if (TestType == 63) {
                if (ThermoLabel == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-002 :: Please select ThermoLabel", ['OK'], "");
                }

                //else if (DcPlaceId != 3 && ThermoLabel == 67 && (WashType == 60 || (WashType == 61 && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (1)" && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (2)") || (WashType == 62 && DishwashMachine != "HOBART   CR 1" && DishwashMachine != "HOBART   TC 1" && DishwashMachine != "HOBART   C 10")) && QuadTest == '') {
                else if (DcPlaceId != 3 && ThermoLabel == 67 && ((WashType == 61 && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (1)" && TrolleyMachine != "COLD KITCHEN TROLLEY WASH (2)") || (WashType == 62 && DishwashMachine != "HOBART   CR 1" && DishwashMachine != "HOBART   TC 1" && DishwashMachine != "HOBART   C 10")) && QuadTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-003 :: Please select QuadTest", ['OK'], "");
                }
                //else if (ThermoLabel == 67 && QuadTest == '') {
                //    IsSuccess = false;
                //    alert("MN-RQ-DPT-003 :: Please select QuadTest");
                //}
            }

                //Quad
            else if (TestType == 64) {
                if (QuadTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-003 :: Please select QuadTest", ['OK'], "");
                }
            }

                //ChlorineTest
            else if (TestType == 65) {
                if (ChlorineTest == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-004 :: Please select ChlorineTest", ['OK'], "");
                }
            }


            if (WashType == 60){
                if (TestType == '' && PotMachineNo == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Test Type and Machine No.", ['OK'], "");
                }

                else if (PotMachineNo == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
                }

                else if (TestType == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Test Type", ['OK'], "");
                }
            }

            else if (WashType == 61 && TrolleyMachineNo == '') {
                IsSuccess = false;
                navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
            }
            else if (WashType == 62){
                if (TestType == '' && DishwashMachineNo == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Test Type and Machine No.", ['OK'], "");
                }
                else if (TestType == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Test Type", ['OK'], "");
                }
                else if (DishwashMachineNo == '') {
                    IsSuccess = false;
                    navigator.notification.alert("MN-RQ-DPT-005 :: Please select Machine No.", ['OK'], "");
                }
            }


            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PotTrolleyDishwashVallidation", Excep);
        }
    }

    var AirlineComplaintSampleVallidation = function (IsAlertMessageEnabled) {

        try {

            var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();
            var oSampleSource = oScope["chkSampleSourceControlId"].GetSelectedValue();


            var IsSuccess = true;
            var ErrorMessage = "";
            var CommonMessage = "MN-RQ-SPA-001 :: Please enter ";
            if (oSourceofForeignObject == 165) {//Others
                if (scope.NewDCModel.txtOthersControlId == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Others";
                    IsSuccess = false;
                }              
            }
            if ((oSampleSource == 167)&&(scope.NewDCModel.txtForwardingtoCPDControlId == "")) {//Supplier
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Forwarding to CPD Carried Outby";
                IsSuccess = false;
            }
            if ((oSampleSource == 168) && (scope.NewDCModel.txtFrwdFoodPointControlId == "")) {//Food Point
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Forwarding t oFoodPoint carried Outby";
                IsSuccess = false;
            }
            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }
           
            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CurrentStockofLaboratoryMediaVallidation", Excep);
        }
    }


    var DispatchingTemperatureVallidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();
            //var oSampleSource = oScope["chkSampleSourceControlId"].GetSelectedValue();


            var IsSuccess = true;
            var ErrorMessage = "";

            var CommonMessage = "MN-RQ-TVD-001 :: Please enter ";







            var Meal = "";
            var ItemNo = "";
            var Sector = "";
            var Flight = "";
            var Airline = "";
            var Class = "";
            var ETA = "";
            var ETD = "";
            var DispatchTemp = "";
            var DispatchTime = "";
            var HiLoaderTemp = "";
            var HiLoaderNo = "";
            var TimeofLoading = "";
            var TimeofMoving = "";
            
            //var scope = $scope;

            if (AryDcResultDetails == undefined) {

                //alert('scope.NewDCModel' + scope.NewDCModel);

                if ((document.getElementById("txtTimeofLoadingControlId") != null)) {
                    TimeofLoading = document.getElementById("txtTimeofLoadingControlId").value;

                }
                if ((document.getElementById("DTTimeofMovingControlId") != null)) {
                    TimeofMoving = document.getElementById("DTTimeofMovingControlId").value;

                }
                if ((document.getElementById("DTDispatchTimeControlId") != null)) {
                    DispatchTime = document.getElementById("DTDispatchTimeControlId").value;

                }

                if ((scope.NewDCModel.TxtFCOTypeControlId == "") || (scope.NewDCModel.TxtFCOTypeControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Item No. ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.MealControlId == "") || (scope.NewDCModel.MealControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Meal ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlSectorControlId == "") || (scope.NewDCModel.AddlSectorControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Sector ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlFlightControlId == "") || (scope.NewDCModel.AddlFlightControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Flight ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlAirlineControlId == "") || (scope.NewDCModel.AddlAirlineControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Airline ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.txtClassControlId == "") || (scope.NewDCModel.txtClassControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Class ";
                    IsSuccess = false;
                }

                //if ((scope.NewDCModel.DTETAControlId == "") || (scope.NewDCModel.DTETAControlId == undefined)) {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + "EDD ";
                //    IsSuccess = false;
                //}

                if ((scope.NewDCModel.DTETDControlId == "") || (scope.NewDCModel.DTETDControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ETD ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.ATDispatchTempControlId == "") || (scope.NewDCModel.ATDispatchTempControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Temp ";
                    IsSuccess = false;
                }
                if ((DispatchTime == "") || (DispatchTime == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Time ";
                    IsSuccess = false;
                }



                if ((((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofLoading != "") || (TimeofMoving != "")) && ((scope.NewDCModel.txtHiLoaderNoControlId == "") || (scope.NewDCModel.txtHiLoaderNoControlId == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Number ";
                    IsSuccess = false;
                }

                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || (TimeofLoading != "") || (TimeofMoving != "")) && ((scope.NewDCModel.ATHiLoaderTempControlId == "") || (scope.NewDCModel.ATHiLoaderTempControlId == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Temp ";
                    IsSuccess = false;
                }

                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || ((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofMoving != "")) && ((TimeofLoading == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Loading ";
                    IsSuccess = false;
                }
                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || ((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofLoading != "")) && ((TimeofMoving == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Moving ";
                    IsSuccess = false;
                }
            }
            else {
                //alert('AryDcResultDetails')
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'MealControlId')
                        Meal = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'TxtFCOTypeControlId')
                        ItemNo = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlSectorControlId')
                        Sector = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlFlightControlId')
                        Flight = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlAirlineControlId')
                        Airline = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'txtClassControlId')
                        Class = valueFromPage;

                    //if (AryDcResultDetails[itr2].ControlId == 'DTETAControlId')
                    //    ETA = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'DTETDControlId')
                        ETD = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'ATDispatchTempControlId')
                        DispatchTemp = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'DTDispatchTimeControlId')
                        DispatchTime = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'ATHiLoaderTempControlId')
                        HiLoaderTemp = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'txtHiLoaderNoControlId')
                        HiLoaderNo = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'txtTimeofLoadingControlId')
                        TimeofLoading = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'DTTimeofMovingControlId')
                        TimeofMoving = valueFromPage;

                }

                if (Meal == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Meal ";
                    IsSuccess = false;
                }

                if (ItemNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Item No. ";
                    IsSuccess = false;
                }

                if (Sector == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Sector ";
                    IsSuccess = false;
                }

                if (Flight == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Flight ";
                    IsSuccess = false;
                }

                if (Airline == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Airline ";
                    IsSuccess = false;
                }

                if (Class == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Class ";
                    IsSuccess = false;
                }

                //if (ETA == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + "EDD ";
                //    IsSuccess = false;
                //}

                if (ETD == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ETD ";
                    IsSuccess = false;
                }

                if (DispatchTemp == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Temp ";
                    IsSuccess = false;
                }
                if (DispatchTime == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Time ";
                    IsSuccess = false;
                }
                if (((HiLoaderTemp != "") || (TimeofLoading != "") || (TimeofMoving != "")) && ((HiLoaderNo == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Number ";
                    IsSuccess = false;
                }

                if ((((HiLoaderNo != "")) || (TimeofLoading != "") || (TimeofMoving != "")) && ((HiLoaderTemp == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Temp ";
                    IsSuccess = false;
                }

                if ((((HiLoaderNo != "")) || ((HiLoaderTemp != "")) || (TimeofMoving != "")) && ((TimeofLoading == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Loading ";
                    IsSuccess = false;
                }
                if ((((HiLoaderNo != "")) || ((HiLoaderTemp != "")) || (TimeofLoading != "")) && ((TimeofMoving == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Moving ";
                    IsSuccess = false;
                }


            }


            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }



            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DispatchingTemperatureVallidation", Excep);
        }
    }

    var NewDispatchingTemperatureVallidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();
            //var oSampleSource = oScope["chkSampleSourceControlId"].GetSelectedValue();


            var IsSuccess = true;
            var ErrorMessage = "";

            var CommonMessage = "MN-RQ-TVD-001 :: Please enter ";







            var Meal = "";
            var ItemNo = "";
            var Sector = "";
            var Flight = "";
            var Airline = "";
            var Class = "";
            var ETA = "";
            var ETD = "";
            var DispatchTemp = "";
            var DispatchTime = "";
            var HiLoaderTemp = "";
            var HiLoaderNo = "";
            var TimeofLoading = "";
            var TimeofMoving = "";

            //var scope = $scope;

            if (AryDcResultDetails == undefined) {

                //alert('scope.NewDCModel' + scope.NewDCModel);

                if ((document.getElementById("txtTimeofLoadingControlId") != null)) {
                    TimeofLoading = document.getElementById("txtTimeofLoadingControlId").value;

                }
                if ((document.getElementById("DTTimeofMovingControlId") != null)) {
                    TimeofMoving = document.getElementById("DTTimeofMovingControlId").value;

                }
                if ((document.getElementById("DTDispatchTimeControlId") != null)) {
                    DispatchTime = document.getElementById("DTDispatchTimeControlId").value;

                }

                if ((scope.NewDCModel.TxtFCOTypeControlId == "") || (scope.NewDCModel.TxtFCOTypeControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Item No. ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.MealControlId == "") || (scope.NewDCModel.MealControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Meal ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlSectorControlId == "") || (scope.NewDCModel.AddlSectorControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Sector ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlFlightControlId == "") || (scope.NewDCModel.AddlFlightControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Flight ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.AddlAirlineControlId == "") || (scope.NewDCModel.AddlAirlineControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Airline ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.txtClassControlId == "") || (scope.NewDCModel.txtClassControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Class ";
                    IsSuccess = false;
                }

                //if ((scope.NewDCModel.DTETAControlId == "") || (scope.NewDCModel.DTETAControlId == undefined)) {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + "EDD ";
                //    IsSuccess = false;
                //}

                if ((scope.NewDCModel.DTETDControlId == "") || (scope.NewDCModel.DTETDControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ETD ";
                    IsSuccess = false;
                }

                if ((scope.NewDCModel.ATDispatchTempControlId == "") || (scope.NewDCModel.ATDispatchTempControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Temp ";
                    IsSuccess = false;
                }
                if ((DispatchTime == "") || (DispatchTime == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Time ";
                    IsSuccess = false;
                }



                if ((((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofLoading != "") || (TimeofMoving != "")) && ((scope.NewDCModel.txtHiLoaderNoControlId == "") || (scope.NewDCModel.txtHiLoaderNoControlId == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Number ";
                    IsSuccess = false;
                }

                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || (TimeofLoading != "") || (TimeofMoving != "")) && ((scope.NewDCModel.ATHiLoaderTempControlId == "") || (scope.NewDCModel.ATHiLoaderTempControlId == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Temp ";
                    IsSuccess = false;
                }

                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || ((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofMoving != "")) && ((TimeofLoading == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Loading ";
                    IsSuccess = false;
                }
                if ((((scope.NewDCModel.txtHiLoaderNoControlId != "") && (scope.NewDCModel.txtHiLoaderNoControlId != undefined)) || ((scope.NewDCModel.ATHiLoaderTempControlId != "") && (scope.NewDCModel.ATHiLoaderTempControlId != undefined)) || (TimeofLoading != "")) && ((TimeofMoving == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Moving ";
                    IsSuccess = false;
                }
            }
            else {
                //alert('AryDcResultDetails')
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'MealControlId')
                        Meal = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'TxtFCOTypeControlId')
                        ItemNo = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlSectorControlId')
                        Sector = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlFlightControlId')
                        Flight = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlAirlineControlId')
                        Airline = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'txtClassControlId')
                        Class = valueFromPage;

                    //if (AryDcResultDetails[itr2].ControlId == 'DTETAControlId')
                    //    ETA = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'DTETDControlId')
                        ETD = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'ATDispatchTempControlId')
                        DispatchTemp = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'DTDispatchTimeControlId')
                        DispatchTime = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'ATHiLoaderTempControlId')
                        HiLoaderTemp = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'txtHiLoaderNoControlId')
                        HiLoaderNo = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'txtTimeofLoadingControlId')
                        TimeofLoading = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'DTTimeofMovingControlId')
                        TimeofMoving = valueFromPage;

                }

                if (Meal == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Meal ";
                    IsSuccess = false;
                }

                if (ItemNo == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Item No. ";
                    IsSuccess = false;
                }

                if (Sector == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Sector ";
                    IsSuccess = false;
                }

                if (Flight == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Flight ";
                    IsSuccess = false;
                }

                if (Airline == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Airline ";
                    IsSuccess = false;
                }

                if (Class == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Class ";
                    IsSuccess = false;
                }

                //if (ETA == "") {
                //    if (ErrorMessage != "") {
                //        ErrorMessage = ErrorMessage + ",";
                //    }
                //    ErrorMessage = ErrorMessage + "EDD ";
                //    IsSuccess = false;
                //}

                if (ETD == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ETD ";
                    IsSuccess = false;
                }

                if (DispatchTemp == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Temp ";
                    IsSuccess = false;
                }
                if (DispatchTime == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Dispatch Time ";
                    IsSuccess = false;
                }
                if (((HiLoaderTemp != "") || (TimeofLoading != "") || (TimeofMoving != "")) && ((HiLoaderNo == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Number ";
                    IsSuccess = false;
                }

                if ((((HiLoaderNo != "")) || (TimeofLoading != "") || (TimeofMoving != "")) && ((HiLoaderTemp == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Hi-Loader Temp ";
                    IsSuccess = false;
                }

                if ((((HiLoaderNo != "")) || ((HiLoaderTemp != "")) || (TimeofMoving != "")) && ((TimeofLoading == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Loading ";
                    IsSuccess = false;
                }
                if ((((HiLoaderNo != "")) || ((HiLoaderTemp != "")) || (TimeofLoading != "")) && ((TimeofMoving == ""))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time of Moving ";
                    IsSuccess = false;
                }


            }


            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }



            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.NewDispatchingTemperatureVallidation", Excep);
        }
    }

    var TempMonitoringReportofLabEquipmentVallidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();
            //var oSampleSource = oScope["chkSampleSourceControlId"].GetSelectedValue();


            var IsSuccess = true;
            var ErrorMessage = "";

            var CommonMessage = "MN-RQ-SPA-001 :: Please enter ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var Time = "";
            var EquipmentName = "";
            var EquipmentNumber = "";
            var MinObservedTemperature = "";
            var MaxObservedTemperature = "";
            var SetTemperature = "";
            if (AryDcResultDetails == undefined) {

                //alert('scope.NewDCModel' + scope.NewDCModel);

                

                if ((oScope.AddlEquipmentNameControlId.GetSelectedText() == "") || (oScope.AddlEquipmentNameControlId.GetSelectedText() == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Equipment Name";
                    IsSuccess = false;
                }
                else {
                    EquipmentName = oScope.AddlEquipmentNameControlId.GetSelectedText();
                    EquipmentName = EquipmentName.toUpperCase();
                }
               
                if ((oScope.NewDCModel.AddlEquipmentNumberControlId == "") || (oScope.NewDCModel.AddlEquipmentNumberControlId == undefined)) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Equipment Number";
                    IsSuccess = false;
                }
             
                if ((document.getElementById("DTTimeControlId") != null)) {
                    Time = document.getElementById("DTTimeControlId").value;
                    if (Time == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Time";
                        IsSuccess = false;
                    }
                }
              
                
                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") != -1) && ((oScope.NewDCModel.ATObservedTempControlId === "") || (oScope.NewDCModel.ATObservedTempControlId === undefined))) {
                    
                        if ((oScope.NewDCModel.ATObservedTempControlId === "") || (oScope.NewDCModel.ATObservedTempControlId === undefined)) {
                            if (ErrorMessage != "") {
                                ErrorMessage = ErrorMessage + ",";
                            }
                            ErrorMessage = ErrorMessage + "Min Set Temperature";
                            IsSuccess = false;
                        }                        
              
                    
                }
                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") != -1) && ((oScope.NewDCModel.ATMaxObservedTempControlId == "") || (oScope.NewDCModel.ATMaxObservedTempControlId == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Max Set Temperature";
                    IsSuccess = false;
                }
                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") == -1)) {
                        if ((oScope.NewDCModel.ATSetTemperatureControlId == "") || (oScope.NewDCModel.ATSetTemperatureControlId == undefined)) {
                            if (ErrorMessage != "") {
                                ErrorMessage = ErrorMessage + ",";
                            }
                            ErrorMessage = ErrorMessage + "Set Temperature";
                            IsSuccess = false;
                        }

                }
                //else {
                //    if ((oScope.NewDCModel.ATSetTemperatureControlId == "") || (oScope.NewDCModel.ATSetTemperatureControlId == undefined)) {
                //        if (ErrorMessage != "") {
                //            ErrorMessage = ErrorMessage + ",";
                //        }
                //        ErrorMessage = ErrorMessage + "Set Temperature";
                //        IsSuccess = false;
                //    }
                //}
               
             
            }
            else {
                //alert('AryDcResultDetails')
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlEquipmentNameControlId') {
                        EquipmentName = AryDcResultDetails[itr2].AnswerValue;
                        EquipmentName = EquipmentName.toUpperCase();
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlEquipmentNumberControlId')
                        EquipmentNumber = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'DTTimeControlId')
                        Time = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'ATObservedTempControlId')
                        MinObservedTemperature = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'ATMaxObservedTempControlId')
                        MaxObservedTemperature = valueFromPage;


                    if (AryDcResultDetails[itr2].ControlId == 'ATSetTemperatureControlId')
                        SetTemperature = valueFromPage;

                }

                if (EquipmentName == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Equipment Name";
                    IsSuccess = false;
                }
                if (EquipmentNumber == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Equipment Number";
                    IsSuccess = false;
                }
                if (Time == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Time";
                    IsSuccess = false;
                }


                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") != -1) && ((MinObservedTemperature === "") || (MinObservedTemperature === undefined))) {

                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Min Set Temperature";
                    IsSuccess = false;

                }
                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") != -1) && ((MaxObservedTemperature == "") || (MaxObservedTemperature == undefined))) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Max Set Temperature";
                    IsSuccess = false;
                }
                if ((EquipmentName != "" && EquipmentName.indexOf("REFRIGERATOR") == -1) && ((SetTemperature == "") || (SetTemperature == undefined))) {
              
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Set Temperature";
                    IsSuccess = false;

                }
                


            }


            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }

          


            return IsSuccess;
        }
        catch (Excep) {
            //alert(Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.TempMonitoringReportofLabEquipmentVallidation", Excep);
        }
    }

    this.MicrobiologyLaboratoryEquipmentCalibration = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {
            var IsSuccess = true;

            var AddlEquipmentNameControlId = '';
            var AddlEquipmentCodeControlId = '';
            
            var chkInternalCaliberation = '';

            var chkExternalCaliberation = '';
            var txtECServiceProviderControlId = '';
            var DTCaliberationDueDateControlId = '';

            var chkPreventionMaintanence = '';
            var DT1stpreventiveMaintainenceControlId = '';
            var DT2ndpreventiveMaintainenceControlId = '';
            var txtPMServiceProviderControlId = '';

            if (AryDcResultDetails == undefined) {

                AddlEquipmentNameControlId = oScope["AddlEquipmentNameControlId"].GetSelectedText();
                AddlEquipmentCodeControlId = oScope.NewDCModel["AddlEquipmentCodeControlId"];

                chkInternalCaliberation = oScope["chkInternalCaliberation"].GetSelectedValue();

                chkExternalCaliberation = oScope["chkExternalCaliberation"].GetSelectedValue();
                txtECServiceProviderControlId = oScope.NewDCModel["txtECServiceProviderControlId"];
                DTCaliberationDueDateControlId = oScope.NewDCModel["DTCaliberationDueDateControlId"];

                chkPreventionMaintanence = oScope["chkPreventionMaintanence"].GetSelectedValue();
                DT1stpreventiveMaintainenceControlId = oScope.NewDCModel["DT1stpreventiveMaintainenceControlId"];
                //DT2ndpreventiveMaintainenceControlId = oScope.NewDCModel["DT2ndpreventiveMaintainenceControlId"];
                txtPMServiceProviderControlId = oScope.NewDCModel["txtPMServiceProviderControlId"];

            }
            else {
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlEquipmentNameControlId')
                        AddlEquipmentNameControlId = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlEquipmentCodeControlId')
                        AddlEquipmentCodeControlId = valueFromPage;

                    //cooking
                    if (AryDcResultDetails[itr2].ControlId == 'chkInternalCaliberation')
                        chkInternalCaliberation = valueFromPage;

                    if (AryDcResultDetails[itr2].ControlId == 'chkExternalCaliberation')
                        chkExternalCaliberation = valueFromPage;

                    //bc
                    if (AryDcResultDetails[itr2].ControlId == 'txtECServiceProviderControlId')
                        txtECServiceProviderControlId = valueFromPage;

                    //bcin
                    if (AryDcResultDetails[itr2].ControlId == 'DTCaliberationDueDateControlId')
                        DTCaliberationDueDateControlId = valueFromPage;
                    if (AryDcResultDetails[itr2].ControlId == 'chkPreventionMaintanence')
                        chkPreventionMaintanence = valueFromPage;

                    //bc out
                    if (AryDcResultDetails[itr2].ControlId == 'DT1stpreventiveMaintainenceControlId')
                        DT1stpreventiveMaintainenceControlId = valueFromPage;
                    //if (AryDcResultDetails[itr2].ControlId == 'DT2ndpreventiveMaintainenceControlId')
                    //    DT2ndpreventiveMaintainenceControlId = valueFromPage;


                    //pre in
                    if (AryDcResultDetails[itr2].ControlId == 'txtPMServiceProviderControlId')
                        txtPMServiceProviderControlId = valueFromPage;

                }
            }

            var IsSuccess = true;
            var finalMesg = '';


            if (AddlEquipmentNameControlId == '') {
                finalMesg = finalMesg + ' ,Equipment Name';
                IsSuccess = false;
            }

            if (AddlEquipmentCodeControlId == '') {
                finalMesg = finalMesg + ' ,Equipment Code';
                IsSuccess = false;
            }

            if (chkInternalCaliberation == '') {
                finalMesg = finalMesg + ' ,Internal Caliberation';
                IsSuccess = false;
            }

            if (chkExternalCaliberation == '') {
                finalMesg = finalMesg + ' ,External Caliberation';
                IsSuccess = false;
            }

            else if (chkExternalCaliberation == 78) {
                if (txtECServiceProviderControlId == '') {
                    finalMesg = finalMesg + ' ,External Caliberation Service Provider';
                    IsSuccess = false;
                }

                if (DTCaliberationDueDateControlId == '') {
                    finalMesg = finalMesg + ' ,Caliberation Due Date';
                    IsSuccess = false;
                }
            }


            if (chkPreventionMaintanence == '') {
                finalMesg = finalMesg + ' ,Prevention Maintenance';
                IsSuccess = false;
            }

            else if (chkPreventionMaintanence == 78) {
                if (txtPMServiceProviderControlId == '') {
                    finalMesg = finalMesg + ' ,Preventive Maintenance Service Provider';
                    IsSuccess = false;
                }

                if (DT1stpreventiveMaintainenceControlId == '') {
                    finalMesg = finalMesg + ' ,1st Preventive Maintenance';
                    IsSuccess = false;
                }

                //if (DT2ndpreventiveMaintainenceControlId == '') {
                //    finalMesg = finalMesg + ' ,2nd Preventive Maintenance';
                //    IsSuccess = false;
                //}
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                finalMesg = finalMesg.substring(2)
                finalMesg = 'MN-RQ-MLC-001 :: Please enter ' + finalMesg;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
             alert('MicrobiologyLaboratoryEquipmentCalibration' + Excep + JSON.stringify(Excep))
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.MicrobiologyLaboratoryEquipmentCalibration", Excep);
        }
    }

    var CustomerComplaintMonitoringFormVallidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {            
            var oScope = scope;
            var Response = { "IsSuccess": true, ErrorMessage: "" };
            var IsSuccess = true;
            var CommonMessage = "MN-RQ-CCM-001 :: Please enter";
            var GlobalMessage = "";

            var AddlBusinessUnitControlId = oScope["AddlBusinessUnitControlId"].GetSelectedValue();
   //         var AddlSectorControlId = oScope["AddlSectorControlId"].GetSelectedValue();
   //         var AddlAirlineControlId = oScope["AddlAirlineControlId"].GetSelectedValue();
   //         var AddlFlightControlId = oScope["AddlFlightControlId"].GetSelectedValue();
			//var chkActualForeignObjectControlId = oScope["AddlFlightControlId"].GetSelectedValue();
   //         var txtIncidentDateControlId = oScope.NewDCModel["txtIncidentDateControlId"];
   //         var AddlTypeOfComplaintControlId = oScope["AddlTypeOfComplaintControlId"].GetSelectedText();

   //         var ObservationList = [];
   //         if (oScope.ObservationList != undefined && oScope.ObservationList != null) {
   //             for (var i = 0; i < oScope.ObservationList.length; i++) {
   //                 if (oScope.ObservationList[i].selected == "selected") {
   //                     ObservationList.push(oScope.ObservationList[i]);
   //                 }
   //             }
   //         }
            var AssignedToList = [];
            if (oScope.AssignedToList != undefined && oScope.AssignedToList != null) {
                for (var i = 0; i < oScope.AssignedToList.length; i++) {
                    if (oScope.AssignedToList[i].selected == "selected") {
                        AssignedToList.push(oScope.AssignedToList[i]);
                    }
                }
            }
   //         var chkClassOfForeignObjectControlId = oScope["chkClassOfForeignObjectControlId"].GetSelectedValue();
   //         var chkSeverityOfForeignObjectControlId = oScope["chkSeverityOfForeignObjectControlId"].GetSelectedValue();
			//var AddlTypeOfQualityDefectControlId = oScope["AddlTypeOfQualityDefectControlId"].GetSelectedValue();

   //         var txtImplicatedMealsControlId = oScope.NewDCModel["txtImplicatedMealsControlId"];
   //         var AddlMealCategoryControlId = oScope["AddlMealCategoryControlId"].GetSelectedValue();
   //         var AddlProducedByControlId = oScope["AddlProducedByControlId"].GetSelectedText();

   //         var AddlSupplierNameControlId = oScope["AddlSupplierNameControlId"].GetSelectedValue();

            if (AddlBusinessUnitControlId == "") {
                if (GlobalMessage != "") {
                    GlobalMessage += ",";
                }
                GlobalMessage += "Business Unit ";
                IsSuccess = false;
            }
            
          //  alert("AssignedToList:" + AssignedToList.length);
            if (AssignedToList.length == 0) {
                if (GlobalMessage != "") {
                    GlobalMessage += ",";
                }
                GlobalMessage += "Assigned To";
                IsSuccess = false;
            }
   //         if (AddlSectorControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Sector ";
   //             IsSuccess = false;
   //         }
   //         if (AddlAirlineControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Airline ";
   //             IsSuccess = false;
   //         }
   //         if (AddlFlightControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Flight ";
   //             IsSuccess = false;
   //         }
			//if (chkActualForeignObjectControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Actual Foreign Object ";
   //             IsSuccess = false;
   //         }
   //         if (txtIncidentDateControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Incident Date ";
   //             IsSuccess = false;
   //         }
   //         if (AddlTypeOfComplaintControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Type Of Complaint ";
   //             IsSuccess = false;
   //         }
   //         else if (AddlTypeOfComplaintControlId == "Foreign Object") {
   //             if (ObservationList.length == 0) {
   //                 if (GlobalMessage != "") {
   //                     GlobalMessage += ",";
   //                 }
   //                 GlobalMessage += "Foreign Object Type ";
   //                 IsSuccess = false;
   //             }
   //             if (chkClassOfForeignObjectControlId == "") {
   //                 if (GlobalMessage != "") {
   //                     GlobalMessage += ",";
   //                 }
   //                 GlobalMessage += "Class Of Foreign Object ";
   //                 IsSuccess = false;
   //             }
   //             if (chkSeverityOfForeignObjectControlId == "") {
   //                 if (GlobalMessage != "") {
   //                     GlobalMessage += ",";
   //                 }
   //                 GlobalMessage += "Severity Of Foreign Object ";
   //                 IsSuccess = false;
   //             }
   //         }
			//else if (AddlTypeOfComplaintControlId == "Quality Defect") {                
   //             if (AddlTypeOfQualityDefectControlId == "") {
   //                 if (GlobalMessage != "") {
   //                     GlobalMessage += ",";
   //                 }
   //                 GlobalMessage += "Type Of Quality Defect ";
   //                 IsSuccess = false;
   //             }
   //         }
   //         if (txtImplicatedMealsControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Implicated Meals ";
   //             IsSuccess = false;
   //         }
   //         if (AddlMealCategoryControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Meal Category ";
   //             IsSuccess = false;
   //         }
   //         if (AddlProducedByControlId == "") {
   //             if (GlobalMessage != "") {
   //                 GlobalMessage += ",";
   //             }
   //             GlobalMessage += "Produced By ";
   //             IsSuccess = false;
   //         }
   //         else if (AddlProducedByControlId == "Outsourced") {
   //             if (AddlSupplierNameControlId == "") {
   //                 if (GlobalMessage != "") {
   //                     GlobalMessage += ",";
   //                 }
   //                 GlobalMessage += "Supplier Name ";
   //                 IsSuccess = false;
   //             }
   //         }

            Response.IsSuccess = IsSuccess;
            Response.ErrorMessage = " " + GlobalMessage;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + Response.ErrorMessage);
            }

            return Response.IsSuccess;
        }

        catch (Excep) {            
            throw oOneViewExceptionHandler.Create("BO", "CustomerComplaintMonitoringFormVallidation", Excep);
        }
    }
       
    var SetNCStatusOLD = function (_oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("SetNCStatus start", "DataCaptureBO.SetNCStatus");
            OneViewConsole.DataLog("DataCaptureEntityList :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.SetNCStatus");

            
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsNC == 'true' || MyInstance.DCNCMappingList[i].IsNC == true) {
                    _oDataCaptureEntity.IsAnyNC = 'true';
                    break;
                }
            }

            OneViewConsole.Debug("SetNCStatus end", "DataCaptureBO.SetNCStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetNCStatus", Excep);
        }
    }

     var SetNCStatus = function (_oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("SetNCStatus start", "DataCaptureBO.SetNCStatus");
            OneViewConsole.DataLog("DataCaptureEntityList :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.SetNCStatus");

            
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsNC == 'true' || MyInstance.DCNCMappingList[i].IsNC == true) {
                    _oDataCaptureEntity.IsAnyNC = 'true';
                }

                if (MyInstance.DCNCMappingList[i].IsObservation == 'true' || MyInstance.DCNCMappingList[i].IsObservation == true) {
                    _oDataCaptureEntity.IsAnyObservation = 'true';
                }

                if ((_oDataCaptureEntity.IsAnyNC == 'true' || _oDataCaptureEntity.IsAnyNC == true) && (_oDataCaptureEntity.IsAnyObservation == 'true' || _oDataCaptureEntity.IsAnyObservation == true)) {
                    break;
                }
            }

            OneViewConsole.Debug("SetNCStatus end", "DataCaptureBO.SetNCStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetNCStatus", Excep);
        }
    }
    var SaveNCMapping = function (_oDataCaptureEntity, IsNewDC, DcId) {
        try
        {
            OneViewConsole.Debug("SaveNCMapping start", "DataCaptureBO.SaveNCMapping");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.SaveNCMapping");
            OneViewConsole.DataLog("IsNewDC :" + IsNewDC, "DataCaptureBO.SaveNCMapping");
            OneViewConsole.DataLog("DcId :" + DcId, "DataCaptureBO.SaveNCMapping");

           
            CreatNCMapping(_oDataCaptureEntity);
          
            if (IsNewDC == false) {
                var NCDCId = MyInstance.GetNCDcID(DcId);
                var TempOutNCTemplate;
                if (ServiceId == 39) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    var NCTemplateNodes = _oTemplateConfigDAO.GetMetaData(ServiceId, NCTemplateDetails_36.TemplateId);
                    //alert('NCTemplateNodes : ' + JSON.stringify(NCTemplateNodes));
                    var _oCustomPageTemplateNodeFormatterComponent = new CustomPageTemplateNodeFormatterComponent();
                    TempOutNCTemplate = _oCustomPageTemplateNodeFormatterComponent.FormatTemplateNodeNewStructure(NCTemplateNodes);

                }
               else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    TempOutNCTemplate = _oTemplateConfigDAO.GetMetaData(ServiceId, MyInstance.NCTemplateId);
                }
                else {
                    TempOutNCTemplate = TemplateMetaData[ServiceId][MyInstance.NCTemplateId];
                }
                //new
				//var TempOutNCTemplate = new CustomPageTemplateNodeFormatterComponent().FormatTemplateNode(TemplateMetaData_NCForm);

                //var PreData = MyInstance.NormalizePreEditData(NCDCId, TempOutNCTemplate);
                var PreData = MyInstance.NCPreEditDataList;
               
                var IsSaved = UpdateNormalizeCode(NCDCId, undefined, PreData, TempOutNCTemplate,false, undefined, true);
                if (IsSaved == true)
                {
                    //Update
                    UpdateNCActionMappings(NCDCId);
                }

            }
            OneViewConsole.Debug("SaveNCMapping end", "DataCaptureBO.SaveNCMapping");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SaveNCMapping", Excep);
        }
        finally {
            NCDCId = null;
            TempOutNCTemplate = null;
            PreData = null;
            IsSaved = null;
        }
    }

    var UpdateNCActionMappings = function (NCDCId) {
        try {
            OneViewConsole.Debug("UpdateNCActionMappings start", "DataCaptureBO.UpdateNCActionMappings");

            var resData = oDataCaptureDAO.GetDataCaptureByDcId(NCDCId);
            var Query = "SELECT * FROM ActionDetailsEntity WHERE DataCaptureClientGuid='" + resData[0].ClientGuid + "'";
            var result = window.OneViewSqlite.excecuteSqlReader(Query);
            result = JSON.parse(result);

            if (result.length > 0) {
                var oDateTime = new DateTime();
                var CurrenntDateAndTime = oDateTime.GetDateAndTime();
                var Q1 = "UPDATE DCNCMapping SET TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE ActionClientGuid='" + result[0].ActionClientGuid + "'";
                var Q2 = "UPDATE ActionEntity SET TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE ClientGuid='" + result[0].ActionClientGuid + "'";
                var Q3 = "UPDATE ActionDetailsEntity SET TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE ActionClientGuid='" + result[0].ActionClientGuid + "'";
                var Q4 = "UPDATE MultiMediaBlobSubElements SET TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE ClientGuid IN (SELECT Answer FROM DcResultDetailsEntity WHERE DcResultDetailsEntity.DataCaptureId=" + NCDCId + ")";
                window.OneViewSqlite.excecuteSql(Q1);
                window.OneViewSqlite.excecuteSql(Q2);
                window.OneViewSqlite.excecuteSql(Q3);
                window.OneViewSqlite.excecuteSql(Q4);
            }

            OneViewConsole.Debug("UpdateNCActionMappings end", "DataCaptureBO.UpdateNCActionMappings");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNCActionMappings", Excep);
        }
        finally {
            resData = null;
            Query = null;
            result = null;
            oDateTime = null;
            CurrenntDateAndTime = null;
            Q1 = null;
            Q2 = null;
            Q3 = null;
            Q4 = null;
        }
    }


    var CreatNCMapping = function (_oDataCaptureEntity) {
        try
        {
           
            OneViewConsole.Debug("CreatNCMapping start", "DataCaptureBO.CreatNCMapping");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.CreatNCMapping");

            //alert(MyInstance.DCNCMappingList.length + "," +  JSON.stringify(MyInstance.DCNCMappingList));
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                var oNCMapping = MyInstance.DCNCMappingList[i];
               // alert('oNCMapping : ' + JSON.stringify(oNCMapping));
                var result = CheckDCMappingExist(oNCMapping, _oDataCaptureEntity);
                if (result[0].TotalCount == 0) {
                    SetDCNCMappingActionContext(oNCMapping, _oDataCaptureEntity);
                    var _oDCNCMappingDefaultDAO = new DefaultMasterDAO("DCNCMapping");
                    var oResDCNCMapping = _oDCNCMappingDefaultDAO.CreateMaster(oNCMapping);
                }
                else
                {                 
                    //UpdateNCDCMapping('', _oDataCaptureEntity.ClientGuid, oNCMapping.NCRuleId, oNCMapping.IsNC, true, oNCMapping.Comments, oNCMapping.IsObservation, oNCMapping.AttributeGroupId);
                    UpdateNCDCMapping('', _oDataCaptureEntity.ClientGuid, oNCMapping.NCRuleId, oNCMapping.IsNC, true, oNCMapping.Comments, oNCMapping.IsObservation, oNCMapping.AttributeGroupId, oNCMapping);
                }
                if (oNCMapping.oActionEntity != null) {

                    var resultData = CheckActionExistForNCDCMapping(oNCMapping, _oDataCaptureEntity);
                    if (resultData[0].TotalCount == 0) {
                        var oActionEntity = oNCMapping.oActionEntity;

                        var oActionEntityDetailsList = oActionEntity.ActionDetailsEntityList;

                        var oNCDCEntity = oActionEntityDetailsList[0].oDataCapture;
                   
                        var _oActionEntityDefaultDAO = new DefaultMasterDAO("ActionEntity");
                        var oResActionEntity = _oActionEntityDefaultDAO.CreateMaster(oActionEntity);

                        //step2 :create DCNCMapping
                        oNCMapping.ActionClientGuid = oResActionEntity.ClientGuid;

                       //UpdateNCDCMapping(oNCMapping.ActionClientGuid, _oDataCaptureEntity.ClientGuid, oNCMapping.NCRuleId, oNCMapping.IsNC, false, oNCMapping.Comments, oNCMapping.IsObservation, oNCMapping.AttributeGroupId);
                        UpdateNCDCMapping(oNCMapping.ActionClientGuid, _oDataCaptureEntity.ClientGuid, oNCMapping.NCRuleId, oNCMapping.IsNC, false, oNCMapping.Comments, oNCMapping.IsObservation, oNCMapping.AttributeGroupId, oNCMapping);

                        //step 3:Create ActionDetails
                        //step 3.1:Create NC DC (Form Action)
                        if (oNCDCEntity != null) {
                            oNCDCEntity.IsCompleted = SetIsCompletedStatus(oNCDCEntity);
                           // alert('oNCDCEntity :' + JSON.stringify(oNCDCEntity));
                            var result = oDataCaptureDAO.Create(oNCDCEntity);
                            var DcResultDetailsHistoryList = MyInstance.GetDcResultDetailsHistory(oNCDCEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, "");
                            var _oDcResultDetailsHistoryDAO = new DcResultDetailsHistoryDAO();
                            _oDcResultDetailsHistoryDAO.Create(DcResultDetailsHistoryList);
                            for (var itr = 0; itr < oActionEntityDetailsList.length; itr++) {
                                //  update DCId
                                oActionEntityDetailsList[itr].DataCaptureClientGuid = oNCDCEntity.ClientGuid;
                                //  update ActionId
                                oActionEntityDetailsList[itr].ActionClientGuid = oResActionEntity.ClientGuid;
                                oActionEntityDetailsList[itr].ActionRaisedBySystemUserId = OneViewSessionStorage.Get("LoginUserId");
                                oActionEntityDetailsList[itr].ActionRaisedByUserName = OneViewSessionStorage.Get("LoginUserName");                               
                            }
                        }
                        else  //(For Predefined action or Custom Action)
                        {
                            for (var itr = 0; itr < oActionEntityDetailsList.length; itr++) {
                                //  update ActionId
                                oActionEntityDetailsList[itr].ActionClientGuid = oResActionEntity.ClientGuid;
                                oActionEntityDetailsList[itr].ActionRaisedBySystemUserId = OneViewSessionStorage.Get("LoginUserId");
                                oActionEntityDetailsList[itr].ActionRaisedByUserName = OneViewSessionStorage.Get("LoginUserName");                                
                            }
                        }

                        //step 3.2 :create ActionDetailsEntityList
                        var _oActionDetailsEntityDefaultDAO = new DefaultMasterDAO("ActionDetailsEntity");
                        var oResActionDetailsEntity = _oActionDetailsEntityDefaultDAO.CreateMasters(oActionEntityDetailsList);
                    }
                }
              
            }
         
            OneViewConsole.Debug("CreatNCMapping end", "DataCaptureBO.CreatNCMapping");
        }
        catch (Excep) {
            //alert(JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreatNCMapping", Excep);
        }
        finally {
            oNCMapping = null;
            result = null;
            _oDCNCMappingDefaultDAO = null;
            oResDCNCMapping = null;
            resultData = null;
            oActionEntity = null;
            oActionEntityDetailsList = null;
            oNCDCEntity = null;
            _oActionEntityDefaultDAO = null;
            oResActionEntity = null;
            _oActionDetailsEntityDefaultDAO = null;
            oResActionDetailsEntity = null;
        }

    }

    var UpdateNCDCMapping = function (ActionClientGuid, DataCaptureClientGuid, NCRuleId, IsNC, Status, Comments, IsObservation, AttributeGroupId, oNCMapping) {
        try
        {
            //alert('oNCMapping : ' + JSON.stringify(oNCMapping));
            OneViewConsole.Debug("UpdateNCDCMapping start", "DataCaptureBO.UpdateNCDCMapping");
            OneViewConsole.DataLog("ActionClientGuid :" + ActionClientGuid, "DataCaptureBO.UpdateNCDCMapping");
            OneViewConsole.DataLog("DataCaptureClientGuid :" + DataCaptureClientGuid, "DataCaptureBO.UpdateNCDCMapping");
            OneViewConsole.DataLog("NCRuleId :" + NCRuleId, "DataCaptureBO.UpdateNCDCMapping");
            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();
            var Query;
            AttributeGroupId = (AttributeGroupId != undefined && AttributeGroupId != "" && AttributeGroupId != null) ? AttributeGroupId : 0;

            var Comments_DCNCMapping = (Comments == undefined) ? "" : Comments;

            //alert('oNCMapping :' + JSON.stringify(oNCMapping));

            if (Status == true) {
                //Query = "UPDATE DCNCMapping SET IsNC='" + IsNC + "',TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE NCRuleId=" + NCRuleId + "";
                //Query = "UPDATE DCNCMapping SET Comments = '" + Comments_DCNCMapping + "',AttributeGroupId = " + AttributeGroupId + ", IsObservation='" + IsObservation + "',IsNC='" + IsNC + "',TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE NCRuleId=" + NCRuleId + " AND DataCaptureClientGuid='" + DataCaptureClientGuid + "'";
                Query = "UPDATE DCNCMapping SET NCRuleId=" + NCRuleId + ", RuleName='" + oNCMapping.RuleName + "', RuleDescription='" + oNCMapping.RuleDescription + "', RuleCode='" + oNCMapping.RuleCode + "',Comments = '"
                    + Comments_DCNCMapping + "',AttributeGroupId = " + AttributeGroupId + ", IsObservation='" + IsObservation + "',IsNC='" + IsNC + "',TimeStamp='"
                    + CurrenntDateAndTime + "',IsSynchronized='false' ,Deviatedby ='" + oNCMapping.Deviatedby + "' ,ExpectedValue ='" + oNCMapping.ExpectedValue + "' ,ActualValue ='"
                    + oNCMapping.ActualValue + "', TemplateNodeIds ='" + oNCMapping.TemplateNodeIds + "'"
                    + "WHERE RuleGroup='" + oNCMapping.RuleGroup + "' AND DataCaptureClientGuid='" + DataCaptureClientGuid + "'";
            }
            else {
                //Query = "UPDATE DCNCMapping SET ActionClientGuid='" + ActionClientGuid + "',DataCaptureClientGuid='" + DataCaptureClientGuid + "' WHERE NCRuleId=" + NCRuleId + "";

                //Query = "UPDATE DCNCMapping SET Comments = '" + Comments_DCNCMapping + "',AttributeGroupId = " + AttributeGroupId + ", ActionClientGuid='" + ActionClientGuid + "',DataCaptureClientGuid='" + DataCaptureClientGuid + "' WHERE NCRuleId=" + NCRuleId
                //+ " AND DataCaptureClientGuid='" + DataCaptureClientGuid + "'";

                Query = "UPDATE DCNCMapping SET NCRuleId=" + NCRuleId + ", RuleName='" + oNCMapping.RuleName + "', Deviatedby='" + oNCMapping.Deviatedby + "', ExpectedValue='" + oNCMapping.ExpectedValue
                    + "', RuleDescription='" + oNCMapping.RuleDescription + "', RuleCode='" + oNCMapping.RuleCode + "',Comments = '"
                    + Comments_DCNCMapping + "',AttributeGroupId = " + AttributeGroupId + ", ActionClientGuid='" + ActionClientGuid + "',DataCaptureClientGuid='" + DataCaptureClientGuid + "'" 
                     + " ,Deviatedby ='" + oNCMapping.Deviatedby + "',ExpectedValue ='" + oNCMapping.ExpectedValue + "' ,ActualValue ='"
                     + oNCMapping.ActualValue + "' , TemplateNodeIds ='" + oNCMapping.TemplateNodeIds + "'"
                     + "WHERE RuleGroup='" + oNCMapping.RuleGroup + "' AND DataCaptureClientGuid='" + DataCaptureClientGuid + "'";
            }

            //alert(Query);
            window.OneViewSqlite.excecuteSql(Query);

            OneViewConsole.Debug("UpdateNCDCMapping end", "DataCaptureBO.UpdateNCDCMapping");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNCDCMapping", Excep);
        }
        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            Query = null;
        }
    }

    var CheckActionExistForNCDCMapping = function (oNCMapping, _oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("CheckActionExistForNCDCMapping start", "DataCaptureBO.CheckActionExistForNCDCMapping");
            OneViewConsole.DataLog("NCMapping :" + JSON.stringify(oNCMapping), "DataCaptureBO.CheckActionExistForNCDCMapping");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.CheckActionExistForNCDCMapping");

            var query = "SELECT COUNT(*) AS TotalCount FROM DCNCMapping INNER JOIN ActionEntity ON  DCNCMapping.ActionClientGuid=ActionEntity.ClientGuid WHERE DCNCMapping.NCRuleId=" + oNCMapping.NCRuleId + " AND DCNCMapping.DataCaptureClientGuid='" + _oDataCaptureEntity.ClientGuid + "'";
            var result = window.OneViewSqlite.excecuteSqlReader(query);
            result = JSON.parse(result);

            OneViewConsole.Debug("CheckActionExistForNCDCMapping end", "DataCaptureBO.CheckActionExistForNCDCMapping");
            return result;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckActionExistForNCDCMapping", Excep);
        }
        finally {
            query = null;
            result = null;
        }
    }

    var CheckDCMappingExist = function (oNCMapping, _oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("CheckDCMappingExist start", "DataCaptureBO.CheckDCMappingExist");
            OneViewConsole.DataLog("NCMapping :" + JSON.stringify(oNCMapping), "DataCaptureBO.CheckDCMappingExist");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.CheckDCMappingExist");

            //var query = "SELECT COUNT(*) AS TotalCount FROM DCNCMapping  WHERE NCRuleId=" + oNCMapping.NCRuleId + " AND DataCaptureClientGuid='" + _oDataCaptureEntity.ClientGuid + "'";
            var query = "SELECT COUNT(*) AS TotalCount FROM DCNCMapping  WHERE RuleGroup='" + oNCMapping.RuleGroup + "' AND DataCaptureClientGuid='" + _oDataCaptureEntity.ClientGuid + "'";
           // alert('CheckDCMappingExist: ' + query);

            var result = window.OneViewSqlite.excecuteSqlReader(query);
            result = JSON.parse(result);

            OneViewConsole.Debug("CheckDCMappingExist end", "DataCaptureBO.CheckDCMappingExist");
            return result;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckDCMappingExist", Excep);
        }
        finally {
            query = null;
            result = null;
        }
    }

    //TODO:Need to handle attributewise action(DcResultDetailsClientGuid) ,attributegroupwise action(AttributeGroupId),Dcwise(DataCaptureClientGuid) and User Wise action(DcResultsClientGuid).
    var SetDCNCMappingActionContext = function (oNCMapping, _oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("SetDCNCMappingActionContext start", "DataCaptureBO.SetDCNCMappingActionContext");
      
            oNCMapping.DataCaptureClientGuid = _oDataCaptureEntity.ClientGuid;

            OneViewConsole.Debug("SetDCNCMappingActionContext end", "DataCaptureBO.SetDCNCMappingActionContext");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetDCNCMappingActionContext", Excep);
        }
    }

    this.RefreshDDL = function (scope, TemplateNodes, DcResultDetailsEntityLst) {
        try
        {
            OneViewConsole.Debug("RefreshDDL start", "DataCaptureBO.RefreshDDL");
            OneViewConsole.DataLog("TemplateNodes :" + JSON.stringify(TemplateNodes), "DataCaptureBO.RefreshDDL");
            OneViewConsole.DataLog("DcResultDetailsEntityLst :" + JSON.stringify(DcResultDetailsEntityLst), "DataCaptureBO.RefreshDDL");

            for (var i = 0; i < DcResultDetailsEntityLst.length; i++) {
                if (DcResultDetailsEntityLst[i].IsDynamicAnswer == 'true') {
                    var AttributeNodeId = DcResultDetailsEntityLst[i].AttributeNodeId;
                   // alert('AttributeNodeId' + AttributeNodeId);
                    for (var itrAttrId in TemplateNodes) {//
                        var _oAttributeInfo = TemplateNodes[itrAttrId];//
                       // alert(DcResultDetailsEntityLst[i].IsDynamicAnswer + " ," + DcResultDetailsEntityLst[i].AttributeNodeId + " ," + itrAttrId);
                        if (DcResultDetailsEntityLst[i].IsDynamicAnswer == 'true' && DcResultDetailsEntityLst[i].AttributeNodeId == itrAttrId) { //
                            var _oPrimarayAnswerModeInfo = _oAttributeInfo.AnswerMode[0];
                            var ddlControl = scope[_oAttributeInfo.AnswerMode[0].ControlId];
                            //alert('ddlControl' + JSON.stringify(ddlControl));

                            var element = { Id: DcResultDetailsEntityLst[i].Answer, Name: DcResultDetailsEntityLst[i].AnswerValue, IsDynamicElement: 'true' };

                            //alert('element :' + JSON.stringify(element));

                            ddlControl.AddElement(element);
                        }
                    }//
                }
            }
            OneViewConsole.Debug("RefreshDDL end", "DataCaptureBO.RefreshDDL");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.RefreshDDL", Excep);
        }
        finally {
            AttributeNodeId = null;
            _oAttributeInfo = null;
            _oPrimarayAnswerModeInfo = null;
            ddlControl = null;
            element = null;
        }
    }

    this.setDefaultValueOLD = function () {
        try {
            OneViewConsole.Debug("setDefaultValue start", "DataCaptureBO.setDefaultValue");

            var _oDefaultValueComponent = new DefaultValueComponent();
            var DefaultValueMetaData = OneViewSessionStorage.Get("DefaultValueMetaData");
            if (DefaultValueMetaData == null || DefaultValueMetaData == undefined) {

                DefaultValueMetaData = _oDefaultValueComponent.GetDefaultValueMetaData(oScope, { ServiceId: ServiceId, LoginUserId: LoginUserId, TemplateNodeId: TemplateId, DCPlaceNodeId: DcPlaceId, DCPlaceDimension: DcPlaceDimension });
                if (DefaultValueMetaData == null)
                    DefaultValueMetaData = 'None';
                OneViewSessionStorage.Save("DefaultValueMetaData", JSON.stringify(DefaultValueMetaData));
            }
            else
                DefaultValueMetaData = JSON.parse(DefaultValueMetaData);

            if (DefaultValueMetaData != 'None') {
                _oDefaultValueComponent.SetDefaultValueInControls(oScope, DefaultValueMetaData, oTemplateNodes);
            }
            OneViewConsole.Debug("setDefaultValue end", "DataCaptureBO.setDefaultValue");

        } catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.setDefaultValue", Excep);
        }
        finally {
            _oDefaultValueComponent = null;
            DefaultValueMetaData = null;
        }
    }

    this.setDefaultValue = function () {
        try {
            OneViewConsole.Debug("setDefaultValue start", "DataCaptureBO.setDefaultValue");

            var _oDefaultValueComponent = new DefaultValueComponent();
           // var DefaultValueDict = OneViewSessionStorage.Get("DefaultValueMetaData");

            var oLVFactory = new LVFactory();
            var oDefaultValueComponent = oLVFactory.GetDefaultValueComponent("LVDefaultDefaultValueComponent");
           // var len = GetTemplateNodesLength();

            var DefaultValueDict = oDefaultValueComponent.GetDefaultValueExtended(oTemplateNodes,TemplateId);
           
            //alert('DefaultValueDict' + JSON.stringify(DefaultValueDict));
            _oDefaultValueComponent.SetDefaultValueInControls(oScope, DefaultValueDict, oTemplateNodes, MyInstance.DCDetailFromDBList);

            MyInstance.DCDetailFromDBList = null;
            OneViewConsole.Debug("setDefaultValue end", "DataCaptureBO.setDefaultValue");

        } catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.setDefaultValue", Excep);
        }
        finally {
            _oDefaultValueComponent = null;
            DefaultValueMetaData = null;
        }
    }

    var GetTemplateNodesLength = function () {
        try {
            OneViewConsole.Debug("GetTemplateNodesLength START", "DataCaptureBO.GetTemplateNodesLength");
            var size = 0;
            for (key in oTemplateNodes) {
                if (oTemplateNodes.hasOwnProperty(key)) size++;
            }
            OneViewConsole.Debug("GetTemplateNodesLength END", "DataCaptureBO.GetTemplateNodesLength");
            return size;

        } catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetTemplateNodesLength", Excep);
        }
        finally {
        }
    }


    //############## New Dc End ################

    var UpdateNCStatusOLD = function (DCId) {
        try
        {
            OneViewConsole.Debug("UpdateNCStatus start", "DataCaptureBO.UpdateNCStatus");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateNCStatus");

            var oDateTime = new DateTime();
            var CurrentDateAndTime = oDateTime.GetDateAndTime();
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsNC == 'true' || MyInstance.DCNCMappingList[i].IsNC == true) {
                    var query = "UPDATE DataCaptureEntity SET IsAnyNC='true',IsSynchronized='false',TimeStamp='" + CurrentDateAndTime + "' WHERE Id=" + DCId + "";
                    var queryResult = window.OneViewSqlite.excecuteSql(query);
                    //break;
                }
            }

            OneViewConsole.Debug("UpdateNCStatus end", "DataCaptureBO.UpdateNCStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNCStatus", Excep);
        }
        finally {
            oDateTime = null;
            CurrentDateAndTime = null;
            query = null;
            queryResult = null;
        }
    }

    var UpdateNCStatus = function (DCId) {
        try {
            OneViewConsole.Debug("UpdateNCStatus start", "DataCaptureBO.UpdateNCStatus");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateNCStatus");

            var IsNC = false;

            var oDateTime = new DateTime();
            var CurrentDateAndTime = oDateTime.GetDateAndTime();
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsNC == 'true' || MyInstance.DCNCMappingList[i].IsNC == true) {
                    IsNC = true;
                    break;
                }
            }
            //alert(JSON.stringify(MyInstance.DCNCMappingList));
            //alert(IsNC);
          //  var RuleIdList=[];
            var RuleGroupList = [];

            if (IsNC == false && MyInstance.DCNCMappingList.length > 0) {

                for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                  //  RuleIdList.push(MyInstance.DCNCMappingList[i].NCRuleId);
                    RuleGroupList.push(MyInstance.DCNCMappingList[i].RuleGroup);
                }

                var Incondition = "(";

                for (var i = 0; i < RuleGroupList.length; i++) {
                    Incondition += "'" + RuleGroupList[i] + "'";
                    Incondition += (i <= RuleGroupList.length - 2) ? "," : ")";
                }

                //alert('RuleIdList' + JSON.stringify(RuleIdList));
                //var query = "SELECT DCNCMapping.IsNC FROM DataCaptureEntity INNER JOIN DCNCMapping ON DataCaptureEntity.ClientGuid = DCNCMapping.DataCaptureClientGuid WHERE DataCaptureEntity.Id = " + DcId + " And DCNCMapping.NCRuleId NOT IN (" + RuleIdList + ")"
                //var query = "SELECT DCNCMapping.IsNC FROM DataCaptureEntity INNER JOIN DCNCMapping ON DataCaptureEntity.ClientGuid = DCNCMapping.DataCaptureClientGuid WHERE DataCaptureEntity.Id = " + DcId + " And DCNCMapping.RuleGroup NOT IN ('" + RuleGroupList + "')"
                var query = "SELECT DCNCMapping.IsNC FROM DataCaptureEntity INNER JOIN DCNCMapping ON DataCaptureEntity.ClientGuid = DCNCMapping.DataCaptureClientGuid WHERE DataCaptureEntity.Id = " + DcId + " And DCNCMapping.RuleGroup NOT IN " + Incondition;
                //alert(query);
                var result = window.OneViewSqlite.excecuteSqlReader(query);
                result = JSON.parse(result);

                for (var i = 0; i < result.length; i++) {
                    if (result[i].IsNC == 'true' || result.IsNC == true) {
                        IsNC = true;
                        break;
                    }
                }
                //alert(JSON.stringify(result));
                //alert(IsNC);
            }

            if (MyInstance.DCNCMappingList.length > 0) {
                var query = "UPDATE DataCaptureEntity SET IsAnyNC='" + IsNC + "',IsSynchronized='false',TimeStamp='" + CurrentDateAndTime + "' WHERE Id=" + DCId + "";
                var queryResult = window.OneViewSqlite.excecuteSql(query);
            }

            OneViewConsole.Debug("UpdateNCStatus end", "DataCaptureBO.UpdateNCStatus");
        }
        catch (Excep) {
           // alert("UpdateNCStatus" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNCStatus", Excep);
        }
        finally {
            oDateTime = null;
            CurrentDateAndTime = null;
            query = null;
            queryResult = null;
        }
    }

    var UpdateObservationStatus = function (DCId) {
        try {
            OneViewConsole.Debug("UpdateObservationStatus start", "DataCaptureBO.UpdateObservationStatus");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateObservationStatus");

            var IsObservation = false;

            var oDateTime = new DateTime();
            var CurrentDateAndTime = oDateTime.GetDateAndTime();
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsObservation == 'true' || MyInstance.DCNCMappingList[i].IsObservation == true) {
                    IsObservation = true;
                    break;
                }
            }
            //alert(JSON.stringify(MyInstance.DCNCMappingList));
           // alert(IsObservation);

            var RuleGroupList = [];

            if (IsObservation == false && MyInstance.DCNCMappingList.length > 0) {

                for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                    RuleGroupList.push(MyInstance.DCNCMappingList[i].RuleGroup);
                }

                var Incondition = "(";

                for (var i = 0; i < RuleGroupList.length; i++) {
                    Incondition += "'" + RuleGroupList[i] + "'";
                    Incondition += (i <= RuleGroupList.length - 2) ? "," : ")";
                }

                var query = "SELECT DCNCMapping.IsObservation AS IsObservation FROM DataCaptureEntity INNER JOIN DCNCMapping ON DataCaptureEntity.ClientGuid = DCNCMapping.DataCaptureClientGuid WHERE DataCaptureEntity.Id = " + DcId + " And DCNCMapping.RuleGroup NOT IN " + Incondition;
                //alert(query);
                var result = window.OneViewSqlite.excecuteSqlReader(query);
                result = JSON.parse(result);

                for (var i = 0; i < result.length; i++) {
                    if (result[i].IsObservation == 'true' || result.IsObservation == true) {
                        IsObservation = true;
                        break;
                    }
                }
                //alert(JSON.stringify(result));
               // alert(IsObservation);
            }

            if (MyInstance.DCNCMappingList.length > 0) {
                var query = "UPDATE DataCaptureEntity SET IsAnyObservation='" + IsObservation + "',IsSynchronized='false',TimeStamp='" + CurrentDateAndTime + "' WHERE Id=" + DCId + "";
                var queryResult = window.OneViewSqlite.excecuteSql(query);
            }

            OneViewConsole.Debug("UpdateObservationStatus end", "DataCaptureBO.UpdateObservationStatus");
        }
        catch (Excep) {
            // alert("UpdateObservationStatus" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateObservationStatus", Excep);
        }
        finally {
            oDateTime = null;
            CurrentDateAndTime = null;
            query = null;
            queryResult = null;
        }
    }

    //############## Update DC  Start ################
    this.UpdateDC = function (DCId, AttributesList, PreEditData, IsSubmit, IsAutoSubmit, ScoreDetails, ReqDetails) {
        try {
            OneViewConsole.Debug("UpdateDC start", "DataCaptureBO.UpdateDC");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateDC");            
            
           // alert('DCId: ' + DCId + ", AttributesList" + AttributesList);
           // alert('PreEditData:' + "," + JSON.stringify(PreEditData))

            //take data to update
            //find dcresultId
            //if DcResultId=0
            //iterate nodes to update,Find dcresultdetailsId
            var DCResultDetailEntityLstFromForm = MyInstance.GetDcResultDetailsEntity(oScope, TemplateNodes);
           // alert('DCResultDetailEntityLstFromForm :' + JSON.stringify(DCResultDetailEntityLstFromForm));
            var OperationName = (IsSubmit != undefined && IsSubmit == true) ? 'Submit' : 'Save';
            
            var IsAutoSave = false;
            if (ReqDetails != undefined) {
                IsAutoSave = ReqDetails.IsAutoSave;
            }

            var oDefaultValidationResponse = null;
            if (MyInstance.SaveDCValidatorConfigList != null && MyInstance.SaveDCValidatorConfigList.length > 0) {               
                var parm = { DataCaptureEntity: DCResultDetailEntityLstFromForm, scope: oScope, toaster: oToaster, xlatService: oxlatService, ClientValidatorConfigList: MyInstance.SaveDCValidatorConfigList, Operation: OperationName, 'IsEnableMandatoryStyle': MyInstance.IsEnableMandatoryStyle, 'IsPageLoad': false, 'PageLoadMandatoryOperation': MyInstance.PageLoadMandatoryOperation, 'IsAutoSave': IsAutoSave }
                var _oVallidationHandler = new VallidationHandler();
                oDefaultValidationResponse = _oVallidationHandler.Validate(parm);
                oDefaultValidationResponse = oDefaultValidationResponse.IsSuccess
            }
            else
            {
                oDefaultValidationResponse = true;
            }
            // If vallidation success
            if ((oDefaultValidationResponse != null && oDefaultValidationResponse == true)) {
               
                //EKFC
                if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                    if (TemplateId != 535 && TemplateId != 8272) {
                        // alert('in' + TemplateId);
                        MyInstance.ReCheckDCNCMapping();
                    }
                }
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                    if (TemplateId != 12208 && TemplateId != 8272) {
                        // alert('in' + TemplateId);
                        MyInstance.ReCheckDCNCMapping();
                    }
                }

                if (OneViewSessionStorage.Get("NCInlineEdit") != 'true') {

                    if (CustomValidations(IsSubmit,IsAutoSubmit)) {

                        if (UpdateObservation(AttributesList)) {
                          
                            MyInstance.UpdateDCRecords(DCId, AttributesList, PreEditData, IsAutoSubmit, ScoreDetails);
                            CreateMultiMediaSubElements(DCId);
                            if (MyInstance.ActionManualFollowUpInfoHandler != null){
                                MyInstance.ActionManualFollowUpInfoHandler();
                            }
                            // NC custom (Need to remove)
                            CommentsResult = {};
                            ObservationResult = {};

                            //Todo :: (Sangeeta Bhatt : 06-10-2017) : Need to remove , temporarily kept for hiding two saved messages
                            if (OneViewSessionStorage.Get("ServiceId") == 23) {
                                if (OneViewSessionStorage.Get("TemplateId") != 3) {
                                    navigator.notification.alert(xlatService.xlat('UpdatedSuccessfully'), ['OK'], "");
                                }
                            }
                            else {
                                if (ReqDetails != undefined && ReqDetails.IsAutoSave == true) {
                                    //No alert
                                }
                                else {
                                    navigator.notification.alert(xlatService.xlat('UpdatedSuccessfully'), ['OK'], "");
                                }
                            }
                        }
                    }
                    else {
                        return false;
                    }
                }
                else {
                    
                    MyInstance.UpdateDCRecords(DCId, AttributesList, PreEditData, IsAutoSubmit, ScoreDetails);
                }
               // oToaster.pop('success', xlatService.xlat('Title_Success'), xlatService.xlat('UpdatedSuccessfully'));
            }
            else {
                return false;
            }
            OneViewConsole.Debug("UpdateDC end", "DataCaptureBO.UpdateDC");
        }
        catch (Excep) {
           // alert('DataCaptureBO.UpdateDC :' + Excep);
           // alert('DataCaptureBO.UpdateDC :' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDC", Excep);
        }
        finally {
            DCResultDetailEntityLstFromForm = null;
            oDefaultValidationResponse = null;
            parm = null;
            _oVallidationHandler = null;
        }
    }

    this.UpdateDCRecordsOLD = function (DCId, AttributesList, PreEditData) {
        try
        {
            OneViewConsole.Debug("UpdateDCRecords start", "DataCaptureBO.UpdateDCRecords");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateDCRecords");
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.UpdateDCRecords");
          
            var DataCaptureResult = oDataCaptureDAO.GetDataCaptureByDcId(DCId);
            var NCDCId = MyInstance.GetNCDcID(DCId);
            if (MyInstance.DeleteNCEventHandler == true)
                MyInstance.DeleteNCReleatedData(NCDCId);
            if (MyInstance.BeforeUpdateDCEventHandler != undefined)
                MyInstance.BeforeUpdateDCEventHandler(this);

            NCDCId = MyInstance.GetNCDcID(DCId);
            if (MyInstance.DCNCMappingList.length > 0) {

                UpdateNCStatus(DCId);
                if (NCDCId != undefined) {
                    SaveNCMapping(DataCaptureResult[0], false, DCId);
                }
                else {
                    //Query
                    SaveNCMapping(DataCaptureResult[0], true, DCId);
                }
            }
            UpdateNormalizeCode(DCId, AttributesList, PreEditData, oTemplateNodes);

            OneViewConsole.Debug("UpdateDC end", "DataCaptureBO.UpdateDCRecords");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCRecords", Excep);
        }
        finally {
            DataCaptureResult = null;
            NCDCId = null;
        }
    }

    this.UpdateDCRecords = function (DCId, AttributesList, PreEditData, IsAutoSubmit, ScoreDetails) {
        try {
            
            //alert('UpdateDCRecords :' + DCId + ", " + JSON.stringify(AttributesList));
            OneViewConsole.Debug("UpdateDCRecords start", "DataCaptureBO.UpdateDCRecords");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateDCRecords");         

            var DataCaptureResult = oDataCaptureDAO.GetDataCaptureByDcId(DCId);
            var NCDCId = MyInstance.GetNCDcID(DCId);

            //alert('NCDCId' + NCDCId);
            //if (MyInstance.DeleteNCEventHandler == true)
            //    MyInstance.DeleteNCReleatedData(NCDCId);

            // if (MyInstance.BeforeUpdateDCEventHandler != undefined)
            //    MyInstance.BeforeUpdateDCEventHandler(this);

            DeleteNC_WhileUpdateDC(NCDCId);

           // alert('AttributeWiseActionDict :' + JSON.stringify(AttributeWiseActionDict) + "," + AttributeWiseActionDict);
            if (AttributeWiseActionDict != undefined)
                BeforeUpdateDC_CreateAction();

            if (OneViewSessionStorage.Get("NCInlineEdit") == 'true') {
                var _oDcDAO = new DcDAO();
                var DCClientGuid = GetDCClientGuidById();
             
                //alert('DCClientGuid :' + DCClientGuid);
                // var TempRuleId = _oDcDAO.GetRuleIdByDCId(DCClientGuid);
                var RuleDetails = _oDcDAO.GetRuleIdByDCId(DCClientGuid);
               // alert('RuleDetails :' + JSON.stringify(RuleDetails));
                var RuleId = 0;
                if (RuleDetails != 0) {
                    RuleId = RuleDetails.NCRuleId;
                }
                CreateActionWhileCreateAndUpdate(undefined, RuleId, RuleDetails);
            }

            NCDCId = MyInstance.GetNCDcID(DCId);
            if (MyInstance.DCNCMappingList.length > 0) {

                UpdateNCStatus(DCId);
                UpdateObservationStatus(DCId);
               // alert('NCDCId :' + NCDCId);
                if (NCDCId != undefined) {
                   // alert('old dc');
                    SaveNCMapping(DataCaptureResult[0], false, DCId);
                }
                else {
                    //Query
                    SaveNCMapping(DataCaptureResult[0], true, DCId);
                }
            }
            UpdateNormalizeCode(DCId, AttributesList, PreEditData, oTemplateNodes, IsAutoSubmit, ScoreDetails);

            //var _oOneViewAutoUploadPlugin = new OneViewAutoUploadPlugin();
            //_oOneViewAutoUploadPlugin.Start();

            OneViewConsole.Debug("UpdateDC end", "DataCaptureBO.UpdateDCRecords");
        }
        catch (Excep) {          
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCRecords", Excep);
        }
        finally {
            DataCaptureResult = null;
            NCDCId = null;
        }
    }

    var UpdateNormalizeCode = function (DCId, AttributesList, PreEditData, TemplateNodes, IsAutoSubmit, ScoreDetails,IsNCDC) {

 
        var _oOneViewSqlitePlugin = new OneViewSqlitePlugin();
        try {
            OneViewConsole.Debug("UpdateNormalizeCode start", "DataCaptureBO.UpdateNormalizeCode");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateNormalizeCode");
            
            var oDateTime = new DateTime();
            var CurrentDateAndTime = oDateTime.GetDateAndTime();
            var DCResultId = oDataCaptureDAO.GetDcResultId_DAO(DCId, LoginUserId);
            var DCResultDetailEntityLstFromForm = [];

            if (AttributesList == undefined) {
                DCResultDetailEntityLstFromForm = MyInstance.GetDcResultDetailsEntity(oScope, TemplateNodes, CurrentDateAndTime, DCId, DCResultId);
                MyInstance.CreateDynamicElements(DCResultDetailEntityLstFromForm);
            }

            var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
            var IsFirstTime = false;
            var IsSaved = false;
            var ModifiedDCResultDetailEntityLst;
            var _oDcResultDetailsHistoryDAO = new DcResultDetailsHistoryDAO();
            ModifiedDCResultDetailEntityLst = GetModifiedData(AttributesList, DCResultDetailEntityLstFromForm, DCResultId, PreEditData, DCId,TemplateNodes);
           // alert('ModifiedDCResultDetailEntityLst 1 :' + JSON.stringify(ModifiedDCResultDetailEntityLst));
            try
            {
                //alert('DCResultId :' + DCResultId + "," + 'IsFirstTime : ' + IsFirstTime)
                _oOneViewSqlitePlugin.StartTransaction();
                if (DCResultId == 0) {
                    //create DCResultId
                    if (ModifiedDCResultDetailEntityLst.length > 0) {
                        var InsertData = InsertDCResults(CurrentDateAndTime, AttributesList, IsFirstTime, DCId);
                        DCResultDetailEntity = InsertData.DCResultDetailEntity;
                        DCResultId = InsertData.DCResultId;
                        IsFirstTime = InsertData.IsFirstTime;
                    }
                }

                else {
                    UpdateShift(ModifiedDCResultDetailEntityLst, DCResultId, AttributesList, CurrentDateAndTime);
                }

                if (IsFirstTime == true) {
                    var ModifiedDCResultDetailEntityLst;
                    ModifiedDCResultDetailEntityLst = GetModifiedData(AttributesList, DCResultDetailEntityLstFromForm, DCResultId, PreEditData, DCId,TemplateNodes);
                    //alert('ModifiedDCResultDetailEntityLst 2 :' + JSON.stringify(ModifiedDCResultDetailEntityLst));
                    InsertMultiMediaBlobSubElements(ModifiedDCResultDetailEntityLst);
                    _oDcResultDetailsEntityDAO.CreateMasters(ModifiedDCResultDetailEntityLst);
                    var _oDcResultDetailsHistoryList = MyInstance.GetDcResultDetailsHistory(ModifiedDCResultDetailEntityLst, "");
                    _oDcResultDetailsHistoryDAO.Create(_oDcResultDetailsHistoryList);
                    IsSaved = true;
                }
                else {
                  
                    //IsSaved = NormalizeAndUpdateDcResultDetailsRecords(ModifiedDCResultDetailEntityLst, DCId, LoginUserId, AttributesList, IsSaved);                 
                    var Response = NormalizeAndUpdateDcResultDetailsRecords(ModifiedDCResultDetailEntityLst, DCId, LoginUserId, AttributesList, IsSaved, DCResultId,TemplateNodes);
                    //alert('Response.DcResultDetailsEntityList :' + JSON.stringify(Response.DcResultDetailsEntityList));
                    IsSaved = Response.IsSaved;
                    var _oDcResultDetailsHistoryList = GetModifiedDCResultDetailHistoryWithParentId(DCResultDetailEntityLstFromForm, Response.DcResultDetailsEntityList);
                    _oDcResultDetailsHistoryDAO.Create(_oDcResultDetailsHistoryList);
                }

                // Need to delete
                UpdateComments();

                if (ScoreDetails != undefined && ScoreDetails != null) {
                    UpdateScoreAndPercentage(ScoreDetails);
                }
                //alert('IsNCDC : ' + IsNCDC);
                if (IsNCDC != true) {
                    CPDcResultsId = DCResultId;
                    //alert('CPDcResultsId : ' + CPDcResultsId);

                    MyInstance.UpdateCustomActionInDb();

                    MyInstance.UpdateCommentsInDcResultDetails();
                }
                _oOneViewSqlitePlugin.EndTransaction();
            }
            catch (Excep) {                
                OneViewConsole.Error("Error in UpdateDC in SaveNCMapping", "DataCaptureBO.UpdateNormalizeCode");
                _oOneViewSqlitePlugin.Rollback();
            }
            UpdatedCompletedStatus(AttributesList, DCId, DCResultDetailEntityLstFromForm, IsAutoSubmit);
            return IsSaved;
           

            OneViewConsole.Debug("UpdateNormalizeCode end", "DataCaptureBO.UpdateNormalizeCode");

        }
        catch (Excep) {
            //alert('DataCaptureBO.UpdateNormalizeCode 1' + Excep);
            //alert('DataCaptureBO.UpdateNormalizeCode 2' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNormalizeCode", Excep);
        }
        finally {
            oDateTime = null;
            CurrentDateAndTime = null;
            DCResultId = null;
            DCResultDetailEntityLstFromForm = null;
            _oDcResultDetailsEntityDAO = null;
            IsFirstTime = null;
            IsSaved = null;
            ModifiedDCResultDetailEntityLst = null;
            InsertData = null;
        }
    }

    var UpdateComments = function () {

        try {           
            if (OneViewSessionStorage.Get("TemplateId") == 44) {
                var _OneViewSqlitePlugin = new OneViewSqlitePlugin();
                var DcId = OneViewSessionStorage.Get("DcId");
                for (var itrAttribue in ObservationResult) {

                    var DCNCMappingQuery = "UPDATE DcResultDetailsEntity SET Comments = '" + ObservationResult[itrAttribue].Comments + "' WHERE AttributeNodeId = '" + itrAttribue + "' AND DataCaptureId = " + DcId;                  
                    _OneViewSqlitePlugin.ExcecuteSql(DCNCMappingQuery);
                }
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateComments", Excep);
        }
    }

    var GetModifiedData = function (AttributesList, DCResultDetailEntityLstFromForm, DCResultId, PreEditData, DCId, TemplateNodes)
    {
        try
        {
           // alert('DCResultId : ' + DCResultId + ", DCResultDetailEntityLstFromForm" + JSON.stringify(DCResultDetailEntityLstFromForm) );
            //alert(" AttributesList : " + JSON.stringify(AttributesList) + ' , PreEditData:' + JSON.stringify(PreEditData))

            OneViewConsole.Debug("GetModifiedData start", "DataCaptureBO.GetModifiedData");
           
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.GetModifiedData");

            //alert('AttributesList' + JSON.stringify(AttributesList));

            var ModifiedList;
            if (AttributesList == undefined) {
                ModifiedList = GetModifiedDCResultDetailEntityWithParentId(DCResultDetailEntityLstFromForm, DCResultId, PreEditData,TemplateNodes);
            }
            else if (DCResultId > 0) {

                ModifiedList = MyInstance.GetDcResultDetailsEntityForInlineEdit(AttributesList, DCId, DCResultId);

                // ModifiedList = AttributesList;
            }
            else {
                ModifiedList = AttributesList; 
            }

          //  alert('ModifiedList : ' + JSON.stringify(ModifiedList));
            OneViewConsole.Debug("GetModifiedData end", "DataCaptureBO.GetModifiedData");
            return ModifiedList;
        }
        catch (Excep) {
            //alert('DataCaptureBO.GetModifiedData 1' + Excep);
            //alert('DataCaptureBO.GetModifiedData 2' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetModifiedData", Excep);
        }
        finally {
            ModifiedList = null;
        }
    }

    var UpdateShift = function (ModifiedDCResultDetailEntityLst, DCResultId, AttributesList, CurrentDateAndTime)
    {
        try
        {
            OneViewConsole.Debug("UpdateShift start", "DataCaptureBO.UpdateShift");
            OneViewConsole.DataLog("DCResultId :" + DCResultId, "DataCaptureBO.UpdateShift");
            OneViewConsole.DataLog("ModifiedDCResultDetailEntityLst :" + JSON.stringify(ModifiedDCResultDetailEntityLst), "DataCaptureBO.UpdateShift");
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.UpdateShift");

            if (ModifiedDCResultDetailEntityLst.length > 0) {
                ///Set Shift
                if (AttributesList == undefined) {
                    var _oDefaultMasterDAOObj = new DefaultMasterDAO("DcResultsEntity");
                    var oDCResultsEntity = _oDefaultMasterDAOObj.GetAllMastersByColumn('Id', DCResultId, 'INT');
                    MyInstance.SetShift(oDCResultsEntity);
                    if (oDCResultsEntity.ShiftName != "" && oDCResultsEntity.ShiftName != "" && oDCResultsEntity.ShiftId != undefined && oDCResultsEntity.ShiftName != undefined) {
                        oDataCaptureDAO.UpdateDCResults(oDCResultsEntity, CurrentDateAndTime);
                    }
                }
            }

            OneViewConsole.Debug("UpdateShift end", "DataCaptureBO.UpdateShift");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateShift", Excep);
        }
        finally {
            _oDefaultMasterDAOObj = null;
            oDCResultsEntity = null;
        }
    }

    var InsertDCResults = function (CurrentDateAndTime, AttributesList, IsFirstTime, DCId)
    {
        try
        {
           
            OneViewConsole.Debug("InsertDCResults start", "DataCaptureBO.InsertDCResults");
            OneViewConsole.DataLog("CurrentDateAndTime :" + CurrentDateAndTime, "DataCaptureBO.InsertDCResults");
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.InsertDCResults");
            OneViewConsole.DataLog("IsFirstTime :" + IsFirstTime, "DataCaptureBO.InsertDCResults");

           
            //create DCResultId
            var _DcResultDetailsEntity = MyInstance.GetDCResultsEntity(CurrentDateAndTime);

            ///Set Shift
            if (AttributesList == undefined) {
                MyInstance.SetShift(_DcResultDetailsEntity);
            }
            //insert into DB
            _DcResultDetailsEntity.DataCaptureId = DCId;
            var _oDefaultMasterDAO = new DefaultMasterDAO("DcResultsEntity");

            DCResultDetailEntity = _oDefaultMasterDAO.CreateMaster(_DcResultDetailsEntity);
            DCResultId = DCResultDetailEntity.Id;

            IsFirstTime = true;

            OneViewConsole.Debug("InsertDCResults end", "DataCaptureBO.InsertDCResults");

            return { DCResultDetailEntity: DCResultDetailEntity, DCResultId: DCResultId, IsFirstTime: IsFirstTime };
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.InsertDCResults", Excep);
        }
        finally {
            _DcResultDetailsEntity = null;
            _oDefaultMasterDAO = null;
        }
    }

    var NormalizeAndUpdateDcResultDetailsRecords = function (ModifiedDCResultDetailEntityLst, DCId, LoginUserId, AttributesList, IsSaved, DCResultId, TemplateNodes)
    {
        try
        {
            OneViewConsole.Debug("NormalizeAndUpdateDcResultDetailsRecords start", "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            OneViewConsole.DataLog("ModifiedDCResultDetailEntityLst :" + JSON.stringify(ModifiedDCResultDetailEntityLst), "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            OneViewConsole.DataLog("LoginUserId :" + LoginUserId, "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            var _oDcResultDetailsEntityDAO = new DefaultMasterDAO("DcResultDetailsEntity");
            var Response = { 'DcResultDetailsEntityList': [], 'IsSaved': false }; 
            if (ModifiedDCResultDetailEntityLst.length > 0) {             
                
                var DcResultDetailsEntityLstFromDB = oDataCaptureDAO.GetDcResultDetails_DAO(DCId, LoginUserId);
               // alert('DcResultDetailsEntityLstFromDB :' + JSON.stringify(DcResultDetailsEntityLstFromDB));
                var FinalDCResultDetailEntityToCreate = [];
                var FinalDCResultDetailEntityToUpdate = [];
                for (var i = 0; i < ModifiedDCResultDetailEntityLst.length; i++) {
                    var AttributeNodeId = ModifiedDCResultDetailEntityLst[i].AttributeNodeId;
                    var ControlId = ModifiedDCResultDetailEntityLst[i].ControlId;                    
                    var IsCheckBoxList = MyInstance.CheckIsMultiSelectCheckBox(AttributeNodeId, ControlId, TemplateNodes);
                  //  alert(AttributeNodeId + "," + ControlId + "," + IsCheckBoxList);
                    var DCResultDetailId;
                    var DCResultDetail = null;
                    var IsDisable = false;
                    if (IsCheckBoxList != true) {
                        DCResultDetailId = GetDCResultDetailId(DcResultDetailsEntityLstFromDB, AttributeNodeId, ControlId);
                    }
                    else {                      
                        var Answer = ModifiedDCResultDetailEntityLst[i].Answer;
                        IsDisable = ModifiedDCResultDetailEntityLst[i].IsDisable;
                        DCResultDetail = GetDCResultDetailIdForCheckBoxList(DcResultDetailsEntityLstFromDB, AttributeNodeId, ControlId, Answer);
                        //alert('DCResultDetail :' + JSON.stringify(DCResultDetail));
                       // alert(AttributeNodeId + " , " + ControlId + " , Answer : " + Answer + " , IsDisable : " + IsDisable + " , DCResultDetailId : " + DCResultDetailId)
                    }


                    if (IsCheckBoxList != true && DCResultDetailId != 0) {
                        //Update case for single select answermodes
                        ModifiedDCResultDetailEntityLst[i].Id = DCResultDetailId;
                        var IndexToUpdate = 0;
                        FinalDCResultDetailEntityToUpdate.push({ Id: DCResultDetailId, AnswerValue: ModifiedDCResultDetailEntityLst[i].AnswerValue, Answer: ModifiedDCResultDetailEntityLst[i].Answer, AnswerFKType: ModifiedDCResultDetailEntityLst[i].AnswerFKType, Latitude: ModifiedDCResultDetailEntityLst[i].Latitude, Longitude: ModifiedDCResultDetailEntityLst[i].Longitude, 'IsDisable': IsDisable, 'IndexId': IndexToUpdate });                        
                    }
                    else if (IsCheckBoxList == true && DCResultDetail != null) {
                        //Update case for multi select answermodes
                        ModifiedDCResultDetailEntityLst[i].Id = DCResultDetail.Id;
                        DCResultDetailId = DCResultDetail.Id;
                      //  alert(' ModifiedDCResultDetailEntityLst[i].AnswerValue : ' + ModifiedDCResultDetailEntityLst[i].AnswerValue);
                      //  alert(' ModifiedDCResultDetailEntityLst[i].AnswerValue : ' + ModifiedDCResultDetailEntityLst[i].AnswerValue + ' ModifiedDCResultDetailEntityLst[i].IndexId : ' + ModifiedDCResultDetailEntityLst[i].IndexId);
                        //var IndexToUpdate = (ModifiedDCResultDetailEntityLst[i].IndexId != undefined ? ModifiedDCResultDetailEntityLst[i].IndexId : 0);
                        var IndexToUpdate = DCResultDetail.IndexId;
                        //alert('IndexToUpdate : ' + IndexToUpdate);
                        FinalDCResultDetailEntityToUpdate.push({ Id: DCResultDetailId, AnswerValue: ModifiedDCResultDetailEntityLst[i].AnswerValue, Answer: ModifiedDCResultDetailEntityLst[i].Answer, AnswerFKType: ModifiedDCResultDetailEntityLst[i].AnswerFKType, Latitude: ModifiedDCResultDetailEntityLst[i].Latitude, Longitude: ModifiedDCResultDetailEntityLst[i].Longitude, 'IsDisable': IsDisable, 'IndexId': IndexToUpdate });
                    }
                    else {
                        //Create case for all the types of answermodes
                        if (AttributesList != undefined) {
                            ModifiedDCResultDetailEntityLst = MyInstance.GetDcResultDetailsEntityForInlineEdit(AttributesList, DCId, DCResultId);
                        }
                        FinalDCResultDetailEntityToCreate.push(ModifiedDCResultDetailEntityLst[i]);
                    }

                }
                //alert('FinalDCResultDetailEntityToCreate : ' + JSON.stringify(FinalDCResultDetailEntityToCreate));
                //alert('FinalDCResultDetailEntityToUpdate : ' + JSON.stringify(FinalDCResultDetailEntityToUpdate));

                if (FinalDCResultDetailEntityToCreate.length > 0) {                   
                    for (var i = 0; i < FinalDCResultDetailEntityToCreate.length; i++) {
                        if (FinalDCResultDetailEntityToCreate[i].AnswerFKType == DATEntityType.MultiMediaBlobSubElements) {
                            var oMultiMediaBlobSubElementEntity = FinalDCResultDetailEntityToCreate[i].Answer;
                            CreateMultiMediaBlobSubElements(oMultiMediaBlobSubElementEntity);                          
                            FinalDCResultDetailEntityToCreate[i].Answer = oMultiMediaBlobSubElementEntity.ClientGuid;
                        }                       
                        _oDcResultDetailsEntityDAO.CreateMaster(FinalDCResultDetailEntityToCreate[i]);
                        IsSaved = true;
                    }
                }
               // alert('FinalDCResultDetailEntityToCreate : ' + JSON.stringify(FinalDCResultDetailEntityToCreate))
               // alert('FinalDCResultDetailEntityToUpdate : ' + JSON.stringify(FinalDCResultDetailEntityToUpdate))
                if (FinalDCResultDetailEntityToUpdate.length > 0) {                    
                    for (var i = 0; i < FinalDCResultDetailEntityToUpdate.length; i++) {
                        if (FinalDCResultDetailEntityToUpdate[i].AnswerFKType == DATEntityType.MultiMediaBlobSubElements) {
                            var oMultiMediaBlobSubElementEntity = FinalDCResultDetailEntityToUpdate[i].Answer;
                            //Check Mediablob
                            var resultData = CheckMultiMediaBlobSubElementsExist(FinalDCResultDetailEntityToUpdate[i].Id);
                            if (resultData[0].Answer != '') {
                                //UpdateMultiMediaBlobSubElements(oMultiMediaBlobSubElementEntity, FinalDCResultDetailEntityToUpdate[i].Id, resultData[0].Answer);
                                //alert(" resultData[0].Answer) :" + resultData[0].Answer + "  resultData[0].ClientGuid) :" + resultData[0].ClientGuid)
                                UpdateMultiMediaBlobSubElements(oMultiMediaBlobSubElementEntity, resultData[0].Answer);
                                FinalDCResultDetailEntityToUpdate[i].Answer = resultData[0].Answer;
                            }
                            else {
                                CreateMultiMediaBlobSubElements(oMultiMediaBlobSubElementEntity);
                                FinalDCResultDetailEntityToUpdate[i].Answer = oMultiMediaBlobSubElementEntity.ClientGuid;
                            }
                            //FinalDCResultDetailEntityToCreate.Answer = FinalDCResultDetailEntityToCreate.ClientGuid;
                        }
                        oDataCaptureDAO.UpdateDcResultDetails_Obj(FinalDCResultDetailEntityToUpdate[i].Answer, FinalDCResultDetailEntityToUpdate[i].AnswerValue, FinalDCResultDetailEntityToUpdate[i].Id, FinalDCResultDetailEntityToUpdate[i].Latitude, FinalDCResultDetailEntityToUpdate[i].Longitude,  FinalDCResultDetailEntityToUpdate[i].IsDisable, FinalDCResultDetailEntityToUpdate[i].IndexId);
                        if (FinalDCResultDetailEntityToUpdate[i].Answer != '') {
                            IsSaved = true;
                        }
                    }

                }
                Response.DcResultDetailsEntityList = DcResultDetailsEntityLstFromDB;
                Response.IsSaved = IsSaved;
            }
            OneViewConsole.Debug("NormalizeAndUpdateDcResultDetailsRecords end", "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords");
            return Response;
        }
        catch (Excep) {
           // alert("DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords Excep1 :" + Excep);
           // alert("DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords Excep 2 :" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.NormalizeAndUpdateDcResultDetailsRecords", Excep);
        }
        finally {
            DcResultDetailsEntityLstFromDB = null;
            FinalDCResultDetailEntityToCreate = null;
            FinalDCResultDetailEntityToUpdate = null;
            AttributeNodeId = null;
            ControlId = null;
            DCResultDetailId = null;
            oMultiMediaBlobSubElementEntity = null;
            resultData = null;
        }
    }

    var UpdatedCompletedStatus = function (AttributesList, DCId, DCResultDetailEntityLstFromForm, IsAutoSubmit)
    { try {
        OneViewConsole.Debug("UpdatedCompletedStatus start", "DataCaptureBO.UpdatedCompletedStatus");
         
        var ObjDcResultDetails;
        if (AttributesList == undefined) {
            ObjDcResultDetails = DCResultDetailEntityLstFromForm;
        }
        else {           
            ObjDcResultDetails = MyInstance.GetLastUpdatedDcResultDetailsForViewRecordsInlineEdit(DCId);
        }
        UpdateDCIsCompletedStatus(DCId, ObjDcResultDetails, IsAutoSubmit);

        OneViewConsole.Debug("UpdatedCompletedStatus end", "DataCaptureBO.UpdatedCompletedStatus");
    }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdatedCompletedStatus", Excep);
        }
        finally {
            ObjDcResultDetails = null;
        }
    }

    this.GetLastUpdatedDcResultDetailsForViewRecordsInlineEdit = function (DCId) {

        try {
            var oDataCapture = oDataCaptureDAO.GetDCById(DCId);
            var ObjDcResultDetails = oDataCapture.DcResultsEntitylist[0].DcResultDetailsEntityList;

            if (oDataCapture.DcResultsEntitylist.length == 1) {
                return ObjDcResultDetails;
            }
            else {
                var Result = [];
                var _DateTime = new DateTime();

                var DCResultDetails = oDataCaptureDAO.GetDCResultDetailsForInlineEdit(DCId);
                //alert(DCResultDetails.length);

                var CurrentResultDetail = DCResultDetails[0];

                for (var i = 1; i < DCResultDetails.length; i++) {                    
                    if (CurrentResultDetail.AttributeNodeId == DCResultDetails[i].AttributeNodeId && CurrentResultDetail.ControlId == DCResultDetails[i].ControlId) {
                        if (_DateTime.GetDateByString(CurrentResultDetail.LastUpdatedDate) < _DateTime.GetDateByString(DCResultDetails[i].LastUpdatedDate)) {
                            CurrentResultDetail = DCResultDetails[i];
                        }
                    }
                    else {
                        Result.push(CurrentResultDetail);
                        CurrentResultDetail = DCResultDetails[i];                      
                    }                  
                    if (i == DCResultDetails.length - 1) {
                        Result.push(CurrentResultDetail);
                    }
                }

                //alert(Result.length);

                return Result;
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetLastUpdatedDcResultDetailsForViewRecordsInlineEdit", Excep);
        }
        finally {
            oDataCapture = null;
            ObjDcResultDetails = null;
        }
    }

    var CreateMultiMediaBlobSubElements = function (oMultiMediaBlobSubElementEntity) {
        try {
            OneViewConsole.Debug("CreateMultiMediaBlobSubElements start", "DataCaptureBO.CreateMultiMediaBlobSubElements");
            OneViewConsole.DataLog("MultiMediaBlobSubElementEntity :" + JSON.stringify(oMultiMediaBlobSubElementEntity), "DataCaptureBO.CreateMultiMediaBlobSubElements");

            var MultiMediaBlobSubElementsDAO = new DefaultMasterDAO("MultiMediaBlobSubElements"); // .Count();
            MultiMediaBlobSubElementsDAO.CreateMaster(oMultiMediaBlobSubElementEntity);

            OneViewConsole.Debug("CreateMultiMediaBlobSubElements end", "DataCaptureBO.CreateMultiMediaBlobSubElements");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateMultiMediaBlobSubElements", Excep);
        }
        finally {
            MultiMediaBlobSubElementsDAO = null;
        }
    }

    var UpdateMultiMediaBlobSubElements = function (oMultiMediaBlobSubElementEntity, ClientGuid) {
        try {
            OneViewConsole.Debug("UpdateMultiMediaBlobSubElements start", "DataCaptureBO.UpdateMultiMediaBlobSubElements");
            OneViewConsole.DataLog("MultiMediaBlobSubElementEntity :" + JSON.stringify(oMultiMediaBlobSubElementEntity), "DataCaptureBO.UpdateMultiMediaBlobSubElements");
            OneViewConsole.DataLog("ClientGuid :" + ClientGuid, "DataCaptureBO.UpdateMultiMediaBlobSubElements");

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            var Query = "UPDATE MultiMediaBlobSubElements SET DataURL='" + oMultiMediaBlobSubElementEntity.DataURL + "' , TimeStamp='" + CurrenntDateAndTime + "',IsSynchronized='false' WHERE ClientGuid='" + ClientGuid + "'";

            //alert('ClientGuid :' + ClientGuid + ' , Query  : ' + Query);
            window.OneViewSqlite.excecuteSql(Query);

            OneViewConsole.Debug("UpdateMultiMediaBlobSubElements end", "DataCaptureBO.UpdateMultiMediaBlobSubElements");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateMultiMediaBlobSubElements", Excep);
        }
        finally {
            Query = null;
        }
    }

    var CheckMultiMediaBlobSubElementsExist = function (Id)
    {
        try
        {
            OneViewConsole.Debug("CheckMultiMediaBlobSubElementsExist start", "DataCaptureBO.CheckMultiMediaBlobSubElementsExist");
            OneViewConsole.DataLog("Id :" + Id, "DataCaptureBO.CheckMultiMediaBlobSubElementsExist");

            var Query = "SELECT * FROM DcResultDetailsEntity WHERE Id=" + Id + "";
            var result = window.OneViewSqlite.excecuteSqlReader(Query);
            result = JSON.parse(result);

            OneViewConsole.Debug("CheckMultiMediaBlobSubElementsExist end", "DataCaptureBO.CheckMultiMediaBlobSubElementsExist");
            return result;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckMultiMediaBlobSubElementsExist", Excep);
        }
        finally {
            Query = null;
            result = null;
        }
    }

    var GetModifiedDCResultDetailEntityWithParentId = function (DCResultDetailEntityLstFrom, DCResultId, PreEditData, TemplateNodes) {
        try
        {
            OneViewConsole.Debug("GetModifiedDCResultDetailEntityWithParentId start", "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId");
            OneViewConsole.DataLog("DCResultDetailEntityLstFrom :" + JSON.stringify(DCResultDetailEntityLstFrom), "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId");
            OneViewConsole.DataLog("DCResultId :" + DCResultId, "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId");
            OneViewConsole.DataLog("PreEditData :" + JSON.stringify(PreEditData), "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId");

            
            //alert(DCResultId +","+ JSON.stringify(DCResultDetailEntityLstFrom))
            //alert('PreEditData' + JSON.stringify(PreEditData));
            var DCResultDetailEntityLstToUpdate = [];
            for (var i = 0; i < DCResultDetailEntityLstFrom.length; i++) {
                var oDCResultDetailEntity = DCResultDetailEntityLstFrom[i];
                oDCResultDetailEntity.DataResultsId = DCResultId;
                var IsCheckBoxList = MyInstance.CheckIsMultiSelectCheckBox(oDCResultDetailEntity.AttributeNodeId, oDCResultDetailEntity.ControlId,TemplateNodes);
                if (IsCheckBoxList != true) {
                    var PreEditValue = "";
                    if (PreEditData[oDCResultDetailEntity.AttributeNodeId] != undefined && PreEditData[oDCResultDetailEntity.AttributeNodeId][oDCResultDetailEntity.ControlId] != undefined) {
                        PreEditValue = PreEditData[oDCResultDetailEntity.AttributeNodeId][oDCResultDetailEntity.ControlId].Answer;
                    }
                    //var CurrentValue = oDCResultDetailEntity.Answer;
                    //alert(JSON.stringify(PreEditData[i]));
                    //var PreEditValue = (PreEditData[i] != undefined && PreEditData[i] != null) ? PreEditData[i].Answer : "";
                    var CurrentValue = (oDCResultDetailEntity != undefined && oDCResultDetailEntity != null) ? oDCResultDetailEntity.Answer : "";

                    // alert('CurrentValue' + CurrentValue);
                    if (oDCResultDetailEntity.AnswerDataType == "DATAURL") {
                        if (oDCResultDetailEntity.Answer != "") {
                            DCResultDetailEntityLstToUpdate.push(oDCResultDetailEntity);
                        }
                    }
                    else if (PreEditValue != CurrentValue) {
                        //alert('AttributeNodeId : ' + oDCResultDetailEntity.AttributeNodeId + ',PreEditValue : ' + PreEditValue + "," + 'CurrentValue' + CurrentValue);
                        DCResultDetailEntityLstToUpdate.push(oDCResultDetailEntity);
                    }
                    else if ((PreEditValue == "" || PreEditValue == undefined || PreEditValue == null) && (CurrentValue === 0)) {
                        DCResultDetailEntityLstToUpdate.push(oDCResultDetailEntity);
                    }
                }
                
            }
            //alert('DCResultId : ' + DCResultId);
            DCResultDetailEntityLstToUpdate = MyInstance.GetCheckboxListForUpdate(DCResultDetailEntityLstToUpdate,DCResultId);

           // alert('DCResultDetailEntityLstToUpdate' + JSON.stringify(DCResultDetailEntityLstToUpdate));
            OneViewConsole.Debug("GetModifiedDCResultDetailEntityWithParentId end", "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId");
            return DCResultDetailEntityLstToUpdate;
        }
        catch (Excep) {
            //alert('DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId 1' + Excep);
           // alert('DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId 2' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId", Excep);
        }
        finally {
            DCResultDetailEntityLstToUpdate = null;
            oDCResultDetailEntity = null;
            PreEditValue = null;
            CurrentValue = null;
        }
    }

    var InsertMultiMediaBlobSubElements = function (DCResultDetailEntityLstFrom) {
        try {
            OneViewConsole.Debug("InsertMultiMediaBlobSubElements start", "DataCaptureBO.InsertMultiMediaBlobSubElements");
          
           
            for (var i = 0; i < DCResultDetailEntityLstFrom.length; i++) {
                var oDCResultDetailEntity = DCResultDetailEntityLstFrom[i];

                if (oDCResultDetailEntity.AnswerDataType == "DATAURL") {
                    if (oDCResultDetailEntity.Answer != "") {                        
                        if (oDCResultDetailEntity.Answer.Id != undefined) {
                         
                            var oMultiMediaBlobSubElementEntity = oDCResultDetailEntity.Answer;
                            CreateMultiMediaBlobSubElements(oMultiMediaBlobSubElementEntity);
                            oDCResultDetailEntity.Answer = oMultiMediaBlobSubElementEntity.ClientGuid;
                            
                        }
                       
                    }
                }               
            }
          
        }
        catch (Excep) {
            //alert('DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId 1' + Excep);
            // alert('DataCaptureBO.GetModifiedDCResultDetailEntityWithParentId 2' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.InsertMultiMediaBlobSubElements", Excep);
        }
        finally {
    
            oDCResultDetailEntity = null;
       
        }
    }

    var GetModifiedDCResultDetailHistoryWithParentId = function (DCResultDetailEntityLstFrom, PreEditData) {
        try {
            OneViewConsole.Debug("GetModifiedDCResultDetailHistoryWithParentId start", "DataCaptureBO.GetModifiedDCResultDetailHistoryWithParentId");
            OneViewConsole.DataLog("DCResultDetailEntityLstFrom :" + JSON.stringify(DCResultDetailEntityLstFrom), "DataCaptureBO.GetModifiedDCResultDetailHistoryWithParentId");
            OneViewConsole.DataLog("PreEditData :" + JSON.stringify(PreEditData), "DataCaptureBO.GetModifiedDCResultDetailHistoryWithParentId");
            var DcResultDetailsHistoryList = [];
            var OldValue = [];           
            for (var i = 0; i < DCResultDetailEntityLstFrom.length; i++) {
                var oDCResultDetailEntity = DCResultDetailEntityLstFrom[i];
                if (PreEditData[oDCResultDetailEntity.AttributeNodeId] != undefined && PreEditData[oDCResultDetailEntity.AttributeNodeId][oDCResultDetailEntity.ControlId] != undefined && PreEditData[oDCResultDetailEntity.AttributeNodeId].AttributeNodeId == oDCResultDetailEntity.AttributeNodeId) {
                    //var PreEditValue = (PreEditData[i] != undefined && PreEditData[i] != null) ? PreEditData[i].Answer : "";
                    var PreEditValue = "";
                    if (PreEditData[oDCResultDetailEntity.AttributeNodeId] != undefined && PreEditData[oDCResultDetailEntity.AttributeNodeId][oDCResultDetailEntity.ControlId] != undefined) {
                        PreEditValue = PreEditData[oDCResultDetailEntity.AttributeNodeId][oDCResultDetailEntity.ControlId].Answer;
                    }
                    var CurrentValue = (oDCResultDetailEntity != undefined && oDCResultDetailEntity != null) ? oDCResultDetailEntity.Answer : "";
                    if (PreEditValue != CurrentValue) {
                        OldValue.push(PreEditValue);
                        oDCResultDetailEntity.ClientGuid = PreEditData[i].ClientGuid;
                        DcResultDetailsHistoryList.push(oDCResultDetailEntity);
                    }
                }
            }
            var UpdateDcResultDetailsHistoryList = MyInstance.GetDcResultDetailsHistory(DcResultDetailsHistoryList, OldValue);
            OneViewConsole.Debug("GetModifiedDCResultDetailHistoryWithParentId end", "DataCaptureBO.GetModifiedDCResultDetailHistoryWithParentId");
            return UpdateDcResultDetailsHistoryList;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetModifiedDCResultDetailHistoryWithParentId", Excep);
        }
        finally {
            DCResultDetailEntityLstToUpdate = null;
            oDCResultDetailEntity = null;
            PreEditValue = null;
            CurrentValue = null;
        }
    }

    var GetDCResultDetailId = function (DCResultDetailsListFromDB, AttributeNodeId, ControlId) {
        try {
            OneViewConsole.Debug("GetDCResultDetailId start", "DataCaptureBO.GetDCResultDetailId");
            OneViewConsole.DataLog("DCResultDetailsListFromDB :" + JSON.stringify(DCResultDetailsListFromDB), "DataCaptureBO.GetDCResultDetailId");
            OneViewConsole.DataLog("AttributeNodeId :" + AttributeNodeId, "DataCaptureBO.GetDCResultDetailId");
            OneViewConsole.DataLog("ControlId :" + ControlId, "DataCaptureBO.GetDCResultDetailId");

            var DCResultDetailId = 0;
            for (var i = 0; i < DCResultDetailsListFromDB.length; i++) {
                if (DCResultDetailsListFromDB[i].AttributeNodeId == AttributeNodeId && DCResultDetailsListFromDB[i].ControlId == ControlId) {
                    DCResultDetailId = DCResultDetailsListFromDB[i].Id;
                    //DCResultDetailsListFromDB[i] = null;
                    break;
                }
            }
            OneViewConsole.Debug("GetDCResultDetailId end", "DataCaptureBO.GetDCResultDetailId");
            return DCResultDetailId;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCResultDetailId", Excep);
        }
        finally {
            DCResultDetailId = null;
        }
    }

    var GetDCResultDetailIdForCheckBoxList = function (DCResultDetailsListFromDB, AttributeNodeId, ControlId, Answer) {
        try {
            OneViewConsole.Debug("GetDCResultDetailIdForCheckBoxList start", "DataCaptureBO.GetDCResultDetailIdForCheckBoxList");
            OneViewConsole.DataLog("DCResultDetailsListFromDB :" + JSON.stringify(DCResultDetailsListFromDB), "DataCaptureBO.GetDCResultDetailIdForCheckBoxList");
            OneViewConsole.DataLog("AttributeNodeId :" + AttributeNodeId, "DataCaptureBO.GetDCResultDetailIdForCheckBoxList");
            OneViewConsole.DataLog("ControlId :" + ControlId, "DataCaptureBO.GetDCResultDetailIdForCheckBoxList");

            var DCResultDetail = null;
            for (var i = 0; i < DCResultDetailsListFromDB.length; i++) {
                if (DCResultDetailsListFromDB[i].AttributeNodeId == AttributeNodeId && DCResultDetailsListFromDB[i].ControlId == ControlId && DCResultDetailsListFromDB[i].Answer == Answer) {
                    DCResultDetail = DCResultDetailsListFromDB[i];
                    break;
                }
            }

            OneViewConsole.Debug("GetDCResultDetailIdForCheckBoxList end", "DataCaptureBO.GetDCResultDetailIdForCheckBoxList");
            return DCResultDetail;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCResultDetailIdForCheckBoxList", Excep);
        }
        finally {
           // DCResultDetailId = null;
        }
    }

    var GetNewIndexForCheckBoxList = function (DCResultDetailsListFromDB, AttributeNodeId, ControlId) {
        try {
            OneViewConsole.Debug("GetNewIndexForCheckBoxList start", "DataCaptureBO.GetNewIndexForCheckBoxList");
        
            var NewIndex = 0;
            var Index = 0;
            var IsExists = false;
            for (var i = 0; i < DCResultDetailsListFromDB.length; i++) {
                if (DCResultDetailsListFromDB[i].AttributeNodeId == AttributeNodeId && DCResultDetailsListFromDB[i].ControlId == ControlId) {
                    if (IsExists == false) {
                        IsExists = true;
                    }
                    if (DCResultDetailsListFromDB[i].Index > Index) {
                        Index = DCResultDetailsListFromDB[i].Index;
                    }
                }
            }

            if (IsExists == true) {
                NewIndex = parseInt(Index) + 1;
            }
            else {
                NewIndex = Index;
            }
            
            OneViewConsole.Debug("GetNewIndexForCheckBoxList end", "DataCaptureBO.GetNewIndexForCheckBoxList");
            return NewIndex;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetNewIndexForCheckBoxList", Excep);
        }
        finally {
            DCResultDetailId = null;
        }
    }
    //############## Update DC  Start ################


    //############## Shift  Start ################

    ///Load All Shifts in DC Page
    this.LoadShiftOLD = function () {
        try {

            OneViewConsole.Debug("LoadShift start", "DataCaptureBO.LoadShift");

            var DefaultMasterDAOObj = new DefaultMasterDAO("ShiftMasterEntity");
            var Shifts = DefaultMasterDAOObj.GetAllMasters();
            var oShift = new AnswerModeUserControl({ 'Scope': oScope, 'ControlId': 'chkShift', 'DataSourceModelName': 'ShiftOptions', 'DisplayElementModelName': 'NewDCModel.chkShift' });
            oShift.LoadShift(Shifts);

            OneViewConsole.Debug("LoadShift end", "DataCaptureBO.LoadShift");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadShift", Excep);
        }
        finally {
            DefaultMasterDAOObj = null;
            Shifts = null;
            oShift = null;
        }
    }

    this.LoadShift22 = function () {
        try {
            OneViewConsole.Debug("LoadShift start", "DataCaptureBO.LoadShift");

            var DefaultMasterDAOObj = new DefaultMasterDAO("ShiftMasterEntity");
            var Shifts = DefaultMasterDAOObj.GetAllMasters();
            var IsCurrentShift = false;
            
            oScope.chkShift = {
                text: "Select Shift", id: '0'
            };

            for (var i = 0; i < Shifts.length ; i++) {
                IsCurrentShift = MyInstance.CheckIsCurrentShift(Shifts[i]);

                if (IsCurrentShift == true) {
                    oScope.chkShift = {
                        text: Shifts[i].Name, id: Shifts[i].ServerId
                    };
                }
                // oScope.ShiftList.push({ id: Shifts[i].ServerId, name: Shifts[i].Name });
                oScope.ShiftOptions.push({ id: Shifts[i].ServerId, text: Shifts[i].Name });

                IsCurrentShift = false;
            }
            OneViewConsole.Debug("LoadShift end", "DataCaptureBO.LoadShift");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadShift", Excep);
        }
        finally {
            DefaultMasterDAOObj = null;
            Shifts = null;
            oShift = null;
        }
    }


    this.LoadShift = function () {
        try {
            OneViewConsole.Debug("LoadShift start", "DataCaptureBO.LoadShift");

            //alert('GlobalShiftId 1  : ' + GlobalShiftId);

            var oDateTime = new DateTime();
            var DCDateTime = oDateTime.GetDateAndTime(); // CurrentDateTime : (dd-mm-yyyy hh:mm:ss)
            DCDateTime = oDateTime.ConvertDateTimeToInteger(DCDateTime);

            var _oShiftMasterDAO = new ShiftMasterDAO();
            if (GlobalShiftId == "" || GlobalShiftId == undefined || GlobalShiftId == null) {
                var ShiftList = _oShiftMasterDAO.GetValidShiftByService(ServiceId, DCDateTime);
                if (ShiftList.length > 0) {
                    GlobalShiftId = ShiftList[0].ServerId;
                    OneViewLocalStorage.Save("GlobalShiftId", GlobalShiftId);                   
                }
            }

            //alert('GlobalShiftId : ' + GlobalShiftId);

            if (GlobalShiftId != "" && GlobalShiftId != undefined && GlobalShiftId != null) {
                var ShiftDetailsList = _oShiftMasterDAO.GetShiftDetailsForSelectedShift(GlobalShiftId);
                var IsCurrentShift = false;

                oScope.chkShift = {
                    text: "Select Shift", id: '0'
                };

                for (var i = 0; i < ShiftDetailsList.length ; i++) {
                    IsCurrentShift = MyInstance.CheckIsCurrentShift(ShiftDetailsList[i]);

                    if (IsCurrentShift == true) {
                        oScope.chkShift = {
                            text: ShiftDetailsList[i].Name, id: ShiftDetailsList[i].ServerId
                        };
                    }
                    // oScope.ShiftList.push({ id: ShiftDetailsList[i].ServerId, name: ShiftDetailsList[i].Name });
                    oScope.ShiftOptions.push({ id: ShiftDetailsList[i].ServerId, text: ShiftDetailsList[i].Name });

                    IsCurrentShift = false;
                }
            }
            //alert('GlobalShiftId 2  : ' + GlobalShiftId);
            OneViewConsole.Debug("LoadShift end", "DataCaptureBO.LoadShift");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadShift", Excep);
        }
        finally {
            DefaultMasterDAOObj = null;
            Shifts = null;
            oShift = null;
        }
    }

    //Set Selected Shift in Dc Page
    this.SetShift = function (DcResultsEntity) {
        try
        {
            OneViewConsole.Debug("SetShift start", "DataCaptureBO.SetShift");
            OneViewConsole.DataLog("DcResultsEntity :" + JSON.stringify(DcResultsEntity), "DataCaptureBO.SetShift");

            if (MyInstance.IsShiftEnable == true) {
                var ShiftInfo = MyInstance.GetCurrentShiftInfo();
                DcResultsEntity.ShiftId = ShiftInfo.ShiftId;
                DcResultsEntity.ShiftName = ShiftInfo.ShiftName;
            }
            OneViewConsole.Debug("SetShift end", "DataCaptureBO.SetShift");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetShift", Excep);
        }
        finally {
            ShiftInfo = null;
        }
    }

    //Support method for 'SetShift' 
    this.GetCurrentShiftInfoOLD = function () {
        try {
            OneViewConsole.Debug("GetCurrentShiftInfo start", "DataCaptureBO.GetCurrentShiftInfo");

            var shiftdata = { ShiftId: oScope['chkShift'].GetSelectedValue(), ShiftName: oScope['chkShift'].GetSelectedText() };

            OneViewConsole.Debug("GetCurrentShiftInfo end", "DataCaptureBO.GetCurrentShiftInfo");
            return shiftdata;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCurrentShiftInfo", Excep);
        }
        finally {
            shiftdata = null;
        }
    }

    this.GetCurrentShiftInfo = function () {
        try {
            OneViewConsole.Debug("GetCurrentShiftInfo start", "DataCaptureBO.GetCurrentShiftInfo");

            var shiftdata = { ShiftId: 0, ShiftName: "" };

            if (oScope.chkShift != undefined) {
                shiftdata = { ShiftId: oScope.chkShift.id, ShiftName: oScope.chkShift.text };
            }
            OneViewConsole.Debug("GetCurrentShiftInfo end", "DataCaptureBO.GetCurrentShiftInfo");
            return shiftdata;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCurrentShiftInfo", Excep);
        }
        finally {
            shiftdata = null;
        }
    }

    this.CheckIsCurrentShift22 = function (Shift) {
        try {

            OneViewConsole.Debug("CheckIsCurrentShift Start", "DataCaptureBO.CheckIsCurrentShift");

            var IsCurrentShift = false;
            var _oDateTime = new DateTime();
            var EndDate = "";

            /////StartDate
            var StartDateParts = (Shift.StartDate).split("-");
            var tempStartDateParts = StartDateParts[2].split(" ");
            var StartDateTimeParts = tempStartDateParts[1].split(":");
            var StartDate = new Date((parseInt(tempStartDateParts[0])), (parseInt(StartDateParts[1] - 1)), (parseInt(StartDateParts[0])), (parseInt(StartDateTimeParts[0])), (parseInt(StartDateTimeParts[1])), (parseInt(StartDateTimeParts[2])));

            /////EndDate
            var EndDateParts = (Shift.EndDate).split("-");
            var tempEndDateParts = StartDateParts[2].split(" ");
            var EndDateTimeParts = tempStartDateParts[1].split(":");
            if (Shift.EndDate != "" || Shift.EndDate != undefined || Shift.EndDate != null || Shift.EndDate != " ") {
                EndDate = new Date((parseInt(tempEndDateParts[0])), (parseInt(EndDateParts[1] - 1)), (parseInt(EndDateParts[0])), (parseInt(EndDateTimeParts[0])), (parseInt(EndDateTimeParts[1])), (parseInt(EndDateTimeParts[2])));
            }

            /////CurrentDate
            var CurrentStringDate = _oDateTime.GetDateAndTime();
            var currentDateParts = CurrentStringDate.split("-");
            var tempParts = currentDateParts[2].split(" ");
            var currentTimeParts = tempParts[1].split(":");
            var CurrentDate = new Date((parseInt(tempParts[0])), (parseInt(currentDateParts[1] - 1)), (parseInt(currentDateParts[0])), (parseInt(currentTimeParts[0])), (parseInt(currentTimeParts[1])), (parseInt(currentTimeParts[2])));


            var CurrentStringTime = _oDateTime.GetTime();
            var startParts = (Shift.StartTime).split(":");
            var currentParts = CurrentStringTime.split(":");
            var endParts = (Shift.EndTime).split(":");



            //var StartTime = (parseInt(startParts[0]) * 3600 + parseInt(startParts[1]) * 60 + parseInt(startParts[2]));
            //var CurrentTime = (parseInt(currentParts[0]) * 3600 + parseInt(currentParts[1]) * 60 + parseInt(currentParts[2]));
            //var EndTime = (parseInt(endParts[0]) * 3600 + parseInt(endParts[1]) * 60 + parseInt(endParts[2]));

            var StartTime = ((parseInt(startParts[0] * 3600)) + (parseInt(startParts[1] * 60)) + (parseInt(startParts[2])));
            var CurrentTime = ((parseInt(currentParts[0] * 3600)) + (parseInt(currentParts[1] * 60)) + (parseInt(currentParts[2])));
            var EndTime = ((parseInt(endParts[0] * 3600)) + (parseInt(endParts[1] * 60)) + parseInt(endParts[2]));



            if (StartDate <= CurrentDate && (CurrentDate <= EndDate || EndDate == "" || EndDate == undefined || EndDate == "Invalid Date")) {

                ///case 1-  StartTime > EndTime (20 > 02 )
                if (StartTime > EndTime) {
                    ////case -A1 ////20 <= 21, 21 <= 02
                    if (StartTime <= CurrentTime) {
                        // end = '23:59:59';
                        EndTime = (parseInt(23) * 3600 + parseInt(59) * 60 + parseInt(59));


                        if (CurrentTime <= EndTime)
                            IsCurrentShift = true;  //////// return true;

                    }
                        ////case -A2 ////20 <= 01, 01 <= 02
                    else {
                        ///start = "00:00:00";
                        StartTime = parseInt('0');
                        if (StartTime <= CurrentTime && CurrentTime <= EndTime)
                            IsCurrentShift = true;    //////// return true;
                    }
                }

                    ///case 2-  StartTime < EndTime (08 > 14 )    
                else if (StartTime <= CurrentTime && CurrentTime <= EndTime) {
                    IsCurrentShift = true;             //////// return true;
                }
            }

            OneViewConsole.Debug("CheckIsCurrentShift End", "DataCaptureBO.CheckIsCurrentShift");

            return IsCurrentShift;

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckIsCurrentShift", Excep);
        }
        finally {
        }

    }

    this.CheckIsCurrentShift = function (Shift) {
        try {

            OneViewConsole.Debug("CheckIsCurrentShift Start", "DataCaptureBO.CheckIsCurrentShift");

            var IsCurrentShift = false;
            var _oDateTime = new DateTime();
            var EndDate = "";

            ///////StartDate
            //var StartDateParts = (Shift.StartDate).split("-");
            //var tempStartDateParts = StartDateParts[2].split(" ");
            //var StartDateTimeParts = tempStartDateParts[1].split(":");
            //var StartDate = new Date((parseInt(tempStartDateParts[0])), (parseInt(StartDateParts[1] - 1)), (parseInt(StartDateParts[0])), (parseInt(StartDateTimeParts[0])), (parseInt(StartDateTimeParts[1])), (parseInt(StartDateTimeParts[2])));

            ///////EndDate
            //var EndDateParts = (Shift.EndDate).split("-");
            //var tempEndDateParts = StartDateParts[2].split(" ");
            //var EndDateTimeParts = tempStartDateParts[1].split(":");
            //if (Shift.EndDate != "" || Shift.EndDate != undefined || Shift.EndDate != null || Shift.EndDate != " ") {
            //    EndDate = new Date((parseInt(tempEndDateParts[0])), (parseInt(EndDateParts[1] - 1)), (parseInt(EndDateParts[0])), (parseInt(EndDateTimeParts[0])), (parseInt(EndDateTimeParts[1])), (parseInt(EndDateTimeParts[2])));
            //}

            ///////CurrentDate
            //var CurrentStringDate = _oDateTime.GetDateAndTime();
            //var currentDateParts = CurrentStringDate.split("-");
            //var tempParts = currentDateParts[2].split(" ");
            //var currentTimeParts = tempParts[1].split(":");
            //var CurrentDate = new Date((parseInt(tempParts[0])), (parseInt(currentDateParts[1] - 1)), (parseInt(currentDateParts[0])), (parseInt(currentTimeParts[0])), (parseInt(currentTimeParts[1])), (parseInt(currentTimeParts[2])));


            var CurrentStringTime = _oDateTime.GetTime();
            var startParts = (Shift.StartTime).split(":");
            var currentParts = CurrentStringTime.split(":");
            var endParts = (Shift.EndTime).split(":");



            //var StartTime = (parseInt(startParts[0]) * 3600 + parseInt(startParts[1]) * 60 + parseInt(startParts[2]));
            //var CurrentTime = (parseInt(currentParts[0]) * 3600 + parseInt(currentParts[1]) * 60 + parseInt(currentParts[2]));
            //var EndTime = (parseInt(endParts[0]) * 3600 + parseInt(endParts[1]) * 60 + parseInt(endParts[2]));

            var StartTime = ((parseInt(startParts[0] * 3600)) + (parseInt(startParts[1] * 60)) + (parseInt(startParts[2])));
            var CurrentTime = ((parseInt(currentParts[0] * 3600)) + (parseInt(currentParts[1] * 60)) + (parseInt(currentParts[2])));
            var EndTime = ((parseInt(endParts[0] * 3600)) + (parseInt(endParts[1] * 60)) + parseInt(endParts[2]));



          //  if (StartDate <= CurrentDate && (CurrentDate <= EndDate || EndDate == "" || EndDate == undefined || EndDate == "Invalid Date")) {

                ///case 1-  StartTime > EndTime (20 > 02 )
                if (StartTime > EndTime) {
                    ////case -A1 ////20 <= 21, 21 <= 02
                    if (StartTime <= CurrentTime) {
                        // end = '23:59:59';
                        EndTime = (parseInt(23) * 3600 + parseInt(59) * 60 + parseInt(59));


                        if (CurrentTime <= EndTime)
                            IsCurrentShift = true;  //////// return true;

                    }
                        ////case -A2 ////20 <= 01, 01 <= 02
                    else {
                        ///start = "00:00:00";
                        StartTime = parseInt('0');
                        if (StartTime <= CurrentTime && CurrentTime <= EndTime)
                            IsCurrentShift = true;    //////// return true;
                    }
                }

                    ///case 2-  StartTime < EndTime (08 > 14 )    
                else if (StartTime <= CurrentTime && CurrentTime <= EndTime) {
                    IsCurrentShift = true;             //////// return true;
                }
           // }

            OneViewConsole.Debug("CheckIsCurrentShift End", "DataCaptureBO.CheckIsCurrentShift");

            //alert(IsCurrentShift + ', Shift : ' +JSON.stringify(Shift))
            return IsCurrentShift;

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckIsCurrentShift", Excep);
        }
        finally {
        }

    }

    //############## Shift  End ################



    //############## Get DataCaptureEntity  Start ################
    this.GetCompleteDataCaptureEntity = function (scope, TemplateNodes, ScoreDetails) {
        try {

            OneViewConsole.Debug("GetCompleteDataCaptureEntity start", "DataCaptureBO.GetCompleteDataCaptureEntity");
            OneViewConsole.DataLog("TemplateNodes :" + JSON.stringify(TemplateNodes), "DataCaptureBO.GetCompleteDataCaptureEntity");

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            var IsDynamicDCPlace = "false";
            var IsDynamicAttribute = "false";
            var IsDynamicAnswer = "false";

            //take  DataCaptureEntity
            var _oDataCaptureEntity = MyInstance.GetDataCaptureEntity(CurrenntDateAndTime,ScoreDetails);


            //take  DCResultsEntity
            var _oDCResultsEntity = MyInstance.GetDCResultsEntity(CurrenntDateAndTime);

            //take  DcResultDetailsEntityList
            var _oDcResultDetailsEntityList = MyInstance.GetDcResultDetailsEntity(scope, TemplateNodes, CurrenntDateAndTime);

            for (var i = 0; i < _oDcResultDetailsEntityList.length; i++) {
                _oDCResultsEntity.DcResultDetailsEntityList[i] = _oDcResultDetailsEntityList[i];

                if (_oDcResultDetailsEntityList[i].IsDynamicAnswer == 'true')
                    IsDynamicAnswer = 'true';
            }

            MyInstance.SetShift(_oDCResultsEntity);
            //Code moved to SaveDC Faced,to make validation easy
            _oDataCaptureEntity.DcResultsEntitylist[0] = _oDCResultsEntity;
            _oDataCaptureEntity.IsDynamicDCPlace = IsDynamicDCPlace;
            _oDataCaptureEntity.IsDynamicAttribute = IsDynamicAttribute;
            _oDataCaptureEntity.IsDynamicAnswer = IsDynamicAnswer;



            OneViewConsole.Debug("GetCompleteDataCaptureEntity end", "DataCaptureBO.GetCompleteDataCaptureEntity");
            return _oDataCaptureEntity;
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCompleteDataCaptureEntity", Excep);
        }
        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            IsDynamicDCPlace = null;
            IsDynamicAttribute = null;
            IsDynamicAnswer = null;
            _oDataCaptureEntity = null;
            _oDCResultsEntity = null;
            _oDcResultDetailsEntityList = null;
        }
    }

    this.GetDataCaptureEntity = function (CurrenntDateAndTime, ScoreDetails) {
        try {

            OneViewConsole.Debug("GetDataCaptureEntity start", "DataCaptureBO.GetDataCaptureEntity");
            OneViewConsole.DataLog("CurrenntDateAndTime :" + CurrenntDateAndTime, "DataCaptureBO.GetDataCaptureEntity");

            var _DataCaptureEntity = new DataCaptureEntity();

            _DataCaptureEntity.ServerId = 0;
            _DataCaptureEntity.ServiceId = ServiceId;
            _DataCaptureEntity.ServiceName = OneViewSessionStorage.Get("ServiceName");
            _DataCaptureEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();

            //we are not updating DcProfileId,as per discussion,plan to remove this column
            _DataCaptureEntity.DcProfileId = DcProfileId;
            _DataCaptureEntity.TemplateNodeId = TemplateId;
            _DataCaptureEntity.TemplateNodeName = TemplateName;

            _DataCaptureEntity.DcPlaceDimension = (OneViewSessionStorage.Get("DcPlaceId") > 0) ? DATEntityType.OrganizationAssestsNode : 0 ;//  "13";// TODO : Need to access from session
            _DataCaptureEntity.DcPlaceId = DcPlaceId;
            _DataCaptureEntity.DcPlaceName = DcPlaceName;


            // _DataCaptureEntity.IsCompleted = 'false';

          
            if (IsNewDcPageDcStartDateSelectionEnabled == true) {
                _DataCaptureEntity.DcStartDate = DcStartDateFromSession;
            }
            else {
                _DataCaptureEntity.DcStartDate = CurrenntDateAndTime;
            }
         
            _DataCaptureEntity.CreatedDate = CurrenntDateAndTime;
            _DataCaptureEntity.LastsyncDate = ""

            _DataCaptureEntity.IsSubmit = "false";
            _DataCaptureEntity.SubmitDate = "";
            _DataCaptureEntity.ApprovalStatus = oDCApprovalStatusEnum.NONE;
            _DataCaptureEntity.IsSynchronized = 'false';
            _DataCaptureEntity.ApprovalStatusDate = "";
            _DataCaptureEntity.IsMultiMediaAttached = 'false';

            _DataCaptureEntity.IsForHistory = 'false';
            _DataCaptureEntity.IsForDCBlocker = 'false';

            if (ScoreDetails != undefined) {
                _DataCaptureEntity.Score = ScoreDetails.Score;
                _DataCaptureEntity.MaxScore = ScoreDetails.MaxScore;
                _DataCaptureEntity.Percentage = ScoreDetails.Percentage;
            }

            OneViewConsole.Debug("GetDataCaptureEntity end", "DataCaptureBO.GetDataCaptureEntity");
            return _DataCaptureEntity;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDataCaptureEntity", Excep);
        }
        finally {
            _DataCaptureEntity = null;
        }
    }

    this.GetDCResultsEntity = function (CurrenntDateAndTime) {
        try {
            OneViewConsole.Debug("GetDCResultsEntity start", "DataCaptureBO.GetDCResultsEntity");
            OneViewConsole.DataLog("CurrenntDateAndTime :" + CurrenntDateAndTime, "DataCaptureBO.GetDCResultsEntity");

            var _DcResultsEntity = new DcResultsEntity();

            _DcResultsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

            _DcResultsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();

            _DcResultsEntity.MobileVersionId = 1;

            _DcResultsEntity.SystemUserId = OneViewSessionStorage.Get("LoginUserId");

            _DcResultsEntity.AnonymousUserId = 0;
            _DcResultsEntity.UserName = OneViewSessionStorage.Get("LoginUserName");

           
            if (IsNewDcPageDcStartDateSelectionEnabled == true) {
                _DcResultsEntity.StartDate = DcStartDateFromSession;
            }
            else {
                _DcResultsEntity.StartDate = CurrenntDateAndTime;
            }

            _DcResultsEntity.LastSyncDate = "";
            _DcResultsEntity.TotalTimeForDc = "";

            //if ( (ShiftInfo !=null || ShiftInfo !=undefined) && (ShiftInfo.ShiftId != null || ShiftInfo.ShiftId != undefined)) {
            //    _DcResultsEntity.ShiftId = ShiftInfo.ShiftId;
            //    _DcResultsEntity.ShiftName = ShiftInfo.ShiftName;
            //}

            _DcResultsEntity.IsSubmit = "false";
            _DcResultsEntity.SubmitDate = "";
            _DcResultsEntity.IsMultiMediaAttached = 'false';
            _DcResultsEntity.IsSynchronized = "false";
            _DcResultsEntity.CreatedDate = CurrenntDateAndTime;
            _DcResultsEntity.LastUpdatedDate = CurrenntDateAndTime;
            _DcResultsEntity.ApprovalStatus = oDCApprovalStatusEnum.NONE;

            OneViewConsole.Debug("GetDCResultsEntity end", "DataCaptureBO.GetDCResultsEntity");
            return _DcResultsEntity;
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCResultsEntity", Excep);
        }
        finally {
            _DcResultsEntity = null;
        }
    }

    this.GetDcResultDetailsEntityForInlineEdit = function (AttributesList, DCId, DCResultId) {
        try
        {
            OneViewConsole.Debug("GetDcResultDetailsEntityForInlineEdit start", "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit");
            OneViewConsole.DataLog("AttributesList :" + JSON.stringify(AttributesList), "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit");
            OneViewConsole.DataLog("DCResultId :" + DCResultId, "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit");

            var DcResultDetailsEntityList = new Array();

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            for (i = 0; i < AttributesList.length; i++) {

                var _DcResultDetailsEntity = new DcResultDetailsEntity();

                _DcResultDetailsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

                if (DCId != undefined && DCId != '')
                    _DcResultDetailsEntity.DataCaptureId = DCId;

                if (DCResultId != undefined && DCResultId != '')
                    _DcResultDetailsEntity.DataResultsId = DCResultId;

                _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
                _DcResultDetailsEntity.MobileVersionId = 1;

                _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

                _DcResultDetailsEntity.AttributeNodeId = AttributesList[i].AttributeNodeId;

                _DcResultDetailsEntity.ControlId = AttributesList[i].ControlId;

                _DcResultDetailsEntity.Answer = AttributesList[i].Answer;
                _DcResultDetailsEntity.AnswerValue = AttributesList[i].AnswerValue;

                _DcResultDetailsEntity.IsManual = "false";

                _DcResultDetailsEntity.IsSynchronized = "false";
                _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;

                _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;

                DcResultDetailsEntityList[i] = _DcResultDetailsEntity;
            }
            OneViewConsole.Debug("GetDcResultDetailsEntityForInlineEdit end", "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit");
            return DcResultDetailsEntityList;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailsEntityForInlineEdit", Excep);
        }
        finally {
            DcResultDetailsEntityList = null;
            oDateTime = null;
            CurrenntDateAndTime = null;
            _DcResultDetailsEntity = null;
        }

    }

    var Dateformat = function (date) {
        try {
            OneViewConsole.Debug("Dateformat start", "DataCaptureBO.Dateformat");

            if (date != "" && date != undefined && date != null) {
                var dateArr = date.split('-');
                var Day = (dateArr[2] <= 9) ? ("0" + dateArr[2]) : dateArr[2];
                Day = Day.slice(-2);
                var Month = (dateArr[1] <= 9) ? ("0" + dateArr[1]) : dateArr[1];
                Month = Month.slice(-2);
                date = Day + "-" + Month + "-" + dateArr[0];               
            }
            OneViewConsole.Debug("Dateformat end", "DataCaptureBO.Dateformat");
            return date;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.Dateformat", Excep);
        }
    }

    this.GetDcResultDetailsEntity = function ($scope, TemplateNodes, CurrenntDateAndTime, DCId, DcResultId) {
        try {
            //alert('GetDcResultDetailsEntity');
            OneViewConsole.Debug("GetDcResultDetailsEntity start", "DataCaptureBO.GetDcResultDetailsEntity");
            OneViewConsole.DataLog("TemplateNodes :" + JSON.stringify(TemplateNodes), "DataCaptureBO.GetDcResultDetailsEntity");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.GetDcResultDetailsEntity");
            OneViewConsole.DataLog("DCResultId :" + DcResultId, "DataCaptureBO.GetDcResultDetailsEntity");
            

            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();
            OneViewConsole.DataLog("CurrenntDateAndTime :" + CurrenntDateAndTime, "DataCaptureBO.GetDcResultDetailsEntity");

            var DCResultDetails = [];
            for (var itrAttrId in TemplateNodes) {
               // alert('itrAttrId : ' + itrAttrId);
                var _oAttributeInfo = TemplateNodes[itrAttrId];

                for (var _oPrimarayAnswerModeInfo in _oAttributeInfo.AnswerMode) {

                    if (typeof (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]) != 'function') {
                        var IsCheckboxList = false;
                        var AttributeNodeId = itrAttrId;
                        var AttributeNodeName = _oAttributeInfo.Name;
                        var Answer = '';
                        //if answer mode is ddl,value will save here, for text box and other make it null
                        var AnswerValue = '';
                        var AnswerFKType = ''
                        var AnswerMode = '';
                        //IsDynamicElement=true => if answer mode is ddl and enter new element which is not in the drop dowen list
                        var IsDynamicAnswer = 'false';
                        var IsMulti = false;

                        var _DcResultDetailsEntity = new DcResultDetailsEntity();
                        _DcResultDetailsEntity.IsMulti = "false";
                        _DcResultDetailsEntity.IsNA = "false";
                        _DcResultDetailsEntity.IsBlocker = "false";
                        _DcResultDetailsEntity.IsManualESTEnabled = "false";
                        _DcResultDetailsEntity.IsMultiMediaAttached = "false";

                        _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
                        //for dropdowen,auto complete
                        
                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DDL') {
                            if ($scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText() == undefined) {
                                Answer = '';
                                AnswerValue = '';
                            }
                            else {
                                Answer = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedValue();
                                AnswerValue = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();
                            }
                            AnswerFKType = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetDATEntityTypeId();
                            AnswerMode = 'DDL';//$scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetControlType();
                            if ((Answer == 0 || Answer == '0') && (AnswerValue != ''))
                                IsDynamicAnswer = 'true';


                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'Band') {
                            if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].IsStaticDataSource == undefined || _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].IsStaticDataSource == false) {
                                Answer = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedValue();
                                AnswerValue = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();
                                //AnswerFKType = 39;
                                AnswerFKType = DATEntityType.BandDetailsMaster;
                            }
                            else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].IsStaticDataSource == true) {
                                //alert(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + " : " + $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText())
                                Answer = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();                              
                            }
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'SignaturePad') {
                            if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "DATAURL" && oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsModified"] == true) {
                                //var canvas = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);
                                var signaturePad = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_SignaturePad"];
                                var oMultiMediaBlobSubElements = new MultiMediaBlobSubElements();
                              //  if (signaturePad.isEmpty() == false) {
                                if (signaturePad != '') {
                                    oMultiMediaBlobSubElements.ClientGuid = OneViewUniqueGenerator.GetGuid();
                                    oMultiMediaBlobSubElements.ServiceId = OneViewSessionStorage.Get("ServiceId");
                                    oMultiMediaBlobSubElements.Dimension = DATEntityType.DCResultDetails;
                                    oMultiMediaBlobSubElements.MultiMediaType = "image/png";
                                   
                                    oMultiMediaBlobSubElements.CreatedDate = CurrenntDateAndTime;
                                    oMultiMediaBlobSubElements.MobileVersionId = 1;
                                    oMultiMediaBlobSubElements.IsSynchronized = 'false';

                                    //alert(DCId + " , DcResultId : " + DcResultId);
                                    var DcResultDetailsClientGuid;
                                    if (DCId != undefined && DcResultId != undefined) {
                                        var DcResultDetailsResponse = new DcDAO().GetDcResultDetailsClientGuid(DCId, DcResultId, AttributeNodeId);
                                        if (DcResultDetailsResponse != null && DcResultDetailsResponse.length >0) {
                                            DcResultDetailsClientGuid = DcResultDetailsResponse[0].ClientGuid;
                                        }
                                    }
                                    //alert(" DcResultDetailsClientGuid : " + DcResultDetailsClientGuid);
                                    if (DcResultDetailsClientGuid != undefined) {
                                        oMultiMediaBlobSubElements.MappedEntityClientGuid = DcResultDetailsClientGuid;
                                    }
                                    else {
                                        oMultiMediaBlobSubElements.MappedEntityClientGuid = _DcResultDetailsEntity.ClientGuid;
                                    }
                                    //alert(signaturePad);
                                    oMultiMediaBlobSubElements.DataURL = signaturePad;// signaturePad.toDataURL();
                                    //alert('signaturePad.toDataURL(): ' + signaturePad.toDataURL());
                                    //alert(' oMultiMediaBlobSubElements.DataURL: ' + oMultiMediaBlobSubElements.DataURL);
                                    Answer = oMultiMediaBlobSubElements;
                                    AnswerFKType = DATEntityType.MultiMediaBlobSubElements;
                                    // alert(JSON.stringify(Answer) + "," + AnswerFKType);

                                    
                                }


                                //oMultiMediaBlobSubElements.MappedEntityClientGuid
                            }
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DCImageCaptureControlConfig') {                            
                            AnswerFKType = DATEntityType.MultiMediaSubElements;
                        }

                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DATE') {

                            Answer = "";
                            
                            var temp = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);//$scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];

                            if (temp != null) {
                                var date = temp.value;
                                Answer = Dateformat(date);
                            }                            
                           
                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'MonthYear') {
                            Answer = "";
                            var temp = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);//$scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];
                            if (temp != null) {
                                Answer = temp.value
                            }
                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'TIME') {

                            Answer = "";
                                                          
                            //    var temp = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);//$scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];                           
                            //    if (temp != null) {
                            //        var Time = temp.value;                                    
                            //        if (Time != "") {
                            //            Time = Time.split(':');
                            //            Answer = Time[0] + ":" + Time[1];
                            //        }
                            //    }
                           
                            //if (Answer == null || Answer == undefined) {
                            //    Answer = '';
                            //}


                            if (document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId) != null) {
                                Answer = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId).value;
                                if(Answer == ""){
                                    if ($scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId] != undefined) {                                       
                                        Answer = $scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];                                                                         
                                    }
                                }
                            }


                            if (Answer == null || Answer == undefined || Answer == "") {
                                Answer = '';
                            }
                            else {

                                if ($scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_DateTime"] != null && $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_DateTime"] != '') {

                                    Answer = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_DateTime"].split(' ')[0] + " " + Answer;
                                }
                                else {
                                    var oDateTime = new DateTime();
                                    Answer = oDateTime.GetDate() + " " + Answer;
                                }
                            }
                            //alert("before controlId : " + _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + " , " + 'Answer after: ' + Answer);
                            if (Answer!=undefined && Answer.length > 16) {
                                Answer = Answer.substring(0, 16);
                            }
                            //alert("controlId : "+ _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + " , "+ 'Answer after: ' + Answer);
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DATETIMELOCAL') {
                          //  alert('DATETIMELOCAL');
                            Answer = $scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];
                            if (Answer == null || Answer == undefined || Answer == "") {
                                Answer = '';
                            }
                            else {
                                //alert("_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo] : " + JSON.stringify(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]));
                                //var _oLVDefaultDateTimeFormater = new LVDefaultDateTimeFormater();
                                //Answer=_oLVDefaultDateTimeFormater.GetFormatedValue(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo], document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId));
                                ////var dformat = [
                                //           Answer.getDate(), Answer.getMonth() + 1,
                                //           Answer.getFullYear()].join('-') + ' ' +
                                //          [Answer.getHours(),
                                //           Answer.getMinutes(),
                                //           "00"].join(':');
                                ////alert("dformat : " + dformat);
                                var dformat = [
                                           (Answer.getDate() <= 9) ? ("0" + Answer.getDate()) : (Answer.getDate()), (Answer.getMonth() +1 <= 9) ? ("0" + (Answer.getMonth() + 1)) : (Answer.getMonth() + 1),
                                           Answer.getFullYear()].join('-') + ' ' +
                                          [(Answer.getHours() <= 9) ? ("0" + Answer.getHours()) : (Answer.getHours()),
                                           (Answer.getMinutes() <= 9) ? ("0" + Answer.getMinutes()) : (Answer.getMinutes()),
                                           "00"].join(':');
                                //alert("dformat : " + dformat);
                                Answer = dformat;
                               
                            }
                           // alert(Answer);
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'ListView' && _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == 'MULTI') {
                            _DcResultDetailsEntity.IsMulti = "true";
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DCListViewControlConfig'
                        && ((_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ListViewDisplay == 2 && _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SelectionType == 1) || _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ListViewDisplay == 1)) {
                            IsCheckboxList = true;
                           
                            MyInstance.SaveCheckBoxList(DCResultDetails, scope, DCId, DcResultId, itrAttrId, _oAttributeInfo,_oPrimarayAnswerModeInfo);
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DCListViewControlConfig'
                        && (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ListViewDisplay == 0 && _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].SelectionType == 'MULTI')) {
                            IsMulti = true;                          
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'ScrollList') {
                           // alert('in ScrollList');
                            if ($scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText() == undefined) {
                                Answer = '';
                                AnswerValue = '';
                            }
                            else {
                                Answer = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedValue();
                                AnswerValue = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();
                            }
                            
                            AnswerFKType = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetDATEntityTypeId();
                            //alert('in ScrollList Answer : ' + Answer + ', AnswerValue : ' + AnswerValue + ', AnswerFKType : ' + AnswerFKType);

                            AnswerMode = 'ScrollList';//$scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetControlType();
                            //if ((Answer == 0 || Answer == '0') && (AnswerValue != ''))
                            //    IsDynamicAnswer = 'true';


                        }
                        else {

                           
                            //Answer = $scope.NewDCModel['NodeId_' + itrAttrId];
                            Answer = $scope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];

                            //alert('Answer :' + Answer);
                            if ((_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'AUTOTEMPERATURE' || _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'TEXTBOX') && (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == 'FLOAT' && _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Format == '#.#')) {
                                Answer = AppendZeroInTemperature(Answer);
                            }
                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }

                            Answer=removeSpecialCharacter(Answer);
                        }



                        ///var _DcResultDetailsEntity = new DcResultDetailsEntity();

                        _DcResultDetailsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

                        if (DCId != undefined && DCId != '')
                            _DcResultDetailsEntity.DataCaptureId = DCId;

                        if (DcResultId != undefined && DcResultId != '')
                            _DcResultDetailsEntity.DataResultsId = DcResultId;

                        //_DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
                        _DcResultDetailsEntity.MobileVersionId = 1;

                        _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

                        _DcResultDetailsEntity.AttributeNodeId = AttributeNodeId;

                        _DcResultDetailsEntity.ControlId = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId;

                        _DcResultDetailsEntity.AttributeNodeName = AttributeNodeName;
                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "BOOLEAN") {
                            if (Answer == true || Answer == "true") {
                                Answer = '1';
                            }
                            else {
                                Answer = "0";
                            }
                        }
                        _DcResultDetailsEntity.Answer = Answer;
                        _DcResultDetailsEntity.AnswerValue = AnswerValue;

                        _DcResultDetailsEntity.AnswerFKType = AnswerFKType;
                        _DcResultDetailsEntity.AnswerMode = AnswerMode;


                        //set IsManual status
                        //ex: temprature entry with prob IsManual=false
                      //  alert('$scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"]' + _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "," + $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"]);
                        if ($scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"] != undefined) {
                            _DcResultDetailsEntity.IsManual = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"];
                            if (ConnectedProbe != undefined && ConnectedProbe != null) {
                             
                                _DcResultDetailsEntity.AutomaticDeviceId = ConnectedProbe[0].Id;
                             //   alert(_DcResultDetailsEntity.AutomaticDeviceId + " , " + ConnectedProbe[0].Id);
                            }
                        }
                        else {
                            _DcResultDetailsEntity.IsManual = "true";
                        }

                        _DcResultDetailsEntity.IsSynchronized = "false";
                        _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;

                        //_DcResultDetailsEntity.Comments = "";
                        ///_DcResultDetailsEntity.AnswerDataType = _oPrimarayAnswerModeInfo.DataType;
                        _DcResultDetailsEntity.AnswerDataType = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType;
                        _DcResultDetailsEntity.IsDynamicAnswer = IsDynamicAnswer;
                        _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;
                        _DcResultDetailsEntity.Latitude = Latitude;
                        _DcResultDetailsEntity.Longitude = Longitude;

                        SetComments(_DcResultDetailsEntity);
                                 
                        InsertCustomActionCommentsInDcResultDetails(_DcResultDetailsEntity,AttributeNodeId);
                       
                      //  alert('_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo] : ' + JSON.stringify(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]));
                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType != 'MULTI' && IsCheckboxList == false && IsMulti != true) {
                            DCResultDetails.push(_DcResultDetailsEntity);
                        }

                    }
                }

            }
            OneViewConsole.Debug("GetDcResultDetailsEntity end", "DataCaptureBO.GetDcResultDetailsEntity");
            
            return DCResultDetails;
        }

        catch (Excep) {
            //alert("11 DataCaptureBO.GetDcResultDetailsEntity" + Excep);
            //alert("22 DataCaptureBO.GetDcResultDetailsEntity" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailsEntity", Excep);
        }

        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            DCResultDetails = null;
            _oAttributeInfo = null;
            AttributeNodeId = null;
            AttributeNodeName = null;
            Answer = null;
            AnswerValue = null;
            AnswerFKType = null;
            AnswerMode = null;
            IsDynamicAnswer = null;
            _DcResultDetailsEntity = null;
            signaturePad = null;
            oMultiMediaBlobSubElements = null;
            date = null;
        }
    }

    var AppendZeroInTemperature = function (value) {
        try
        {
            OneViewConsole.Debug("AppendZeroInTemperature start", "DataCaptureBO.AppendZeroInTemperature");

            if (value != undefined && value != "") {
                value = value.toString();
                if (value.indexOf('.') != -1) {
                    var temp = value.split('.');
                    if (temp[1] == undefined || temp[1] == "") {
                        // alert('value case 2 : ' + value);
                        value = value + "0";
                    }
                }

                else {
                    value = value + ".0";
                }
            }
            else if (value != undefined && value != "" && value.indexOf('.') == -1) {
                //alert('value case 3 : ' + value);
                value = value + ".0";
            }

            OneViewConsole.Debug("AppendZeroInTemperature end", "DataCaptureBO.AppendZeroInTemperature");

            return value;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.AppendZeroInTemperature", Excep);
        }
    }

    this.GetDcResultDetailsHistory = function (DcResultDetailsEntityList, OldValue) {
        try {

            OneViewConsole.Debug("GetDcResultDetailsHistory Start", "DataCaptureBO.GetDcResultDetailsHistory");

            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            var DCResultDetailsHistory = [];

            for (var i = 0; i < DcResultDetailsEntityList.length; i++) {

                var _oDcResultDetailsHistory = new DcResultDetailsHistory();
                _oDcResultDetailsHistory.ServerId = DcResultDetailsEntityList[i].ServerId;
                _oDcResultDetailsHistory.AuditLogClientGuid = OneViewUniqueGenerator.GetGuid();
                _oDcResultDetailsHistory.DcResultDetailsClientGuid = DcResultDetailsEntityList[i].ClientGuid;
                _oDcResultDetailsHistory.NewValue = DcResultDetailsEntityList[i].Answer;
                if (OldValue[i] == "" || OldValue[i] == undefined) {

                }
                else {
                    _oDcResultDetailsHistory.OldValue = OldValue[i];
                }
                _oDcResultDetailsHistory.SystemUserId = OneViewSessionStorage.Get("LoginUserId");

                _oDcResultDetailsHistory.IsManual = DcResultDetailsEntityList[i].IsManual;
                _oDcResultDetailsHistory.CreatedDate = CurrenntDateAndTime;
                if (Latitude != undefined) {
                    _oDcResultDetailsHistory.Latitude = Latitude;
                }
                if (Latitude != Longitude) {
                    _oDcResultDetailsHistory.Longitude = Longitude;
                }
                // _oDcResultDetailsHistory.ProcessCount = DcResultDetailsEntityList[i].ProcessCount;;
                _oDcResultDetailsHistory.IsSynchronized = false;
                DCResultDetailsHistory.push(_oDcResultDetailsHistory);

            }
            OneViewConsole.Debug("GetDcResultDetailsHistory end", "DataCaptureBO.GetDcResultDetailsHistory");

            return DCResultDetailsHistory;
        }

        catch (Excep) {
            //alert('DataCaptureBO.GetDcResultDetailsHistory 1' + Excep);
            //alert('DataCaptureBO.GetDcResultDetailsHistory 2' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailsHistory", Excep);
        }

        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            DCResultDetailsHistory = null;
        }
    }
    var SetComments = function (_DcResultDetailsEntity) {

        try {                                
              var Comments = (ObservationResult[_DcResultDetailsEntity.AttributeNodeId] != undefined) ? ObservationResult[_DcResultDetailsEntity.AttributeNodeId].Comments : "";
              _DcResultDetailsEntity.Comments = Comments;            
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetComments", Excep);
        }
        finally {
        }
    }

    this.setIsManualFlag = function (ControlId) {
        try
        {
            OneViewConsole.Debug("setIsManualFlag start", "DataCaptureBO.setIsManualFlag");
            OneViewConsole.DataLog("ControlId :" + ControlId, "DataCaptureBO.setIsManualFlag");

            if (oScope[ControlId + "_IsManual"] != undefined) {
                //  $scope[ControlId + "_IsManual"] = 'false';
                oScope[ControlId + "_IsManual"] = undefined; //if its undefined save/update time take value 'true'
            }
            OneViewConsole.Debug("setIsManualFlag end", "DataCaptureBO.setIsManualFlag");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.setIsManualFlag", Excep);
        }
    }
    //############## Get DataCaptureEntity  End ################


    //############## Mandatory  Start ################
    this.SetMandatoryMetaDataOLD = function () {
        try
        {
            OneViewConsole.Debug("SetMandatoryMetaData start", "DataCaptureBO.SetMandatoryMetaData");

            var MandatoryValidationMetaDataForAll = ReadMandatoryMetaData();
            if (MandatoryValidationMetaDataForAll != undefined && MandatoryValidationMetaDataForAll != null)
            {
                OneViewSessionStorage.Save('MandatoryMetaData', JSON.stringify(MandatoryValidationMetaDataForAll));
            }
            OneViewConsole.Debug("SetMandatoryMetaData end", "DataCaptureBO.SetMandatoryMetaData");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetMandatoryMetaData", Excep);
        }
        finally {
            MandatoryValidationMetaDataForAll = null;
        }
    }

    this.SetMandatoryMetaData = function () {
        try {
            OneViewConsole.Debug("SetMandatoryMetaData start", "DataCaptureBO.SetMandatoryMetaData");

            var CurrentPageMandatoryMetaData = ReadMandatoryMetaData();
            //alert('CurrentPageMandatoryMetaData :' + JSON.stringify(CurrentPageMandatoryMetaData));
            if (CurrentPageMandatoryMetaData != undefined && CurrentPageMandatoryMetaData != null) {
                OneViewSessionStorage.Save('MandatoryMetaData', JSON.stringify(CurrentPageMandatoryMetaData));
            }
            OneViewConsole.Debug("SetMandatoryMetaData end", "DataCaptureBO.SetMandatoryMetaData");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetMandatoryMetaData", Excep);
        }
        finally {
            MandatoryValidationMetaDataForAll = null;
        }
    }

    var ReadMandatoryMetaDataOLD = function () {
        try
        {
            OneViewConsole.Debug("ReadMandatoryMetaData start", "DataCaptureBO.ReadMandatoryMetaData");

            ServiceId = OneViewSessionStorage.Get("ServiceId");
            TemplateId = OneViewSessionStorage.Get("TemplateId");

            var DCPlaceDimension = "OrganizationAssetsNode";
            ///read Mandatory Validation metatdata
            if (GlobalDCMandatoryValidationMetaData != null || GlobalDCMandatoryValidationMetaData != undefined) {
                var MandatoryDataForService = GlobalDCMandatoryValidationMetaData[ServiceId];
                var MandatoryDataLstForTemplate = MandatoryDataForService[TemplateId];
                if (MandatoryDataLstForTemplate != undefined) {
                    for (var itr1 = 0; itr1 < MandatoryDataLstForTemplate.length ; itr1++) {

                        if ((MandatoryDataLstForTemplate[itr1].UserId == "-1" || MandatoryDataLstForTemplate[itr1].UserId == LoginUserId)
                            && (MandatoryDataLstForTemplate[itr1].DCPlaceNodeId == "-1" ||
                            (MandatoryDataLstForTemplate[itr1].DCPlaceNodeId == DcPlaceId && MandatoryDataLstForTemplate[itr1].DCPlaceDimension == DCPlaceDimension))) {

                            var MandatoryValidationMetaDataForAll = MandatoryDataLstForTemplate[itr1].MandatoryValidationMetaData;
                            //var MandatoryMetaDataForSave = MandatoryValidationMetaDataForAll['Save']
                            return MandatoryValidationMetaDataForAll;
                            break;
                        }
                    }
                }
            }
            OneViewConsole.Debug("ReadMandatoryMetaData end", "DataCaptureBO.ReadMandatoryMetaData");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ReadMandatoryMetaData", Excep);
        }
        finally {
            DCPlaceDimension = null;
            MandatoryDataForService = null;
            MandatoryDataLstForTemplate = null;
            MandatoryValidationMetaDataForAll = null;
        }
    }

    var ReadMandatoryMetaData = function () {
        try {
            OneViewConsole.Debug("ReadMandatoryMetaData start", "DataCaptureBO.ReadMandatoryMetaData");

            var MetaDataList = GetTemplateValidationMetaData();
           
           // alert('MetaDataList here : ' +JSON.stringify(MetaDataList))
            OneViewConsole.Debug("ReadMandatoryMetaData end", "DataCaptureBO.ReadMandatoryMetaData");

            return MetaDataList;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ReadMandatoryMetaData", Excep);
        }
        finally {
            DCPlaceDimension = null;
            MandatoryDataForService = null;
            MandatoryDataLstForTemplate = null;
            MandatoryValidationMetaDataForAll = null;
        }
    }


    var GetTemplateValidationMetaData = function () {
        try {
                 
            DcPlaceDimension = "OrganizationAssetsNode";
          //  alert('Request : ' + ServiceId + "," + LoginUserId + "," + TemplateId + "," + DcPlaceId + "," + DcPlaceDimension);
            var _oTemplatValidationConfigMetaDataDAO = new TemplatValidationConfigMetaDataDAO();
            var MetaDataList = _oTemplatValidationConfigMetaDataDAO.GetMetaData(ServiceId, LoginUserId, TemplateId, DcPlaceId, DcPlaceDimension);

            if (MetaDataList == null) {
                //User specific
                // DcPlaceId = -1;
                //  DcPlaceDimension = -1
                MetaDataList = _oTemplatValidationConfigMetaDataDAO.GetMetaData(ServiceId, LoginUserId, TemplateId, -1, -1);
            }

            if (MetaDataList == null) {
                //Place specific
                // LoginUserId = -1;
                MetaDataList = _oTemplatValidationConfigMetaDataDAO.GetMetaData(ServiceId, -1, TemplateId, DcPlaceId, DcPlaceDimension);
            }

            if (MetaDataList == null) {
                //none
                DcPlaceId = -1;
                LoginUserId = -1;
                //DcPlaceDimension = -1
                MetaDataList = _oTemplatValidationConfigMetaDataDAO.GetMetaData(ServiceId, LoginUserId, TemplateId, DcPlaceId, DcPlaceDimension);
            }

            return MetaDataList;
        }
        catch (Excep) {
           // alert('GetTemplateValidationMetaData Excep 11' + Excep);
            // alert('GetTemplateValidationMetaData Excep 22' +  JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetTemplateValidationMetaData", Excep);
        }
    }


    //############## Mandatory  Start ################



    //############## DynamicElements  Start ################
    this.CreateDynamicElements = function (DataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("CreateDynamicElements start", "DataCaptureBO.CreateDynamicElements");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(DataCaptureEntity), "DataCaptureBO.CreateDynamicElements");

            if (MyInstance.CreateDynamicElementHandler != null) {
                MyInstance.CreateDynamicElementHandler(DataCaptureEntity);
            }
            OneViewConsole.Debug("CreateDynamicElements end", "DataCaptureBO.CreateDynamicElements");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateDynamicElements", Excep);
        }
    }
    //############## DynamicElements  End ################




    //############## NC  Start ################
    this.SetNC = function () {
        try
        {
            OneViewConsole.Debug("SetNC start", "DataCaptureBO.SetNC");

            var NCEquationArray = [];
            function SetNCRules(variables) {
                var oNCEquationBuilder = new NCEquationBuilder(variables);

                for (var i = 0; i < NCRule.NCRules.length; i++) {
                    var rule = NCRule.NCRules[i];
                    var NCequation = oNCEquationBuilder.GetExpression(rule);
                    NCEquationArray[i] = NCequation;

                }
            }
            OneViewConsole.Debug("SetNC end", "DataCaptureBO.SetNC");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetNC", Excep);
        }
        finally {
            NCEquationArray = null;
        }
    }
    //############## NC  End ################


    //############## DC Summary Start ################
    this.GetDCSummary = function () {
        try {

            OneViewConsole.Debug("GetDCSummary start", "DataCaptureBO.GetDCSummary");

            var TotalDCCount = oDataCaptureDAO.GetTotalAuditCount(ServiceId, LoginUserId, TemplateId, DcPlaceId, DcPlaceName);
            var CompletedDCCount = oDataCaptureDAO.GetTotalCompletedAuditCount(ServiceId, LoginUserId, TemplateId, DcPlaceId, DcPlaceName);
            var NCCount = oDataCaptureDAO.GetTotalNCCount(ServiceId, LoginUserId, TemplateId, DcPlaceId, DcPlaceName);
            var IncompleteDCCount = TotalDCCount - CompletedDCCount;

            var DCSummary = { 'TotalDCCount': TotalDCCount, 'CompletedDCCount': CompletedDCCount, 'IncompleteDCCount': IncompleteDCCount, 'NCCount': NCCount };

            OneViewConsole.Debug("GetDCSummary end", "DataCaptureBO.GetDCSummary");

            return DCSummary;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCSummary", Excep);
        }
        finally {
            TotalDCCount = null;
            CompletedDCCount = null;
            NCCount = null;
            IncompleteDCCount = null;
            DCSummary = null;
        }
    }

    this.ShowDCSummary = function () {
        try
        {
            OneViewConsole.Debug("ShowDCSummary start", "DataCaptureBO.ShowDCSummary");

            var DCSummary = MyInstance.GetDCSummary();
            oScope.TotalCount = DCSummary.TotalDCCount;
            oScope.CompletedRecords = DCSummary.CompletedDCCount;
            //oScope.IncompleteRecords = DCSummary.IncompleteDCCount;
            oScope.NCCount = DCSummary.NCCount;

            OneViewConsole.Debug("ShowDCSummary end", "DataCaptureBO.ShowDCSummary");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ShowDCSummary", Excep);
        }
        finally {
            DCSummary = null;
        }
    }
    //############## DC Summary End ################

    this.SetTime = function ($scope, ControlId, RefreshcontrolId) {
        try {
            OneViewConsole.Debug("SetTime start", "DataCaptureBO.SetTime");
            if ($scope.NewDCModel[ControlId] != "" && $scope.NewDCModel[ControlId] != null && document.getElementById(RefreshcontrolId) != null) {
                //$scope.NewDCModel[RefreshcontrolId] = new DateTime().GetHoursAndMinutes();
                document.getElementById(RefreshcontrolId).value = new DateTime().GetHoursAndMinutes();
                var oDateTime = new DateTime();
                var time = document.getElementById(RefreshcontrolId).value;
                //   alert($scope[ControlId]);
                if ($scope[RefreshcontrolId + "_DateTime"] != null && $scope[RefreshcontrolId + "_DateTime"] != '') {
                    $scope[RefreshcontrolId + "_DateTime"] = $scope[RefreshcontrolId + "_DateTime"].split(' ')[0] + " " + time;
                }
                else {
                    //$scope["NewDCModel." + ControlId + "_DateTime"] = oDateTime.GetDate() + " " + time;
                    $scope[RefreshcontrolId + "_DateTime"] = oDateTime.GetDate() + " " + time;
                }

            }
            else {
                $scope.NewDCModel[RefreshcontrolId] = "";
            }

           

            OneViewConsole.Debug("SetTime end", "DataCaptureBO.SetTime");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetTime", Excep);
        }
    }

    this.SetDateTime = function ($scope, ControlId, RefreshcontrolId) {
        try {
            OneViewConsole.Debug("SetTime start", "DataCaptureBO.SetTime");
            if ($scope.NewDCModel[ControlId] != "" && $scope.NewDCModel[ControlId] != null && document.getElementById(RefreshcontrolId) != null) {

                var SetDateandTime = new DateTime().GetDate() + " " + new DateTime().GetHoursAndMinutes() + ":00";               
                //$scope[RefreshcontrolId + "_DateTime"] = SetDateandTime;             
                $scope.NewDCModel[RefreshcontrolId] = new DateTime().GetDateByString(SetDateandTime);
                //alert("RefreshcontrolId : " + RefreshcontrolId + "," + $scope.NewDCModel[RefreshcontrolId]);
             
            }
            else {
                $scope.NewDCModel[RefreshcontrolId] = "";
            }



            OneViewConsole.Debug("SetTime end", "DataCaptureBO.SetTime");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetTime", Excep);
        }
    }

    this.SetControlEnableStatus = function () {
        try {
            OneViewConsole.Debug("SetControlEnableStatus start", "DataCaptureBO.SetControlEnableStatus");

            for (NodeId in oTemplateNodes) {
                if (typeof (oTemplateNodes[NodeId]) != 'function') {

                    var TemplateNodeObj = oTemplateNodes[NodeId];
                    for (var i = 0; i < TemplateNodeObj.AnswerMode.length; i++) {
                        var AnswerModeObj = TemplateNodeObj.AnswerMode[i];

                        //########### set AUTOTEMPERATURE controls enable/disable status start
                        if (AnswerModeObj.Type == 'AUTOTEMPERATURE' || AnswerModeObj.Type == 'TIME' || AnswerModeObj.Type == 'DATETIMELOCAL') {

                            if (IsGlobalAutoTemperatureManualAllowed == true) {

                                // all AUTOTEMPERATURE controls make it enabled
                                //  document.getElementById(AnswerModeObj.ControlId).disabled = false;
                                oScope[AnswerModeObj.ControlId + '_IsReadOnly'] = false;

                            }
                            else {

                                if (AnswerModeObj.IsManualAllowed == true) {
                                    oScope[AnswerModeObj.ControlId + '_IsReadOnly'] = false;
                                    // document.getElementById(AnswerModeObj.ControlId).disabled = false;
                                }
                                else {
                                    oScope[AnswerModeObj.ControlId + '_IsReadOnly'] = true;
                                    //txtCoreTempControlId make is disabled
                                    //  document.getElementById(AnswerModeObj.ControlId).disabled = true;
                                }
                            }
                        }
                        else {
                            if (AnswerModeObj.IsManualAllowed != undefined) {
                                if (AnswerModeObj.IsManualAllowed == true) {
                                    oScope[AnswerModeObj.ControlId + '_IsReadOnly'] = false;
                                    // document.getElementById(AnswerModeObj.ControlId).disabled = false;
                                }
                                else {
                                    oScope[AnswerModeObj.ControlId + '_IsReadOnly'] = true;
                                    //txtCoreTempControlId make is disabled
                                    //  document.getElementById(AnswerModeObj.ControlId).disabled = true;
                                }
                            }
                        }
                        //########### set AUTOTEMPERATURE controls enable/disable status End
                    }
                }
                OneViewConsole.Debug("SetControlEnableStatus end", "DataCaptureBO.SetControlEnableStatus");
            }
        } 
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetControlEnableStatus", Excep);
        }
        finally {
            TemplateNodeObj = null;
            AnswerModeObj = null;
        }

    }

    //############## SetIsCompletedStatus Start ################
    var UpdateDCIsCompletedStatus = function (DCId, _oDcResultDetailsEntityList, IsAutoSubmit) {
        try {
            OneViewConsole.Debug("UpdateDCIsCompletedStatus start", "DataCaptureBO.UpdateDCIsCompletedStatus");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.UpdateDCIsCompletedStatus");
            OneViewConsole.DataLog("DcResultDetailsEntityList :" + JSON.stringify(_oDcResultDetailsEntityList), "DataCaptureBO.UpdateDCIsCompletedStatus");

            var MetDataForSubmit = getMetDataForSubmit();
            if (MetDataForSubmit != null && MetDataForSubmit.IsAgainstDC == true) {
                var IsCompletedStatus = false;
                var TemplateId = OneViewSessionStorage.Get("TemplateId");
                //if (OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") {
                if (IsAutoSubmit == undefined || IsAutoSubmit==true){
                if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                    if (TemplateId == 2 || TemplateId == 3) {
                        IsCompletedStatus = MyInstance.CookingAndBlastChillingEKFC1Validation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 44) {
                        IsCompletedStatus = MyInstance.GoodReceivingMandatoryValidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 1529) {
                        //IsCompletedStatus = MyInstance.SampleSheetAndWaterAnalysisValidation(_oDcResultDetailsEntityList, false);
                        IsCompletedStatus = MyInstance.WaterAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1655) {//ice
                        //IsCompletedStatus = MyInstance.SampleSheetAndIceAnalysisValidation(_oDcResultDetailsEntityList, false);
                        IsCompletedStatus = MyInstance.IceAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1369) {

                        IsCompletedStatus = MyInstance.FoodAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1778) {//air
                        IsCompletedStatus = MyInstance.SampleSheetAndAirAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1808) {
                        IsCompletedStatus = MyInstance.SamplingSheetAndHandSwabAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1837) {
                        IsCompletedStatus = MyInstance.SamplingSheetAndEquipmentSwabValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1875) {
                        IsCompletedStatus = MyInstance.SamplingSheetAndLinenValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1917) {
                        IsCompletedStatus = MyInstance.SampleSheetAndAllergenAnalysisValidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 575) {
                        IsCompletedStatus = MyInstance.MicrobiologyLaboratoryEquipmentCalibration(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 8272) {
                        IsCompletedStatus = DispatchingTemperatureVallidation(_oDcResultDetailsEntityList, false);

                    }
                    else if (TemplateId == 711) {
                        IsCompletedStatus = TempMonitoringReportofLabEquipmentVallidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 609) {
                        IsCompletedStatus = LaminarAirFlowMonitoringValidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 923) {
                        IsCompletedStatus = MonthlyVerificationofProbeThermometerValidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 937) {
                        IsCompletedStatus = MonthlyVerificationofIRThermometerValidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 738) {
                        IsCompletedStatus = YearlyVerificationforProbeThermometerValidation(_oDcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 12606) {
                        IsCompletedStatus = CustomerComplaintMonitoringFormVallidation(_oDcResultDetailsEntityList, false)
                    }                   
                    else {
                        var IsCompletedStatus = IsCompleted(_oDcResultDetailsEntityList, MetDataForSubmit);
                    }
                }
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                    if (TemplateId == 8272) {
                        IsCompletedStatus = DispatchingTemperatureVallidation(_oDcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 12208) {
                        IsCompletedStatus = NewDispatchingTemperatureVallidation(_oDcResultDetailsEntityList, false);
                    }
                }
                    //else if (OneViewSessionStorage.Get("ServiceName") == "CMFT") {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    IsCompletedStatus = UpdateDCIsCompletedStatusForCMFT(_oDcResultDetailsEntityList, MetDataForSubmit);
                }
                    //else if (OneViewSessionStorage.Get("ServiceName") == "TCFMService") {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) {
                    IsCompletedStatus = UpdateDCIsCompletedStatusTCFM(_oDcResultDetailsEntityList, MetDataForSubmit);
                }
                    //else if ((OneViewSessionStorage.Get("ServiceName") == "Care Home Service")) {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 3) {
                    IsCompletedStatus = UpdateDCIsCompletedStatusArbory(_oDcResultDetailsEntityList, MetDataForSubmit);
                }
                else {
                    IsCompletedStatus = IsCompleted(_oDcResultDetailsEntityList, MetDataForSubmit);
                }
                }
                //if (IsCompletedStatus == true) {
                //    if (TemplateId == 442) {
                //        IsCompletedStatus = ChillerFreezerCheckingVallidation(false);
                //    }
                //}
                // var _oDcDAO = new DcDAO();

                var oDateTime = new DateTime();
                var CurrenntDateAndTime = oDateTime.GetDateAndTime();
                oDataCaptureDAO.UpdateDCIsCompletedStatus(DCId, IsCompletedStatus, CurrenntDateAndTime);

                var _oDcPendingTaskBO = new DcPendingTaskBO();
                _oDcPendingTaskBO.UpdateStatus(false, IsCompletedStatus);

                var _oDasboardBO = new DasboardBO(oScope, '', oxlatService, '', '', '', '');
                _oDasboardBO.UpdateTaskStatus_EditDC(IsCompletedStatus);

                OneViewSessionStorage.Save("IsDcCompletedBeforeEdit", IsCompletedStatus);
                OneViewSessionStorage.Save("IsDcSynchronizedBeforeEdit", 'false');
            }
            else {
                alert('UpdateDCIsCompletedStatus : Not Supported IsAgainstDC=true');
            }
            OneViewConsole.Debug("UpdateDCIsCompletedStatus end", "DataCaptureBO.UpdateDCIsCompletedStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCIsCompletedStatus", Excep);
        }
        finally {
            MetDataForSubmit = null;
            IsCompletedStatus = null;
            oDateTime = null;
            CurrenntDateAndTime = null;
        }
    }

    var UpdateDCIsCompletedStatusForCMFT = function (_oDcResultDetailsEntityList, MetDataForSubmit) {
        try {
            var IsCompletedStatus = false;
            var TemplateId = OneViewSessionStorage.Get("TemplateId");

            //if (TemplateId == 3 ) {
            //    IsCompletedStatus = PreAcceptanceQuestionnaireValidation(_oDcResultDetailsEntityList, false);             
            //}
            if (TemplateId == 91) {
                IsCompletedStatus = PreAcceptanceCompositionAnalysisValidation(_oDcResultDetailsEntityList, false);
            }
            //else if (TemplateId == 207) {
            //    IsCompletedStatus = PreAcceptanceLocalWasteStorageValidation(_oDcResultDetailsEntityList, false);
            //}
            else if ( TemplateId == 743) {
                IsCompletedStatus = SingleDepartmentQuestionnaireValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 830) {
                IsCompletedStatus = SingleDepartmentCompositionAnalysisValidation(_oDcResultDetailsEntityList, false);
            }
            else  if (TemplateId == 946) { 
                IsCompletedStatus = SingleDepartmentLocalWasteStorageValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 1462) {
                IsCompletedStatus = IncidentInvestigationElementsQuestionnaireValidation(_oDcResultDetailsEntityList, false);
            }            
            else if (TemplateId == 1554) {
                IsCompletedStatus = IncidentInvestigationElementsLocalWasteStorageValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 2070) {
                IsCompletedStatus = LWSEQuestionnaireValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 2671) {
                IsCompletedStatus = SWSPAEQuestionnaireValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 2155) {
                IsCompletedStatus = LWSELocalWasteStorageValidation(_oDcResultDetailsEntityList, false);
            }//2756
            else if (TemplateId == 2756) {
                IsCompletedStatus = SingleWasteLocalWasteStorageValidation(_oDcResultDetailsEntityList, false);
            }
            //else if (TemplateId == 3271) {
            //    IsCompletedStatus = PreAcceptanceCompositionAnalysisValidationNew(_oDcResultDetailsEntityList, false);
            //}
            else if (TemplateId == 4250) {
                IsCompletedStatus = BulkWasteElementValidation(_oDcResultDetailsEntityList, false);
            }

            else {
                IsCompletedStatus = IsCompleted(_oDcResultDetailsEntityList, MetDataForSubmit);
            }

            return IsCompletedStatus;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCIsCompletedStatusForCMFT", Excep);
        }
    }

    var UpdateDCIsCompletedStatusTCFM = function (_oDcResultDetailsEntityList, MetDataForSubmit) {
        try {
            var IsCompletedStatus = false;
            var TemplateId = OneViewSessionStorage.Get("TemplateId");

            if (TemplateId == 3) {
                IsCompletedStatus = TescoTraningValidation(_oDcResultDetailsEntityList, false);
            }
            else if (TemplateId == 160) {
                IsCompletedStatus = TravisPerkinsTraningModuleValidation(_oDcResultDetailsEntityList, false);
            }          
            else {
                IsCompletedStatus = IsCompleted(_oDcResultDetailsEntityList, MetDataForSubmit);
            }
           
            return IsCompletedStatus;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCIsCompletedStatusTCFM", Excep);
        }
    }

    var UpdateDCIsCompletedStatusArbory = function (_oDcResultDetailsEntityList, MetDataForSubmit) {
        try {
            var IsCompletedStatus = false;
            var TemplateId = OneViewSessionStorage.Get("TemplateId");
            
            IsCompletedStatus = IsCompleted(_oDcResultDetailsEntityList, MetDataForSubmit);
            
            return IsCompletedStatus;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDCIsCompletedStatusArbory", Excep);
        }
    }

    var SetIsCompletedStatus = function (_oDataCaptureEntity) {
        try
        {
            OneViewConsole.Debug("SetIsCompletedStatus start", "DataCaptureBO.SetIsCompletedStatus");
            OneViewConsole.DataLog("DataCaptureEntity :" + JSON.stringify(_oDataCaptureEntity), "DataCaptureBO.SetIsCompletedStatus");

            var MetDataForSubmit = getMetDataForSubmit();           
            var isCompleted = false;
            if (MetDataForSubmit.IsAgainstDC == true) {
                var TemplateId = OneViewSessionStorage.Get("TemplateId");
                //if (OneViewSessionStorage.Get("ServiceName") == "Food Safety Service") {
                if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                    if (TemplateId == 2 || TemplateId == 3) {

                        isCompleted = MyInstance.CookingAndBlastChillingEKFC1Validation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 44) {
                        isCompleted = MyInstance.GoodReceivingMandatoryValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1529) {
                        //isCompleted = MyInstance.SampleSheetAndWaterAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                        isCompleted = MyInstance.WaterAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1655) {//ice
                        //isCompleted = MyInstance.SampleSheetAndIceAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                        isCompleted = MyInstance.IceAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1778) {//air
                        isCompleted = MyInstance.SampleSheetAndAirAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1808) {
                        isCompleted = MyInstance.SamplingSheetAndHandSwabAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1837) {
                        isCompleted = MyInstance.SamplingSheetAndEquipmentSwabValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1875) {
                        isCompleted = MyInstance.SamplingSheetAndLinenValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1369) {

                        isCompleted = MyInstance.FoodAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 1917) {
                        isCompleted = MyInstance.SampleSheetAndAllergenAnalysisValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 575) {
                        isCompleted = MyInstance.MicrobiologyLaboratoryEquipmentCalibration(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 8272) {
                        isCompleted = DispatchingTemperatureVallidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                    else if (TemplateId == 711) {
                        isCompleted = TempMonitoringReportofLabEquipmentVallidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 609) {
                        isCompleted = LaminarAirFlowMonitoringValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 923) {
                        isCompleted = MonthlyVerificationofProbeThermometerValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 937) {
                        isCompleted = MonthlyVerificationofIRThermometerValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    }
                    else if (TemplateId == 738) {
                        isCompleted = YearlyVerificationforProbeThermometerValidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    } 
                    else if (TemplateId == 12606) {
                        isCompleted = CustomerComplaintMonitoringFormVallidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false)
                    }
                    else {
                        isCompleted = IsCompleted(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, MetDataForSubmit);
                    }
                }
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                    if (TemplateId == 8272) {
                        isCompleted = DispatchingTemperatureVallidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }

                    else if (TemplateId == 12208) {
                        isCompleted = NewDispatchingTemperatureVallidation(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, false);
                    }
                }
                    //else if (OneViewSessionStorage.Get("ServiceName") == "CMFT") {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    isCompleted = UpdateDCIsCompletedStatusForCMFT(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, MetDataForSubmit);
                }
                    //else if (OneViewSessionStorage.Get("ServiceName") == "TCFMService") {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5) {
                    isCompleted = UpdateDCIsCompletedStatusTCFM(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, MetDataForSubmit);
                }
                    //else if ((OneViewSessionStorage.Get("ServiceName") == "Care Home Service") ) {
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 3) {
                    isCompleted = UpdateDCIsCompletedStatusArbory(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, MetDataForSubmit);
                }
                else {
                    isCompleted = IsCompleted(_oDataCaptureEntity.DcResultsEntitylist[0].DcResultDetailsEntityList, MetDataForSubmit);
                }
                //if (isCompleted == true) {
                //    if (TemplateId == 442) {
                //        isCompleted = ChillerFreezerCheckingVallidation(false)
                //    }
                //}

                // _oDataCaptureEntity.isCompleted = isCompleted;
                return isCompleted;
            }
            else {
                alert('SetIsCompletedStatus : Not Supported IsAgainstDC=true');
            }
            OneViewConsole.Debug("SetIsCompletedStatus end", "DataCaptureBO.SetIsCompletedStatus");
        }
        catch (Excep) {
           // alert("DataCaptureBO.SetIsCompletedStatus 11 " + Excep);
          //  alert("DataCaptureBO.SetIsCompletedStatus 22 " + JSON.stringify( Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetIsCompletedStatus", Excep);
        }
        finally {
            MetDataForSubmit = null;
            isCompleted = null;
        }
    }


    var getMetDataForSubmitOLD = function () {
        try {
            OneViewConsole.Debug("getMetDataForSubmit start", "DataCaptureBO.getMetDataForSubmit");
            var MetaData = null;
            var MandatoryMetaDataForAll = OneViewSessionStorage.Get("MandatoryMetaData");
            if (MandatoryMetaDataForAll != null) {
                MandatoryMetaDataForAll = JSON.parse(MandatoryMetaDataForAll);
                 MetaData = MandatoryMetaDataForAll['Submit'];
            }

            OneViewConsole.Debug("getMetDataForSubmit end", "DataCaptureBO.getMetDataForSubmit");

            return MetaData;

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.getMetDataForSubmit", Excep);
        }
        finally {
            MandatoryMetaDataForAll = null;
            MetaData = null;
        }
    }

    var getMetDataForSubmit = function () {
        try {
            OneViewConsole.Debug("getMetDataForSubmit start", "DataCaptureBO.getMetDataForSubmit");
            var MetaData = null;
            var MandatoryMetaDataForAll = OneViewSessionStorage.Get("MandatoryMetaData");
            if (MandatoryMetaDataForAll != null) {
                MandatoryMetaDataForAll = JSON.parse(MandatoryMetaDataForAll);
                MetaData = MandatoryMetaDataForAll.SubmitValidationMetaData;
            }

            OneViewConsole.Debug("getMetDataForSubmit end", "DataCaptureBO.getMetDataForSubmit");

            return MetaData;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.getMetDataForSubmit", Excep);
        }
        finally {
            MandatoryMetaDataForAll = null;
            MetaData = null;
        }
    }

    var IsCompletedOLD = function (_oDcResultDetailsEntityList, MetDataForSubmit) {
        try
        {

            OneViewConsole.Debug("IsCompleted start", "DataCaptureBO.IsCompleted");
            OneViewConsole.DataLog("DcResultDetailsEntityList :" + JSON.stringify(_oDcResultDetailsEntityList), "DataCaptureBO.IsCompleted");
            OneViewConsole.DataLog("MetDataForSubmit :" + JSON.stringify(MetDataForSubmit), "DataCaptureBO.IsCompleted");

            var MandatoryElementsArray = MetDataForSubmit.MandatoryElements;
            var IsCompleted = true;

            for (var itr1 = 0; itr1 < MandatoryElementsArray.length ; itr1++) {
                if (MandatoryElementsArray[itr1].Type == undefined || MandatoryElementsArray[itr1].Type == "DefaultDCValidationRuleMetaData") {
                    var AttributeNodeId = MandatoryElementsArray[itr1].AttributeNodeId;
                    var ControlId = MandatoryElementsArray[itr1].ControlId;
                    var defaultValue = MandatoryElementsArray[itr1].DefaultValue;
                    defaultValue = defaultValue.toLowerCase();

                    for (var itr2 = 0; itr2 < _oDcResultDetailsEntityList.length ; itr2++) {
                        var DcResultDetailsEntity = _oDcResultDetailsEntityList[itr2];

                        if (DcResultDetailsEntity.AttributeNodeId == AttributeNodeId && DcResultDetailsEntity.ControlId == ControlId) {


                            var valueFromPage = DcResultDetailsEntity.Answer;
                            if (DcResultDetailsEntity.AnswerDataType == 'STRING' && DcResultDetailsEntity.AnswerDataType != "") {
                                valueFromPage = valueFromPage.toLowerCase();
                            }

                            if (DcResultDetailsEntity.AnswerMode == 'DDL') {
                                if (DcResultDetailsEntity.AnswerValue == undefined || DcResultDetailsEntity.AnswerValue == '') {
                                    IsCompleted = false;
                                    break;
                                }
                            }
                            else if (valueFromPage === defaultValue || valueFromPage === '' || valueFromPage == undefined) {
                                IsCompleted = false;
                                break;
                            }

                        }
                    }

                }
                else if (MandatoryElementsArray[itr1].Type == "AdvanceDCValidationRuleMetaData") {
                    if (eval(MandatoryElementsArray[itr1].DCValidationRule) == false) {
                        IsCompleted = false;
                        break;
                    }
                }
                if (IsCompleted == false)
                    break;
            }
            OneViewConsole.Debug("IsCompleted end", "DataCaptureBO.IsCompleted");
            return IsCompleted;
        }
        catch (Excep) {
          //  alert('DataCaptureBO.IsCompleted Excep ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IsCompleted", Excep);
        }
        finally {
            MandatoryElementsArray = null;
            IsCompleted = null;
            AttributeNodeId = null;
            ControlId = null;
            defaultValue = null;
            DcResultDetailsEntity = null;
            valueFromPage = null;
        }
    }


    var IsCompleted = function (_oDcResultDetailsEntityList, MetDataForSubmit) {
        try {

            OneViewConsole.Debug("IsCompleted start", "DataCaptureBO.IsCompleted");
            OneViewConsole.DataLog("DcResultDetailsEntityList :" + JSON.stringify(_oDcResultDetailsEntityList), "DataCaptureBO.IsCompleted");
            OneViewConsole.DataLog("MetDataForSubmit :" + JSON.stringify(MetDataForSubmit), "DataCaptureBO.IsCompleted");

          //  var MandatoryElementsArray = MetDataForSubmit.MandatoryElements;
            var IsCompleted = true;
            
            //alert('IsCompleted MetDataForSubmit :' + JSON.stringify(MetDataForSubmit));
            if (MetDataForSubmit != undefined) {
                if (MetDataForSubmit.IsAgainstDC == true) {
                    if (MetDataForSubmit.DCValidationRuleMetaData != undefined) {
                        for (var i = 0; i < MetDataForSubmit.DCValidationRuleMetaData.length ; i++) {
                            if (MetDataForSubmit.DCValidationRuleMetaData[i].Type == "DefaultDCValidationRuleMetaData") {
                                if (MetDataForSubmit.DCValidationRuleMetaData[i].MandatoryElements != undefined) {
                                    var MandatoryElementsArray = MetDataForSubmit.DCValidationRuleMetaData[i].MandatoryElements;
                                    for (var itr1 = 0; itr1 < MandatoryElementsArray.length ; itr1++) {
                                        if (MandatoryElementsArray[itr1].Type == undefined || MandatoryElementsArray[itr1].Type == "DefaultDCValidationRuleMetaData") {
                                            var AttributeNodeId = MandatoryElementsArray[itr1].AttributeNodeId;
                                            var ControlId = MandatoryElementsArray[itr1].ControlId;
                                            var defaultValue = MandatoryElementsArray[itr1].DefaultValue;
                                            defaultValue = defaultValue.toLowerCase();

                                            for (var itr2 = 0; itr2 < _oDcResultDetailsEntityList.length ; itr2++) {
                                                var DcResultDetailsEntity = _oDcResultDetailsEntityList[itr2];

                                                if (DcResultDetailsEntity.AttributeNodeId == AttributeNodeId && DcResultDetailsEntity.ControlId == ControlId) {


                                                    var valueFromPage = DcResultDetailsEntity.Answer;
                                                    if (DcResultDetailsEntity.AnswerDataType == 'STRING' && DcResultDetailsEntity.AnswerDataType != "") {
                                                        valueFromPage = valueFromPage.toLowerCase();
                                                    }

                                                    if (DcResultDetailsEntity.AnswerMode == 'DDL') {
                                                        if (DcResultDetailsEntity.AnswerValue == undefined || DcResultDetailsEntity.AnswerValue == '') {
                                                            IsCompleted = false;
                                                            break;
                                                        }
                                                    }
                                                    else if (valueFromPage === defaultValue || valueFromPage === '' || valueFromPage == undefined) {
                                                        IsCompleted = false;
                                                        break;
                                                    }

                                                }
                                            }

                                        }
                                        else if (MandatoryElementsArray[itr1].Type == "AdvanceDCValidationRuleMetaData") {
                                            MandatoryElementsArray[itr1].FinalJavaScriptEquation = MandatoryElementsArray[itr1].FinalJavaScriptEquation.replace(/#/g, "'");
                                            if (eval(MandatoryElementsArray[itr1].FinalJavaScriptEquation) == false) {
                                                IsCompleted = false;
                                                break;
                                            }
                                        }
                                        if (IsCompleted == false)
                                            break;
                                    }
                                }
                            }

                            else if (MetDataForSubmit.DCValidationRuleMetaData[i].Type == "CustomDCValidationRuleMetaData") {
                                var Response;

                                var obj = new window[MetDataForSubmit.DCValidationRuleMetaData[i].OfflineDCValidationConfigObjectKey];
                                if (obj != undefined) {
                                    Response = obj.Execute(_oDcResultDetailsEntityList, false);


                                    if (Response.IsSuccess == false) {
                                        IsCompleted = false;
                                    }
                                }
                            }
                            else if (MetDataForSubmit.DCValidationRuleMetaData[i].Type == "AdvanceDCValidationRuleMetaData") {

                                MetDataForSubmit.DCValidationRuleMetaData[i].FinalJavaScriptEquation = MetDataForSubmit.DCValidationRuleMetaData[i].FinalJavaScriptEquation.replace(/#/g, "'");
                               // alert('MetDataForSubmit.DCValidationRuleMetaData[i] :' + JSON.stringify(MetDataForSubmit.DCValidationRuleMetaData[i]));
                                if (eval(MetDataForSubmit.DCValidationRuleMetaData[i].FinalJavaScriptEquation) == false) {                                  
                                    IsCompleted = false;
                                    break;
                                }
                            }

                          
                        }
                    }
                }
            }
           // alert('IsCompleted :' + IsCompleted);
            OneViewConsole.Debug("IsCompleted end", "DataCaptureBO.IsCompleted");
            return IsCompleted;
        }
        catch (Excep) {
           // alert('DataCaptureBO.IsCompleted Excep 11' + Excep);
            //  alert('DataCaptureBO.IsCompleted Excep 22' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IsCompleted", Excep);
        }
        finally {
            MandatoryElementsArray = null;
            IsCompleted = null;
            AttributeNodeId = null;
            ControlId = null;
            defaultValue = null;
            DcResultDetailsEntity = null;
            valueFromPage = null;
        }
    }

    //############## SetIsCompletedStatus End ################


    //############## Temperature probe  Start ################
    this.SetTemperature = function (TemperatureInfo) {
        try {
            //alert("SetTemperature : " +JSON.stringify(TemperatureInfo));
            OneViewConsole.Debug("SetTemperature start", "DataCaptureBO.SetTemperature");
            OneViewConsole.DataLog("TemperatureInfo :" + JSON.stringify(TemperatureInfo), "DataCaptureBO.SetTemperature");

            // alert("DataCaptureBO.SetTemperature" + parseFloat(TemperatureInfo.Temperature));
            var IsSuccess = true;

            if (MyInstance.ModelIdForAutoTemperatureUpdation != "" && MyInstance.ModelIdForAutoTemperatureUpdation != null && MyInstance.ModelIdForAutoTemperatureUpdation != undefined) {
                var Model = MyInstance.ModelIdForAutoTemperatureUpdation.split('.')[1];

                var oDefaultValidationResponse = new DefaultValidationResponse();
                oDefaultValidationResponse = MyInstance.ProbPreControlEvents(Model);
                IsSuccess = oDefaultValidationResponse.IsSuccess;
                //alert('IsSuccess : ' + IsSuccess);
                if (IsSuccess) {
                    SetValueInModel(MyInstance.ModelIdForAutoTemperatureUpdation, parseFloat(TemperatureInfo.Temperature));
                    //if (MyInstance.ModelIdForAutoTimeUpdation != undefined && MyInstance.ModelIdForAutoTimeUpdation != "") {
                    //    var oDateTime = new DateTime();
                    //    var CurrentTime = oDateTime.GetHoursAndMinutes();
                    //    SetTimeInModel(MyInstance.ModelIdForAutoTimeUpdation, CurrentTime);
                    //}

                    var ControlId = MyInstance.ModelIdForAutoTemperatureUpdation.split('.');
                    if (MyInstance.SetAutoTemperatureEventHandler != undefined) {
                        oScope.ControlId = 'red';
                        MyInstance.SetAutoTemperatureEventHandler(ControlId[1]);
                    }
                    if (MyInstance.TemperatureNgKeyUpEventHandler != undefined && MyInstance.TemperatureNgKeyUpEventHandler != null && MyInstance.TemperatureNgKeyUpEventHandler != "") {

                        //EKFC
                        if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 1) {
                            if (TemplateId == 2) {//CookingAndBlastChillingMonitoring
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(11, 'txtCoreTempControlId', 'DTCookingTimeControlId', true, 12);
                                }
                                else if (Model == "ATPreChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(15, 'ATPreChillerTempInControlId', 'DTPreChillerTimeInControlId', false, 14);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(20, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', true, 19);
                                }
                                else if (Model == "ATPreChillerTempOutControlId") {
                                    //oDefaultValidationResponse = MyInstance.PostControlEventsExe(17, 'ATPreChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(17, 'ATPreChillerTempOutControlId', 'DTPreChillerTimeOutControlId', true, 16);
                                    //}
                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    //oDefaultValidationResponse = MyInstance.PostControlEventsExe(22, 'ATBlastChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(22, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 21);
                                    //}
                                }
                            }
                            else if (TemplateId == 3) {//Cooking And BlastChilling Verification
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(31, 'txtCoreTempControlId', 'DTCookingTimeControlId', true, 32);
                                }
                                else if (Model == "ATPreChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(35, 'ATPreChillerTempInControlId', 'DTPreChillerTimeInControlId', false, 34);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(40, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', true, 39);
                                }
                                else if (Model == "ATPreChillerTempOutControlId") {
                                    //  oDefaultValidationResponse = MyInstance.PostControlEventsExe(37, 'ATPreChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(37, 'ATPreChillerTempOutControlId', 'DTPreChillerTimeOutControlId', true, 36);
                                    // }

                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    //oDefaultValidationResponse = MyInstance.PostControlEventsExe(42, 'ATBlastChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(42, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 41);
                                    //}
                                }
                            }
                            else if (TemplateId == 88) {//BakingBCVerification
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(91, 'txtCoreTempControlId', 'DTBakingTimeControlId', false, 92);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(95, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', false, 94);
                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(97, 'ATBlastChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(97, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 96);
                                    //}

                                }
                            }
                            else if (TemplateId == 282) {//ColdMealDishingVerification
                                if (Model == "StartingTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(289, 'StartingTempInControlId', 'TMStartingTimeInControlId', false, 288);
                                }
                                else if (Model == "FinishingTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(291, 'FinishingTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(291, 'FinishingTempOutControlId', 'TMFinishingTimeOutControlId', false, 290);
                                }
                                else if (Model == "AmbientTempControlId") {
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(285, 'AmbientTempControlId', '', false);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }
                            else if (TemplateId == 140) {//HotMealDishingVerification
                                if (Model == "StartingTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(147, 'StartingTempInControlId', 'DTStartingTimeInControlId', false, 146);
                                }
                                else if (Model == "FinishingTempOutControlId") {
                                    //oDefaultValidationResponse = MyInstance.PostControlEventsExe(149, 'FinishingTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(149, 'FinishingTempOutControlId', 'DTFinishingTimeOutControlId', false, 148);
                                }
                                else if (Model == "DTAmbientTempControlId") {
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(143, 'DTAmbientTempControlId', '', false);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }

                            else if (TemplateId == 116) {//TraySettingVerification
                                if (Model == "StartingTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(123, 'StartingTempInControlId', 'DTStartingTimeInControlId', false, 122);
                                }
                                else if (Model == "FinishingTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(125, 'FinishingTempOutControlId');
                                    // if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(125, 'FinishingTempOutControlId', 'DTFinishingTimeOutControlId', false, 124);
                                }
                                else if (Model == "DTAmbientTempControlId") {
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(119, 'DTAmbientTempControlId', '', false);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }
                            else if (TemplateId == 77) {//ThawingVerification                      
                                if (Model == "txtTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(84, 'txtTempControlId', 'DTTimeCheckedControlId', false, 85);
                                }
                            }
                            else if (TemplateId == 128) {//PastryPortioningVerifications
                                if (Model == "StartingTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(135, 'StartingTempInControlId', 'DTStartingTimeInControlId', false, 134);
                                }
                                else if (Model == "FinishingTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(137, 'FinishingTempOutControlId');
                                    // if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(137, 'FinishingTempOutControlId', 'DTFinishingTimeOutControlId', false, 136);
                                }
                                else if (Model == "DTAmbientTempControlId") {
                                    //if (oDefaultValidationResponse.IsSuccess)
                                    MyInstance.TemperatureNgKeyUpEventHandler(119, 'DTAmbientTempControlId', '', false);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }
                            else if (TemplateId == 293) {//AircraftLoadingVerification   
                                if (Model == "AircraftLoadingTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(299, 'AircraftLoadingTempControlId', 'TMAircraftLoadingTimeControlId', false);
                                }
                                else if (Model == "TempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(302, 'TempControlId', '', false);
                                }
                            }
                            else if (TemplateId == 44) {//GoodsReceiving 
                                if (Model == "ATSurfaceTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(61, 'ATSurfaceTempControlId', 'DTTimeControlId', true);
                                }
                                else if (Model == "ATTruckTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(54, 'ATTruckTempControlId', 'DTTimeControlId', true);
                                }
                            }
                            else if (TemplateId == 325) {//CookingAndBlastChillingMonitoringEKFC2
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(333, 'txtCoreTempControlId', 'DTCookingTimeControlId', true, 334);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(338, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', true, 337);
                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(340, 'ATBlastChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(340, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 339);
                                    // }
                                }
                            }
                            else if (TemplateId == 342) {//Cooking And BlastChilling VerificationEKFC2
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(350, 'txtCoreTempControlId', 'DTCookingTimeControlId', true, 351);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(355, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', true, 354);
                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(357, 'ATBlastChillerTempOutControlId');
                                    // if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(357, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 356);
                                    // }
                                }
                            }
                            else if (TemplateId == 434) {//Staff Food Temperature
                                if (Model == "ATFoodTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(439, 'ATFoodTempControlId', 'DTStartingTimeInControlId', false);
                                }
                                else if (Model == "ATBainMarieTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(440, 'ATBainMarieTempControlId', '', false);
                                }
                            }
                            else if (TemplateId == 442) {//ChillerFreezerChecking
                                if (Model == "ATAirProbeTempControlId") {
                                    // oDefaultValidationResponse = MyInstance.PostControlEventsExe(449, 'ATAirProbeTempControlId');
                                    MyInstance.TemperatureNgKeyUpEventHandler(449, 'ATAirProbeTempControlId', 'DTStartingTimeInControlId', false);
                                }
                                else if (Model == "ATGaugeTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(448, 'ATGaugeTempControlId', '', false);
                                }
                            }
                            else if (TemplateId == 463) {//MEALS DISPATCH TEMPERATURE LOG
                                if (Model == "ATTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(469, 'ATTempControlId', 'DTStartingTimeInControlId', false);
                                }
                            }
                            else if (TemplateId == 452) {//Dispatch Temperature Verification of Food Products EKFC to EKFC  
                                if (Model == "ATLoadingTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(456, 'ATLoadingTempControlId', 'DTLoadingTimeControlId', false);
                                }
                                else if (Model == "ATOffLoadingTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(461, 'ATOffLoadingTempControlId', 'DTOffLoadingTimeControlId', false);
                                }
                            }
                            else if (TemplateId == 704) {//Dispatch Temperature and Humidity Monitoring Report- Rev 1 - (ML-FRM- 009)
                                if (Model == "ATAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(706, 'ATAmbientTempControlId', 'DTTimeControlId', true, 707);
                                }
                            }
                            else if (TemplateId == 8272) {//Temperature Verification of Dispatching
                                if (Model == "ATDeliveryTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8290, 'ATDeliveryTempControlId', 'DTDeliveryTimeControlId', true, 8291);
                                }
                                else if (Model == "ATDispatchTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8293, 'ATDispatchTempControlId', 'DTDispatchTimeControlId', true, 8294);
                                }
                                else if (Model == "ATDeliveryAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8754, 'ATDeliveryAmbientTempControlId', '', true);
                                }
                                else if (Model == "ATDispatchAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8755, 'ATDispatchAmbientTempControlId', '', true);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }
                            else if (TemplateId == 8314) {//NewCookingAndBlastChillingMonitoringEKFC2
                                if (Model == "txtCoreTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8322, 'txtCoreTempControlId', 'DTCookingTimeControlId', true, 8323);
                                }
                                else if (Model == "ATBlastChillerTempInControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8327, 'ATBlastChillerTempInControlId', 'DTBlastChillerTimeInControlId', true, 8326);
                                }
                                else if (Model == "ATBlastChillerTempOutControlId") {
                                    //oDefaultValidationResponse = MyInstance.PostControlEventsExe(340, 'ATBlastChillerTempOutControlId');
                                    //if (oDefaultValidationResponse.IsSuccess) {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8329, 'ATBlastChillerTempOutControlId', 'DTBlastChillerTimeOutControlId', true, 8328);
                                    // }
                                }
                            }
                            else if (TemplateId == 535) {//Pot-Trolley-Dish Wash
                                if (Model == "txtFinalRinseControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(542, 'txtFinalRinseControlId', 'DTTimeControlId', true, 541);
                                }
                            }
                            else if (TemplateId == 1369) {
                                if (Model == "ATSampleCollectionTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(1384, 'ATSampleCollectionTempControlId', 'DTSampleCollectionTimeControlId', true, 1385);
                                }
                                else if (Model == "ATAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(1386, 'ATAmbientTempControlId', 'DTAmbientTimeControlId', true, 1387);
                                }
                                else if (Model == "ATLabChillerTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(1388, 'ATLabChillerTempControlId', 'DTLabChillerTimeControlId', true, 1389);
                                }
                                else if (Model == "ATReceivingTemperatureControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(1776, 'ATReceivingTemperatureControlId', 'DTTimeofReceiptControlId', true, 1457);
                                }

                            }
                        }

                            //EKFC Dispatching
                        else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 2) {
                            if (TemplateId == 8272) {//Temperature Verification of Dispatching
                                if (Model == "ATDeliveryTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8290, 'ATDeliveryTempControlId', 'DTDeliveryTimeControlId', true, 8291);
                                }
                                else if (Model == "ATDispatchTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8293, 'ATDispatchTempControlId', 'DTDispatchTimeControlId', true, 8294);
                                }
                                else if (Model == "ATDeliveryAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8754, 'ATDeliveryAmbientTempControlId', '', true);
                                }
                                else if (Model == "ATDispatchAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(8755, 'ATDispatchAmbientTempControlId', '', true);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }

                            else if (TemplateId == 12208) {//New Temperature Verification of Dispatching
                                if (Model == "ATDeliveryTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(12226, 'ATDeliveryTempControlId', 'DTDeliveryTimeControlId', true, 12227);
                                }
                                else if (Model == "ATDispatchTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(12230, 'ATDispatchTempControlId', 'DTDispatchTimeControlId', true, 12232);
                                }
                                else if (Model == "ATDeliveryAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(12228, 'ATDeliveryAmbientTempControlId', '', true);
                                }
                                else if (Model == "ATDispatchAmbientTempControlId") {
                                    MyInstance.TemperatureNgKeyUpEventHandler(12231, 'ATDispatchAmbientTempControlId', '', true);
                                }
                                else if (Model == "Reading1ControlId" || Model == "Reading2ControlId" || Model == "Reading3ControlId" || Model == "Reading4ControlId" || Model == "Reading5ControlId") {
                                    MyInstance.SetHygAvgrageReading();
                                }
                            }
                        }
                        else{
                          
                            if(MyInstance.AutoTemperatureUpdationReqObj !=undefined && MyInstance.AutoTemperatureUpdationReqObj !=""){
                                var ReqObj=MyInstance.AutoTemperatureUpdationReqObj;
                                var _AttributeId="";
                                var _ControlId="";
                                var _RefreshcontrolId="";
                                var _RefreshAttributeId="";
                                var _IsNc="";

                                if(ReqObj.AttributeId !=undefined && ReqObj.AttributeId !=""){
                                    _AttributeId=ReqObj.AttributeId;
                                }
                                if(ReqObj.ControlId !=undefined && ReqObj.ControlId !=""){
                                    _ControlId=ReqObj.ControlId;
                                }  
                                if(ReqObj.RefreshcontrolId !=undefined && ReqObj.RefreshcontrolId !=""){
                                    _RefreshcontrolId=ReqObj.RefreshcontrolId;
                                }
                                if(ReqObj.RefreshAttributeId !=undefined && ReqObj.RefreshAttributeId !=""){
                                    _RefreshAttributeId=ReqObj.RefreshAttributeId;
                                }
                                if(ReqObj.IsNc !=undefined && ReqObj.IsNc !=""){
                                    IsNc=ReqObj.IsNc;
                                }                                
                              
                                MyInstance.TemperatureNgKeyUpEventHandler(_AttributeId, _ControlId,_RefreshcontrolId, _IsNc, _RefreshAttributeId);
                            }
                        }
                    }
                }
              

                SetIsManualStatus(MyInstance.ModelIdForAutoTimeUpdation);

            }

            oScope.$apply();


            OneViewConsole.Debug("SetTemperature end", "DataCaptureBO.SetTemperature");
        }
        catch (Excep) {
            // alert("DataCaptureBO.SetTemperature" + Excep)
            // alert("DataCaptureBO.SetTemperature" + JSON.stringify( Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetTemperature", Excep);
        }
        finally {
            oDateTime = null;
            CurrentTime = null;
            ControlId = null;
        }

    }

    var SetValueInModel = function (ModelName, Value) {
        try {
            OneViewConsole.Debug("SetValueInModel start", "DataCaptureBO.SetValueInModel");

            var res = ModelName.split('.');
            if (res.length == 1) {
                oScope[ModelName] = Value;
                oScope[ModelName + "_IsManual"] = false;
            }
            else if (res.length == 2) {
                oScope[res[0]][res[1]] = Value;
                oScope[[res[1] + "_IsManual"]] = false;
            }
            else
                alert('not implemented exception');

            oScope.$apply();

       
            OneViewConsole.DataLog("Temperature Value :" + Value, "DataCaptureBO.SetValueInModel");
            OneViewConsole.Debug("SetValueInModel end", "DataCaptureBO.SetValueInModel");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetValueInModel", Excep);
        }
        finally {
            res = null;
        }
    }

    var SetTimeInModel = function (ModelName, Value) {
        try {
            OneViewConsole.Debug("SetTimeInModel start", "DataCaptureBO.SetTimeInModel");
            var res = ModelName.split('.');
            if (res.length == 1) {
                //oScope[ModelName] = Value; //Comment due to upgradation of angular framework, Not working due to new angular
                var temp = document.getElementById(res[0]);
                if (temp != null)
                {
                    temp.value = Value;
                }
              
                oScope[ModelName + "_IsManual"] = false;
            }
            else if (res.length == 2) {
                //oScope[res[0]][res[1]] = Value; //Comment due to upgradation of angular framework, Not working due to new angular
                var temp = document.getElementById(res[1]);
                if (temp != null) {
                    temp.value = Value;
                }
                oScope[[res[1] + "_IsManual"]] = false;
            }
            else
                alert('not implemented exception');


            OneViewConsole.DataLog("Temperature Value :" + Value, "DataCaptureBO.SetTimeInModel");
            OneViewConsole.Debug("SetTimeInModel end", "DataCaptureBO.SetTimeInModel");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetTimeInModel", Excep);
        }
        finally {
            res = null;
        }
    }
     
    
    var SetIsManualStatus = function (ModelName) {
        try {
            OneViewConsole.Debug("SetIsManualStatus start", "DataCaptureBO.SetIsManualStatus");
            var res = ModelName.split('.');
         
            if (res.length == 1) {
                oScope[ModelName + "_IsManual"] = false;
            }
            else if (res.length == 2) {
                oScope[res[1] + "_IsManual"] = false;
            }
            else
                alert('not implemented exception');

            OneViewConsole.Debug("SetIsManualStatus end", "DataCaptureBO.SetIsManualStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetIsManualStatus", Excep);
        }
        finally {
            res = null;
        }
    }

 
    this.SetDefaultAutoTemperatureListener = function () {
        try
        {
            // alert('SetDefaultAutoTemperatureListener Start');
            OneViewConsole.Debug("SetDefaultAutoTemperatureListener start", "DataCaptureBO.SetDefaultAutoTemperatureListener");

            //new OneViewBluetoothTemperatureLoggerPlugin();
            oGlobalOneViewBluetoothTemperatureLoggerPlugin.AutoTemperatureEventHandler = MyInstance.SetTemperature;
          
            OneViewConsole.Debug("SetDefaultAutoTemperatureListener end", "DataCaptureBO.SetDefaultAutoTemperatureListener");
           // alert('SetDefaultAutoTemperatureListener End');
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetDefaultAutoTemperatureListener", Excep);
        }
    }
    //############## Temperature probe End ################


    this.ValidateDcByOccurence = function () {
        try {
            // alert('SetDefaultAutoTemperatureListener Start');
            OneViewConsole.Debug("ValidateDcByOccurence start", "DataCaptureBO.ValidateDcByOccurence");

            var TemplateId = OneViewSessionStorage.Get("TemplateId");
            var IsValid = true;
           //// var DcCount = new DcDAO().GetDcCountByDcProfileId(DcProfileId);
            var DcCount = new DcDAO().GetDcCountByAllDimensions(LoginUserId, TemplateId, DcPlaceId, ServiceId);
            var DcOccurence = OneViewSessionStorage.Get("DcOccurence");
            if ((DcOccurence != -1 || DcOccurence != '-1') && DcCount >= DcOccurence) {
                IsValid = false;
            }
            OneViewConsole.Debug("ValidateDcByOccurence end", "DataCaptureBO.ValidateDcByOccurence");

            //alert('DcCount' + DcCount  + " , OneViewSessionStorage.Get('DcOccurence') : " + OneViewSessionStorage.Get("DcOccurence"));

            return IsValid;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ValidateDcByOccurence", Excep);
        }
    }




    this.DeleteNCReleatedDataOLD = function (NCDCId) {
        try
        {
            OneViewConsole.Debug("DeleteNCReleatedData start", "DataCaptureBO.DeleteNCReleatedData");
            OneViewConsole.DataLog("NCDCId :" + NCDCId, "DataCaptureBO.DeleteNCReleatedData");

            if (NCDCId != undefined) {
                var resData = oDataCaptureDAO.GetDataCaptureByDcId(NCDCId);
                var Query = "SELECT * FROM ActionDetailsEntity WHERE DataCaptureClientGuid='" + resData[0].ClientGuid + "'";
                var result = window.OneViewSqlite.excecuteSqlReader(Query);
                result = JSON.parse(result);
                var Q1 = "UPDATE DCNCMapping SET ActionClientGuid='',IsNC='false' WHERE ActionClientGuid='" + result[0].ActionClientGuid + "'";
                var Q2 = "DELETE FROM ActionEntity WHERE ClientGuid='" + result[0].ActionClientGuid + "'";
                var Q3 = "DELETE FROM ActionDetailsEntity WHERE ActionClientGuid='" + result[0].ActionClientGuid + "'";
                var Q4 = "DELETE FROM MultiMediaBlobSubElements WHERE ClientGuid IN (SELECT Answer FROM DcResultDetailsEntity WHERE DcResultDetailsEntity.DataCaptureId=" + NCDCId + ")";
                var Q5 = "DELETE FROM DcResultDetailsEntity WHERE DataCaptureId=" + NCDCId + "";
                var Q6 = "DELETE FROM DcResultsEntity WHERE DataCaptureId=" + NCDCId + "";
                var Q7 = "DELETE FROM DataCaptureEntity WHERE Id=" + NCDCId + "";
                window.OneViewSqlite.excecuteSql(Q1);
                window.OneViewSqlite.excecuteSql(Q2);
                window.OneViewSqlite.excecuteSql(Q3);
                window.OneViewSqlite.excecuteSql(Q4);
                window.OneViewSqlite.excecuteSql(Q5);
                window.OneViewSqlite.excecuteSql(Q6);
                window.OneViewSqlite.excecuteSql(Q7);

                OneViewConsole.Debug("DeleteNCReleatedData end", "DataCaptureBO.DeleteNCReleatedData");
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DeleteNCReleatedData", Excep);
        }
        finally {
            resData = null;
            Query = null;
            result = null;
            Q1 = null;
            Q2 = null;
            Q3 = null;
            Q4 = null;
            Q5 = null;
            Q6 = null;
            Q7 = null;
        }
    }

 
    ///////////////////////////////////////************************* Evaluate NC and Action START **************************************** ////////////////////////////////////////////////////////

    // 1. Evaluate ctriteria
    // 2. If is automatic show the message and create DCNC mapping
    // If is manual show the message and enable the button
    // If any vallidation
    //save  time we cross validate NC again,because EKFC client get some issue,those we acn't rege
    this.EvaluateActionNCStatus = function (AttributeId,IsSaveNCCrossValidation,IsViewRecordsPage) {
        try {
            //oScope.BtnNCObservations = false;
           //alert(AttributeId + "IsSaveNCCrossValidation ," + IsSaveNCCrossValidation + "IsViewRecordsPage ," + IsViewRecordsPage);
            //Intialize CPActionNCComponent and call GetActionNCStatus
            var _oCPActionNCComponent = new CPActionNCComponent(oScope, oTemplateNodes, '', xlatService);
            var ActionNCConfigSettingList = _oCPActionNCComponent.GetActionNCStatus(AttributeId, IsViewRecordsPage);
         
            var IsAnyNC = false;

          
           // alert(ActionNCConfigSettingList.length);
            
            var ActionResponseList = [];
            var ActionResponse;
            for (var i = 0; i < ActionNCConfigSettingList.length; i++) {
                //  ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId
                //alert('ActionNCConfigSettingList[i].IsRuleViolated :' + ActionNCConfigSettingList[i].IsRuleViolated);
              

                if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsManual != true && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsActionEnable == true && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNC == true
                    && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsCustomActionEnabled == true) {
                                            
                        oScope.CommentsRightPanel = "";
                        oScope.CustomActions = [];
                        oScope.ActionMultiMediaSubElements = [];
                    
                        var DCNCMappingListData = new Array();
                        DCNCMappingListData[0] = {
                            'NCRuleId': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId,
                            'IsNC': false,
                            "IsObservation": false,
                            "Comments": "",
                            "IsManualRule": false,
                            "RuleName": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleName,
                            "RuleDescription": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleDescription,
                            "AttributeGroupId": AttributeId,
                            'RuleGroup': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup,
                            'RuleCode': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleCode,
                            'Deviatedby': ActionNCConfigSettingList[i].Deviatedby,
                            'ExpectedValue': ActionNCConfigSettingList[i].ExpectedValue,
                            'ActualValue': ActionNCConfigSettingList[i].ActualValue,
                            'TemplateNodeIds': ActionNCConfigSettingList[i].ActionNCConfigSetting.TemplateNodeIds
                        };

                        if (ActionNCConfigSettingList[i].IsRuleViolated == true) {
                            
                            if (IsSaveNCCrossValidation != true) {
                                //  alert('ActionNCConfigSettingList[i] : ' + JSON.stringify(ActionNCConfigSettingList[i]));
                                MyInstance.DisplayNCMessage(ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey);
                            }
                       
                            AttributeActionNCConfig = ActionNCConfigSettingList[i];
                          //  alert('AttributeActionNCConfig : ' + JSON.stringify(AttributeActionNCConfig));

                            DCNCMappingListData[0].IsNC = ActionNCConfigSettingList[i].IsRuleViolated;

                            LoadCustomActions(ActionNCConfigSettingList[i].ActionNCConfigSetting, AttributeId, ActionNCConfigSettingList[i].IsRuleViolated);

                            LoadActionMultimediaSubElements(ActionNCConfigSettingList[i].ActionNCConfigSetting);

                            //alert('DCNCMappingListData :' + JSON.stringify(DCNCMappingListData));
                            CreateDCNCMapping(DCNCMappingListData);

                            MyInstance.LoadNCActionsHtml(ocompile, IsSaveNCCrossValidation, AttributeId);
                        }
                        else {

                            LoadCustomActions(ActionNCConfigSettingList[i].ActionNCConfigSetting, AttributeId, ActionNCConfigSettingList[i].IsRuleViolated);

                            LoadActionMultimediaSubElements(ActionNCConfigSettingList[i].ActionNCConfigSetting);

                            CreateDCNCMapping(DCNCMappingListData);

                            UpdateCPActionResultForNoNC(ActionNCConfigSettingList[i].ActionNCConfigSetting, ActionNCConfigSettingList[i].IsRuleViolated);
                        }
                                        

                }

                else if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsManual == false) {

                    if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsActionEnable == true && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNC == true) {

                        if (ActionNCConfigSettingList[i].IsRuleViolated == true) {                            
                            IsAnyNC = true;
                            if (IsSaveNCCrossValidation != true) {
                              //  alert('ActionNCConfigSettingList[i] : ' + JSON.stringify(ActionNCConfigSettingList[i]));
                              MyInstance.DisplayNCMessage(ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey);
                            } 

                            ActionResponse = _oCPActionNCComponent.EvaluateAction(ActionNCConfigSettingList[i], ActionNCConfigSettingList[i].IsRuleViolated);
                            //alert('ActionResponse' + JSON.stringify(ActionResponse));
                            // ActionResponse = _oCPActionNCComponent.EvaluateAction(ActionNCConfigSettingList[i].ActionNCConfigSetting, ActionNCConfigSettingList[i].IsRuleViolated);
                            ActionResponseList.push(ActionResponse);

                           // alert('ActionResponseList 1: ' + JSON.stringify(ActionResponseList));
                        }

                        else {
                            ActionResponse = _oCPActionNCComponent.EvaluateAction(ActionNCConfigSettingList[i], ActionNCConfigSettingList[i].IsRuleViolated);
                            ActionResponseList.push(ActionResponse);

                         //   alert('ActionResponseList 2: ' + JSON.stringify(ActionResponseList));
                            var NCForDelete = CheckNCExistsBeforeEdit(ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId, ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup);
                            if (NCForDelete != undefined)
                                NCListForDelete.push(NCForDelete);

                        }

                        var DCNCMappingListData = new Array();           
                        DCNCMappingListData[0] = {
                            'NCRuleId': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId,
                            'IsNC': ActionNCConfigSettingList[i].IsRuleViolated,
                            "IsObservation": false,
                            "Comments": "",
                            "IsManualRule": false,
                            "RuleName": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleName,
                            "RuleDescription": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleDescription,
                            "AttributeGroupId": AttributeId,
                            'RuleGroup': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup,
                            'RuleCode': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleCode,
                            'Deviatedby': ActionNCConfigSettingList[i].Deviatedby,
                            'ExpectedValue': ActionNCConfigSettingList[i].ExpectedValue,
                            'ActualValue': ActionNCConfigSettingList[i].ActualValue,
                            'TemplateNodeIds': ActionNCConfigSettingList[i].ActionNCConfigSetting.TemplateNodeIds
                        };
                        //alert('DCNCMappingListData :' + JSON.stringify(DCNCMappingListData));
                        CreateDCNCMapping(DCNCMappingListData);
                    }

                    else if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsActionEnable == false && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNC == true) {
                        if (ActionNCConfigSettingList[i].IsRuleViolated == true) {                          
                            IsAnyNC = true;
                            if (IsSaveNCCrossValidation != true) {
                                MyInstance.DisplayNCMessage(ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey);
                            }
                        }
                       
                        var DCNCMappingListData = new Array();
                        DCNCMappingListData[0] = {
                            'NCRuleId': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId,
                            'IsNC': ActionNCConfigSettingList[i].IsRuleViolated,
                            "IsObservation": false,
                            "Comments": "",
                            "IsManualRule": false,
                            "RuleName": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleName,
                            "RuleDescription": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleDescription,
                            "AttributeGroupId": AttributeId,
                            'RuleGroup': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup,
                            'RuleCode': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleCode,
                            'Deviatedby': ActionNCConfigSettingList[i].Deviatedby,
                            'ExpectedValue': ActionNCConfigSettingList[i].ExpectedValue,
                            'ActualValue': ActionNCConfigSettingList[i].ActualValue,
                            'TemplateNodeIds': ActionNCConfigSettingList[i].ActionNCConfigSetting.TemplateNodeIds
                        };

                        CreateDCNCMapping(DCNCMappingListData);
                    }

                    else if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsActionEnable == true && ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNC == false) {
                        alert('IsActionEnable == true and IsNC == false : Not implemented');
                    }

                    else if (ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNC == '') {
                        alert('NC Empty : Not implemented');
                    }
                }

                 

                else if (IsSaveNCCrossValidation != true) {
                    if (IsViewRecordsPage != true) {
                        // alert('in');
                        if (ActionNCConfigSettingList[i].IsRuleViolated == true) {
                            //DisplayNCMessage(ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey);
                            //oScope.BtnNCObservations = true;
                            //IsAnyNC = true;
                            MyInstance.IsNCOrObservationMandatory = ActionNCConfigSettingList[i].ActionNCConfigSetting.IsNCOrObservationMandatory;
                            MyInstance.IsCommentsMandatory = ActionNCConfigSettingList[i].ActionNCConfigSetting.IsCommentsMandatory;
                            MyInstance.IsManualRule = ActionNCConfigSettingList[i].ActionNCConfigSetting.IsManualRule;
                            MyInstance.NCOrObservationRuleId = ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId;
                            MyInstance.NCOrObservationRuleName = ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleName;
                            MyInstance.NCOrObservationRuleDescription = ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleDescription;
                            MyInstance.RuleGroup = ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup;
                            MyInstance.RuleCode = ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleCode;

                            MyInstance.Deviatedby = ActionNCConfigSettingList[i].Deviatedby,
                            MyInstance.ExpectedValue = ActionNCConfigSettingList[i].ExpectedValue;
                            MyInstance.ActualValue = ActionNCConfigSettingList[i].ActualValue;
                            MyInstance.TemplateNodeIds = ActionNCConfigSettingList[i].ActionNCConfigSetting.TemplateNodeIds;

                            if (ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey != "") {

                                var Title = xlatService.xlat('MannualNCConfirmBoxHeader');
                                var Message = ActionNCConfigSettingList[i].ActionNCConfigSetting.CriteriaDisplayLabelKey;

                                var oOneViewCordovaPlugin = new OneViewCordovaPlugin();
                                oOneViewCordovaPlugin.DefaultConfirmBox(Title, Message, function (ConfirmationId) {

                                    if (ConfirmationId == '2') {
                                        MyInstance.LoadNCCommentsHtml(ocompile);
                                    }
                                });
                            }

                            // alert(ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId);
                        }
                        else {
                            // alert('CommentsResult' + ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId + JSON.stringify(CommentsResult));
                            if (CommentsResult["'" + ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup + "'"] != undefined) {
                                // if (DcId != null) {
                                //alert('here');
                                var DCNCMappingListData = new Array();
                                DCNCMappingListData[0] = {
                                    'NCRuleId': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleId,
                                    'IsNC': false,
                                    "IsObservation": false,
                                    "Comments": "",
                                    "IsManualRule": true,
                                    "RuleName": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleName,
                                    "RuleDescription": ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleDescription,
                                    "AttributeGroupId": AttributeId,
                                    'RuleGroup': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup,
                                    'RuleCode': ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleCode,
                                    'Deviatedby': ActionNCConfigSettingList[i].Deviatedby,
                                    'ExpectedValue': ActionNCConfigSettingList[i].ExpectedValue,
                                    'ActualValue': ActionNCConfigSettingList[i].ActualValue,
                                    'TemplateNodeIds': ActionNCConfigSettingList[i].ActionNCConfigSetting.TemplateNodeIds
                                };
                                CreateDCNCMapping(DCNCMappingListData);
                                // }

                                delete CommentsResult["'" + ActionNCConfigSettingList[i].ActionNCConfigSetting.RuleGroup + "'"];
                                // alert('CommentsResult after' + JSON.stringify(CommentsResult));
                            }
                        }
                    }
                }
            }

            //UpdateNCColor(IsAnyNC, AttributeId);
         
           
            
            CreateAttributeActionDict(AttributeId,ActionResponseList)
            //Return FormAction and display form in controlller (there create action at the time of save by checking in AttributeWiseActionDict)

            //alert('DCNCMappingList  :' + MyInstance.DCNCMappingList.length + ", " + JSON.stringify(MyInstance.DCNCMappingList));
            //alert('NCListForDelete :' + JSON.stringify(NCListForDelete));
            //alert('ActionResponseList :' + JSON.stringify(ActionResponseList));
           // alert('AttributeWiseActionDict' + JSON.stringify(AttributeWiseActionDict));

            return ActionResponseList;
        }
        catch (Excep) {
           // alert('EvaluateActionNCStatus Excep ' + Excep);
           // alert('EvaluateActionNCStatus Excep ' +JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.EvaluateActionNCStatus", Excep);
        }
        finally {
            _oCPActionNCComponent = null;
            NCRuleDetailsList = null;
        }
    }

    var UpdateNCColor = function (IsAnyNC, AttributeId) {
        try {
            var _oNCColorComponent = new NCColorComponent();
            if (IsAnyNC == true) {
                _oNCColorComponent.Show(AttributeId);
            }
            else {
                _oNCColorComponent.Remove(AttributeId);
            }
        }
        catch (Excep) {           
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateNCColors", Excep);
        }
    }

    var CreateAttributeActionDictOLD = function (AttributeId, ActionResponseList) {
        try {
            OneViewConsole.Debug("CreateAttributeActionDict Start", "DataCaptureBO.CreateAttributeActionDict");
            
            if (AttributeWiseActionDict[AttributeId] == undefined) {
                if (ActionResponseList.length > 0) {
                    AttributeWiseActionDict[AttributeId] = ActionResponseList;
                }
            }

            else {
                //alert('For ActionResponseList.length' + ActionResponseList.length + AttributeId + "," + JSON.stringify(AttributeWiseActionDict));
                // alert('For delete' + AttributeWiseActionDict[AttributeId] + "," + JSON.stringify(AttributeWiseActionDict[AttributeId]));
                //remove action i.e attribute from dict
                delete AttributeWiseActionDict[AttributeId];
                if (ActionResponseList.length > 0) {
                    AttributeWiseActionDict[AttributeId] = ActionResponseList;
                }

            }

            OneViewConsole.Debug("CreateAttributeActionDict End", "DataCaptureBO.CreateAttributeActionDict");
        }
        catch (Excep) {
           // alert('Get :' + Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateAttributeActionDict", Excep);

        }
        finally {
        }
    }

    var CreateAttributeActionDict = function (AttributeId, ActionResponseList) {
        try {
            //alert('AttributeWiseActionDict :' + AttributeId + ", AttributeWiseActionDict[AttributeId] :" + AttributeWiseActionDict[AttributeId] + ", ActionResponseList.length" + ActionResponseList.length  + JSON.stringify(AttributeWiseActionDict));

            var len = 0;
            OneViewConsole.Debug("CreateAttributeActionDict Start", "DataCaptureBO.CreateAttributeActionDict");
            if (AttributeWiseActionDict[AttributeId] == undefined) {
               // alert('in');
                if (ActionResponseList.length == 1 || ActionResponseList.length == '1') {
                    //alert('ActionResponseList.length dcsdf' + ActionResponseList.length);
                    for (var key in AttributeWiseActionDict) {
                       
                        len++
                        var ActionData = AttributeWiseActionDict[key];
                        //alert('ActionData :' + JSON.stringify(ActionData));
                        //alert('ActionResponseList :' + JSON.stringify(ActionResponseList));

                       // if (ActionData[0].RuleId == ActionResponseList[0].RuleId) {
                        if (ActionData[0].RuleGroup == ActionResponseList[0].RuleGroup) {
                           // alert('here' + key);
                            delete AttributeWiseActionDict[key];
                            AttributeWiseActionDict[AttributeId] = ActionResponseList;
                            if (ActionResponseList[0].IsRuleViolated == true) {
                                MyInstance.FormActionCount++;
                            }
                        }
                        else {
                            alert('More than one action for one form not implemented');
                        }
                    }
                    if (len == 0) {
                        AttributeWiseActionDict[AttributeId] = ActionResponseList;
                        if (ActionResponseList[0].IsRuleViolated == true) {
                            MyInstance.FormActionCount++;
                        }
                    }
                }
                else if(ActionResponseList.length > 1) {
                    alert('More than one action for single attribute not implemented');
                }
            }

            else {
                //alert('For ActionResponseList.length' + ActionResponseList.length + AttributeId + "," + JSON.stringify(AttributeWiseActionDict));
                // alert('For delete' + AttributeWiseActionDict[AttributeId] + "," + JSON.stringify(AttributeWiseActionDict[AttributeId]));
                //remove action i.e attribute from dict

                delete AttributeWiseActionDict[AttributeId];
                if (ActionResponseList.length == 1) {
                    AttributeWiseActionDict[AttributeId] = ActionResponseList;
                    if (ActionResponseList[0].IsRuleViolated == true) {
                        MyInstance.FormActionCount++;
                    }
                }
                else if (ActionResponseList.length > 1) {
                    alert('More than one action for single attribute not implemented');
                }

                //if (ActionResponseList.length == 1 || ActionResponseList.length == '1') {
                //    for (var key in AttributeWiseActionDict) {
                //        len++
                //        var ActionData = AttributeWiseActionDict[key];
                //        if (ActionData[0].RuleId == ActionResponseList[0].RuleId) {
                //            delete AttributeWiseActionDict[key];
                //            AttributeWiseActionDict[AttributeId] = ActionResponseList;
                //        }
                //        else {
                //            alert('More than one action for one form not implemented');
                //        }
                //    }

                //    if (len == 0) {
                //        AttributeWiseActionDict[AttributeId] = ActionResponseList;
                //    }
                //}
                //else if (ActionResponseList.length > 1) {
                //    alert('More than one action for single attribute not implemented');
                //}

                //delete AttributeWiseActionDict[AttributeId];
                //if (ActionResponseList.length > 0) {
                //    AttributeWiseActionDict[AttributeId] = ActionResponseList;
                //}


            }
           // alert('CreateAttributeActionDict AttributeWiseActionDict After' + JSON.stringify(AttributeWiseActionDict));
            OneViewConsole.Debug("CreateAttributeActionDict End", "DataCaptureBO.CreateAttributeActionDict");
        }
        catch (Excep) {
            //alert('CreateAttributeActionDict 11:' + Excep);
            //alert('CreateAttributeActionDict 22:' + JSON.stringify( Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateAttributeActionDict", Excep);

        }
        finally {
        }
    }

    var CreateDCNCMapping = function (DCNCMappingListData) {
        try {
            OneViewConsole.Debug("NormalizeNCEntityListData Start", "CookingAndBlastChillingMonitoringFacade.NormalizeNCEntityListData");
            var _oDCNCMappingBO = new DCNCMappingBO({ 'scope': oScope, 'TemplateNodes': oTemplateNodes, 'xlatService': xlatService, 'toaster': '', 'TemplateId': TemplateId, 'TemplateName': TemplateName });

            for (var i = 0; i < DCNCMappingListData.length; i++) {
               // alert('DCNCMappingListData[i] :' + JSON.stringify(DCNCMappingListData[i]));

                if (MyInstance.DCNCMappingList.length > 0) {
                    var IsRuleExists = CheckRuleExistsAndUpdateStatus(DCNCMappingListData[i]);
                    if (IsRuleExists == false) {
                        var NCMappingList = _oDCNCMappingBO.GetDCNCMapping(DCNCMappingListData[i]);
                        //alert('NCMappingList 1 :' + JSON.stringify(NCMappingList));
                        MyInstance.DCNCMappingList.push(NCMappingList);
                    }

                }
                else {

                    var NCMappingList = _oDCNCMappingBO.GetDCNCMapping(DCNCMappingListData[i]);
                    //alert('NCMappingList 2 :' + JSON.stringify(NCMappingList));
                    MyInstance.DCNCMappingList.push(NCMappingList);

                 
                    //alert('1' + MyInstance.DCNCMappingList[0].RuleName);
                    //alert('2' + MyInstance.DCNCMappingList[0].RuleDescription);
                    //alert('3' + MyInstance.DCNCMappingList[0].IsNC);
                    //alert('4' + MyInstance.DCNCMappingList[0].NCRuleId);
                }
            }
            
            // alert('MyInstance.DCNCMappingList :' + JSON.stringify(MyInstance.DCNCMappingList));
            OneViewConsole.Debug("NormalizeNCEntityListData End", "CookingAndBlastChillingMonitoringFacade.NormalizeNCEntityListData");
        }
        catch (Excep) {
            //alert('CreateDCNCMapping 11:' + Excep);
           // alert('CreateDCNCMapping 22:' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateDCNCMapping", Excep);
        }
        finally {
        }
    }

    var CreateDCNCMappingOld = function (DCNCMappingListData) {
        try {
            OneViewConsole.Debug("NormalizeNCEntityListData Start", "CookingAndBlastChillingMonitoringFacade.NormalizeNCEntityListData");
            var _oDCNCMappingBO = new DCNCMappingBO({ 'scope': oScope, 'TemplateNodes': oTemplateNodes, 'xlatService': xlatService, 'toaster': '', 'TemplateId': TemplateId, 'TemplateName': TemplateName });

            for (var i = 0; i < DCNCMappingListData.length; i++) {

                if (MyInstance.DCNCMappingList.length > 0) {
                    var IsRuleExists = CheckRuleExistsAndUpdateStatus(DCNCMappingListData[i]);
                    if (IsRuleExists == false) {
                        var NCMappingList = _oDCNCMappingBO.GetDCNCMapping(DCNCMappingListData[i].NCRuleId, DCNCMappingListData[i].IsNC);
                        //alert('NCMappingList 1 :' + JSON.stringify(NCMappingList));
                        MyInstance.DCNCMappingList.push(NCMappingList);
                    }

                }
                else {

                    var NCMappingList = _oDCNCMappingBO.GetDCNCMapping(DCNCMappingListData[i].NCRuleId, DCNCMappingListData[i].IsNC);
                    //alert('NCMappingList 2 :' + JSON.stringify(NCMappingList));
                    MyInstance.DCNCMappingList.push(NCMappingList);
                }
            }

            // alert('MyInstance.DCNCMappingList :' + JSON.stringify(MyInstance.DCNCMappingList));
            OneViewConsole.Debug("NormalizeNCEntityListData End", "CookingAndBlastChillingMonitoringFacade.NormalizeNCEntityListData");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateDCNCMapping", Excep);
        }
        finally {
        }
    }

    var CheckRuleExistsAndUpdateStatus = function (oDCNCMappingListData) {
        try {
            OneViewConsole.Debug("CheckRuleExistsAndUpdateStatus Start", "CookingAndBlastChillingMonitoringFacade.CheckRuleExistsAndUpdateStatus");
           
            var ExistStatus = false;
            for (var r = 0; r < MyInstance.DCNCMappingList.length; r++) {
              //  alert('oDCNCMappingListData.TemplateNodeIds :' + oDCNCMappingListData.TemplateNodeIds);
                //if rule is there in list or not MyInstance.DCNCMappingList
               // if (MyInstance.DCNCMappingList[r].NCRuleId == oDCNCMappingListData.NCRuleId) {
                if (MyInstance.DCNCMappingList[r].RuleGroup == oDCNCMappingListData.RuleGroup) {
                    MyInstance.DCNCMappingList[r].RuleGroup = oDCNCMappingListData.RuleGroup;
                    MyInstance.DCNCMappingList[r].NCRuleId = oDCNCMappingListData.NCRuleId;
                    MyInstance.DCNCMappingList[r].IsNC = (oDCNCMappingListData.IsNC != undefined) ? oDCNCMappingListData.IsNC : false;
                    MyInstance.DCNCMappingList[r].IsObservation = (oDCNCMappingListData.IsObservation != undefined) ? oDCNCMappingListData.IsObservation : false;
                    MyInstance.DCNCMappingList[r].IsManualRule = (oDCNCMappingListData.IsManualRule != undefined) ? oDCNCMappingListData.IsManualRule : false;
                    MyInstance.DCNCMappingList[r].RuleName = (oDCNCMappingListData.RuleName != undefined) ? oDCNCMappingListData.RuleName : false;
                    MyInstance.DCNCMappingList[r].RuleDescription = (oDCNCMappingListData.RuleDescription != undefined) ? oDCNCMappingListData.RuleDescription : false;
                    MyInstance.DCNCMappingList[r].AttributeGroupId = (oDCNCMappingListData.AttributeGroupId != undefined && oDCNCMappingListData.AttributeGroupId != "" && oDCNCMappingListData.AttributeGroupId != null) ? oDCNCMappingListData.AttributeGroupId : 0;
                    MyInstance.DCNCMappingList[r].RuleCode = (oDCNCMappingListData.RuleCode != undefined) ? oDCNCMappingListData.RuleCode : '';

                    MyInstance.DCNCMappingList[r].Deviatedby = (oDCNCMappingListData.Deviatedby != null) ? oDCNCMappingListData.Deviatedby : '';
                    MyInstance.DCNCMappingList[r].ExpectedValue = (oDCNCMappingListData.ExpectedValue != null) ? oDCNCMappingListData.ExpectedValue : '';
                    MyInstance.DCNCMappingList[r].ActualValue = (oDCNCMappingListData.ActualValue != null) ? oDCNCMappingListData.ActualValue : '';
                    MyInstance.DCNCMappingList[r].TemplateNodeIds = (oDCNCMappingListData.TemplateNodeIds != null) ? oDCNCMappingListData.TemplateNodeIds : '';
                   
                    //alert(MyInstance.DCNCMappingList[r].NCRuleId);
                    //alert(MyInstance.DCNCMappingList[r].IsNC);
                    //alert(MyInstance.DCNCMappingList[r].RuleName);
                    //alert(MyInstance.DCNCMappingList[r].RuleDescription);
                    ExistStatus = true;
                    break;
                }
            }

            OneViewConsole.Debug("CheckRuleExistsAndUpdateStatus End", "CookingAndBlastChillingMonitoringFacade.CheckRuleExistsAndUpdateStatus");

            return ExistStatus;
        }
        catch (Excep) {
           // alert('CheckRuleExistsAndUpdateStatus 11:' + Excep);
           // alert('CheckRuleExistsAndUpdateStatus 22:' + JSON.stringify(Excep));
            throw Excep;
        }
        finally {
            ExistStatus = null;
        }

    }

    var CheckRuleExistsAndUpdateStatusOld = function (RuleId, IsRuleViolated) {
        try {
            OneViewConsole.Debug("IsNCthereOrNot Start", "CookingAndBlastChillingMonitoringFacade.IsNCthereOrNot");

            var ExistStatus = false;
            for (var r = 0; r < MyInstance.DCNCMappingList.length; r++) {
                //if rule is there in list or not MyInstance.DCNCMappingList
                if (MyInstance.DCNCMappingList[r].NCRuleId == RuleId) {
                    MyInstance.DCNCMappingList[r].NCRuleId = RuleId;
                    MyInstance.DCNCMappingList[r].IsNC = IsRuleViolated;
                    ExistStatus = true;
                    break;
                }
            }

            OneViewConsole.Debug("IsNCthereOrNot End", "CookingAndBlastChillingMonitoringFacade.IsNCthereOrNot");

            return ExistStatus;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
            ExistStatus = null;
        }

    }


    this.DisplayNCMessage = function (CriteriaDisplayLabelKey) {
        try {
            if (CriteriaDisplayLabelKey != "" && CriteriaDisplayLabelKey != undefined) {
                alert(CriteriaDisplayLabelKey);
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DisplayNCMessage", Excep);
        }
        finally {
        }
    }

    ////////////////***************** While Save (new DC) START ************//////////////////////////////

    var BeforeSaveDC_CreateAction = function () {
        try {
            CreateAction();
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.BeforeSaveCreateAction", Excep);
        }
        finally {
        }
    }

    var CreateActionOLD = function () {
        try {
           // alert('CreateAction AttributeWiseActionDict' + JSON.stringify(AttributeWiseActionDict));
            if (AttributeWiseActionDict != undefined) {
                for (var itrAction in AttributeWiseActionDict) {
                    var ActionDetails = AttributeWiseActionDict[itrAction];

                    if (ActionDetails != undefined) {
                        if (MyInstance.NCTemplateId != 0) {
                            //alert(itrAction  + 'ActionDetails' + JSON.stringify(ActionDetails));                           
                            var TempOutNCTemplate = TemplateMetaData[ServiceId][MyInstance.NCTemplateId];
                            var ActionContext = DATActionContext.DataCapture;
                            var oDCNCMappingBO = new DCNCMappingBO({ 'scope': oScope, 'TemplateNodes': TempOutNCTemplate, 'xlatService': xlatService, 'toaster': '', 'TemplateId': MyInstance.NCTemplateId, 'TemplateName': MyInstance.NCTemplateName });
                            var oDCNCStatus = oDCNCMappingBO.GetNCFormAction(ActionDetails[0].RuleId, 'true', TempOutNCTemplate, ActionContext, MyInstance.NCTemplateId, MyInstance.NCTemplateName);
                            CheckRuleIdExistsAndInsertAction(oDCNCStatus);
                        }

                    }
                }
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateAction", Excep);
        }
        finally {
        }
    }

    var CreateAction = function () {
        try {
            // alert('CreateAction AttributeWiseActionDict' + JSON.stringify(AttributeWiseActionDict));
            if (AttributeWiseActionDict != undefined) {
                for (var itrAction in AttributeWiseActionDict) {
                    var ActionDetails = AttributeWiseActionDict[itrAction];

                   // alert("ActionDetails :"+  JSON.stringify(ActionDetails));
                    if (ActionDetails != undefined && (ActionDetails[0].IsFormAction == true || ActionDetails[0].IsFormAction == 'true') && (ActionDetails[0].IsRuleViolated == true || ActionDetails[0].IsRuleViolated == 'true')) {
                        CreateActionWhileCreateAndUpdate(ActionDetails);
                    }
                }
            }
        }
        catch (Excep) {
           // alert('CreateAction 11:' + Excep);
           // alert('CreateAction 22:' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateAction", Excep);
        }
        finally {
        }
    }

    var CreateActionWhileCreateAndUpdate = function (ActionDetails, RuleId, RuleDetails) {
        try {
            //Note :RuleDetails contains following things, but RuleId passing separetely because its existing code
            ////RuleDetails.NCRuleId,RuleDetails.RuleGroup, RuleDetails.RuleCode, RuleDetails.RuleName, RuleDetails.RuleDescription
            if (MyInstance.NCTemplateId != 0) {
                var NcRuleId = 0;
                var RuleGroup = '';
                var RuleCode = '';
                var RuleName = '';
                var RuleDescription = '';
                var Deviatedby = '';
                var ExpectedValue = '';
                var ActualValue = '';
                var TemplateNodeIds = '';

                if (ActionDetails != undefined) {
                    NcRuleId = ActionDetails[0].RuleId;
                    RuleGroup = ActionDetails[0].RuleGroup;
                    RuleCode = ActionDetails[0].RuleCode;
                    RuleName = ActionDetails[0].RuleName;
                    RuleDescription = ActionDetails[0].RuleDescription;
                    ActualValue = ActionDetails[0].ActualValue;
                    TemplateNodeIds = ActionDetails[0].TemplateNodeIds;
                }
                else {
                    //Inline Edit Case need to send RuleGroup and RuleCode from DAO 
                    if (RuleId != 0) {
                       // alert('from view records when already nc exists');
                        NcRuleId = RuleId;
                        RuleGroup = RuleDetails.RuleGroup;
                        RuleCode = RuleDetails.RuleCode;
                        RuleName = RuleDetails.RuleName;
                        RuleDescription = RuleDetails.RuleDescription;
                        Deviatedby = RuleDetails.Deviatedby;
                        ExpectedValue = RuleDetails.ExpectedValue;
                        ActualValue = RuleDetails.ActualValue;
                        TemplateNodeIds = RuleDetails.TemplateNodeIds;
                    }
                    else {
                        //alert('ViewRecordsNCRuleHandler' + JSON.stringify(ViewRecordsNCRuleHandler));
                        CreateDCNCMapping(ViewRecordsNCRuleHandler);
                        NcRuleId = ViewRecordsNCRuleHandler[0].NCRuleId;
                        RuleGroup = ViewRecordsNCRuleHandler[0].RuleGroup;
                        RuleCode = ViewRecordsNCRuleHandler[0].RuleCode;
                        RuleName = ViewRecordsNCRuleHandler[0].RuleName;
                        RuleDescription = ViewRecordsNCRuleHandler[0].RuleDescription;
                        Deviatedby = ViewRecordsNCRuleHandler[0].Deviatedby;
                        ExpectedValue = ViewRecordsNCRuleHandler[0].ExpectedValue;
                        ActualValue = ViewRecordsNCRuleHandler[0].ActualValue;
                        TemplateNodeIds = ViewRecordsNCRuleHandler[0].TemplateNodeIds;
                        ViewRecordsNCRuleHandler = [];
                    }

                }

               // alert('RuleGroup : ' + RuleGroup + 'RuleName : ' + RuleName + 'RuleDescription : ' + RuleDescription + 'NcRuleId : ' + NcRuleId);
                //alert(NcRuleId);
               // alert(JSON.stringify(MyInstance.DCNCMappingList));
                //alert(itrAction  + 'ActionDetails' + JSON.stringify(ActionDetails));   
                var TempOutNCTemplate;
                if (ServiceId == 39) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    var NCTemplateNodes = _oTemplateConfigDAO.GetMetaData(ServiceId, NCTemplateDetails_36.TemplateId);
                    var _oCustomPageTemplateNodeFormatterComponent = new CustomPageTemplateNodeFormatterComponent();
                    TempOutNCTemplate = _oCustomPageTemplateNodeFormatterComponent.FormatTemplateNodeNewStructure(NCTemplateNodes);

                }
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    TempOutNCTemplate = _oTemplateConfigDAO.GetMetaData(ServiceId, MyInstance.NCTemplateId);
                }
                else {
                    TempOutNCTemplate = TemplateMetaData[ServiceId][MyInstance.NCTemplateId];
                }
					//new
                //var TempOutNCTemplate = new CustomPageTemplateNodeFormatterComponent().FormatTemplateNode(TemplateMetaData_NCForm);

                var ActionContext = DATActionContext.DataCapture;
                var oDCNCMappingBO = new DCNCMappingBO({ 'scope': oScope, 'TemplateNodes': TempOutNCTemplate, 'xlatService': xlatService, 'toaster': '', 'TemplateId': MyInstance.NCTemplateId, 'TemplateName': MyInstance.NCTemplateName });
               
                var oDCNCStatus = oDCNCMappingBO.GetNCFormAction(NcRuleId, 'true', TempOutNCTemplate, ActionContext, MyInstance.NCTemplateId, MyInstance.NCTemplateName, RuleGroup, RuleCode, RuleName, RuleDescription, Deviatedby, ExpectedValue, ActualValue, TemplateNodeIds);
                CheckRuleIdExistsAndInsertAction(oDCNCStatus);
            }
        }
        catch (Excep) {
           // alert('CreateActionWhileCreateAndUpdate 11:' + Excep);
          //  alert('CreateActionWhileCreateAndUpdate 22:' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CreateActionWhileCreateAndUpdate", Excep);
        }
        finally {
        }
    }

    var CheckRuleIdExistsAndInsertAction = function (oDCNCStatus) {
        try {
            OneViewConsole.Debug("CheckRuleIdExistsAndInsertAction Start", "DataCaptureBO.CheckRuleIdExistsAndInsertAction");

            //alert('oDCNCStatus :' + JSON.stringify(oDCNCStatus));
           // alert('CheckRuleIdExistsAndInsertAction before:' + JSON.stringify(MyInstance.DCNCMappingList));
            if (MyInstance.DCNCMappingList.length > 0) {
                for (var r = 0; r < MyInstance.DCNCMappingList.length; r++) {
                    //if (MyInstance.DCNCMappingList[r].NCRuleId == oDCNCStatus.NCRuleId) {
                    if (MyInstance.DCNCMappingList[r].RuleGroup == oDCNCStatus.RuleGroup) {
                        //alert('in');
                        MyInstance.DCNCMappingList[r].RuleGroup = oDCNCStatus.RuleGroup;
                        MyInstance.DCNCMappingList[r].NCRuleId = oDCNCStatus.NCRuleId;
                        MyInstance.DCNCMappingList[r].IsNC = oDCNCStatus.IsNC;
                        MyInstance.DCNCMappingList[r].oActionEntity = oDCNCStatus.oActionEntity;
                        MyInstance.DCNCMappingList[r].RuleCode = (oDCNCStatus.RuleCode != undefined) ? oDCNCStatus.RuleCode : '';
                        MyInstance.DCNCMappingList[r].RuleName = oDCNCStatus.RuleName;
                        MyInstance.DCNCMappingList[r].RuleDescription = oDCNCStatus.RuleDescription;
                        MyInstance.DCNCMappingList[r].TemplateNodeIds = oDCNCStatus.TemplateNodeIds;
                        break;
                    }
                }
            }
            else {
                MyInstance.DCNCMappingList.push(oDCNCStatus);
            }

           // alert('CheckRuleIdExistsAndInsertAction :' + JSON.stringify(MyInstance.DCNCMappingList));
            OneViewConsole.Debug("CheckRuleIdExistsAndInsertAction End", "DataCaptureBO.CheckRuleIdExistsAndInsertAction");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckRuleIdExistsAndInsertAction", Excep);
        }
    }

    ////////////////***************** While Save (new DC) END ************//////////////////////////////




    ////////////////////////////***************** While Update( existing DC ) START *****************///////////////////////////
    var BeforeUpdateDC_CreateAction = function () {
        try {
           // alert('BeforeUpdateDC_CreateAction');
            CreateAction();
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.BeforeUpdateDC_CreateAction", Excep);
        }
        finally {
        }
    }
    ////////////////////////////***************** While Update( existing DC ) END *****************///////////////////////////



    ///////////////////////////***************** Delete NC START ***********************/////////////////////////////
    var CheckNCExistsBeforeEdit = function (RuleId,RuleGroup) {
        try {
            var Response;
            if (DcId != null) {
                var TempOutNCTemplate;
                if (ServiceId == 39) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    var NCTemplateNodes = _oTemplateConfigDAO.GetMetaData(ServiceId, NCTemplateDetails_36.TemplateId);
                    var _oCustomPageTemplateNodeFormatterComponent = new CustomPageTemplateNodeFormatterComponent();
                    TempOutNCTemplate = _oCustomPageTemplateNodeFormatterComponent.FormatTemplateNodeNewStructure(NCTemplateNodes);

                }
                else if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                    var _oTemplateConfigDAO = new TemplateConfigDAO();
                    TempOutNCTemplate = _oTemplateConfigDAO.GetMetaData(ServiceId, NCTemplateDetails.NCTemplateId);
                }
                else {
                    TempOutNCTemplate = TemplateMetaData[ServiceId][NCTemplateDetails.TemplateId];
                }
				//new
                //var TempOutNCTemplate = new CustomPageTemplateNodeFormatterComponent().FormatTemplateNode(TemplateMetaData_NCForm);

                //var _oNCDcDataCaptureBO = GetBoutNCDataCaptureBO({ 'scope': oScope, 'TemplateNodes': TempOutNCTemplate, 'xlatService': xlatService, 'toaster': '', 'TemplateId': NCTemplateDetails.TemplateId, 'TemplateName': NCTemplateDetails.TemplateName });
                //   var NCDCId = _oNCDcDataCaptureBO.GetNCDcID(DcId);

                var NCDCId = MyInstance.GetNCDcID(DcId);

                //alert("CheckNCExistsBeforeEdit :"  + DcId + "," + NCDCId );
                if (NCDCId != undefined) {
                    var DataCaptureClientGuid = GetDCClientGuidById();
                    var ActionClientGuid = GetActionClientGuidFromDCNCMapping(RuleId, DataCaptureClientGuid, RuleGroup);
                    //alert('CheckNCExistsBeforeEdit:' + RuleId + "," + DataCaptureClientGuid + "," + ActionClientGuid)
                    if (ActionClientGuid != '' && DataCaptureClientGuid != undefined) {
                        Response = { 'RuleId': RuleId, 'ActionClientGuid': ActionClientGuid, 'DataCaptureClientGuid': DataCaptureClientGuid, 'RuleGroup': RuleGroup }
                    }
                }
            }

            return Response;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckNCExistsBeforeEdit", Excep);
        }
        finally {
        }
    }

    var GetDCClientGuidById = function () {
        try {
            var Query = "SELECT ClientGuid FROM DataCaptureEntity WHERE Id=" + DcId;
            var result = window.OneViewSqlite.excecuteSqlReader(Query);
            result = JSON.parse(result);
            return result[0].ClientGuid;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDCClientGuidById", Excep);
        }
        finally {
        }
    }

    var GetActionClientGuidFromDCNCMapping = function (RuleId, DataCaptureClientGuid, RuleGroup) {
        try {
            //  var Query = "SELECT ActionClientGuid FROM DCNCMapping WHERE DataCaptureClientGuid='" + DataCaptureClientGuid + "' AND NCRuleId=" + RuleId;
            var Query = "SELECT ActionClientGuid FROM DCNCMapping WHERE DataCaptureClientGuid='" + DataCaptureClientGuid + "' AND RuleGroup='" + RuleGroup +"'";
            //alert('Query : ' + Query)
            var result = window.OneViewSqlite.excecuteSqlReader(Query);
            result = JSON.parse(result);
            if (result.length > 0)
                return result[0].ActionClientGuid;
            else
                return undefined;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetActionClientGuidFromDCNCMapping", Excep);
        }
        finally {
        }
    }

    var DeleteNC_WhileUpdateDC = function (NCDCId) {
        try {
            //alert('DeleteNC_WhileUpdateDC' + NCListForDelete.length + "," + JSON.stringify(NCListForDelete));
            for (var i = 0; i < NCListForDelete.length; i++) {
                MyInstance.DeleteNCDataByActionClientGuid(NCDCId, NCListForDelete[0].ActionClientGuid, NCListForDelete[0].RuleId, NCListForDelete[0].DataCaptureClientGuid, NCListForDelete[0].RuleGroup)
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DeleteNC_WhileUpdateDC", Excep);
        }
        finally {
        }
    }

    this.DeleteNCDataByActionClientGuid = function (NCDCId, ActionClientGuid,RuleId,DataCaptureClientGuid, RuleGroup) {
        try {
            OneViewConsole.Debug("DeleteNCDataByActionClientGuid start", "DataCaptureBO.DeleteNCDataByActionClientGuid");
            OneViewConsole.DataLog("NCDCId :" + NCDCId, "DataCaptureBO.DeleteNCDataByActionClientGuid");

            //alert(NCDCId);
           // alert(ActionClientGuid);
            if (NCDCId != undefined) {
                if (ActionClientGuid == undefined || ActionClientGuid == null || ActionClientGuid == '') {
                    var resData = oDataCaptureDAO.GetDataCaptureByDcId(NCDCId);
                    var Query = "SELECT * FROM ActionDetailsEntity WHERE DataCaptureClientGuid='" + resData[0].ClientGuid + "'";
                    var result = window.OneViewSqlite.excecuteSqlReader(Query);
                    result = JSON.parse(result);
                    ActionClientGuid= result[0].ActionClientGuid
                }
               // alert('in');
              //  var Q1 = "UPDATE DCNCMapping SET ActionClientGuid='',IsNC='false' WHERE ActionClientGuid='" + ActionClientGuid + "'";
                var Q1 = "UPDATE DCNCMapping SET ActionClientGuid='',IsNC='false',NCRuleId=" + RuleId + " WHERE ActionClientGuid='" + ActionClientGuid + "'";
                //alert('Q1' + Q1);
                var Q2 = "DELETE FROM ActionEntity WHERE ClientGuid='" + ActionClientGuid + "'";
                var Q3 = "DELETE FROM ActionDetailsEntity WHERE ActionClientGuid='" + ActionClientGuid + "'";
                var Q4 = "DELETE FROM MultiMediaBlobSubElements WHERE ClientGuid IN (SELECT Answer FROM DcResultDetailsEntity WHERE DcResultDetailsEntity.DataCaptureId=" + NCDCId + ")";
                var Q5 = "DELETE FROM DcResultDetailsEntity WHERE DataCaptureId=" + NCDCId + "";
                var Q6 = "DELETE FROM DcResultsEntity WHERE DataCaptureId=" + NCDCId + "";
                var Q7 = "DELETE FROM DataCaptureEntity WHERE Id=" + NCDCId + "";
                window.OneViewSqlite.excecuteSql(Q1);
                window.OneViewSqlite.excecuteSql(Q2);
                window.OneViewSqlite.excecuteSql(Q3);
                window.OneViewSqlite.excecuteSql(Q4);
                window.OneViewSqlite.excecuteSql(Q5);
                window.OneViewSqlite.excecuteSql(Q6);
                window.OneViewSqlite.excecuteSql(Q7);

                OneViewConsole.Debug("DeleteNCDataByActionClientGuid end", "DataCaptureBO.DeleteNCDataByActionClientGuid");
            }
        }
        catch (Excep) {
            //alert("DataCaptureBO.DeleteNCDataByActionClientGuid Excep" + Excep);
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DeleteNCDataByActionClientGuid", Excep);
        }
        finally {
            resData = null;
            Query = null;
            result = null;
            Q1 = null;
            Q2 = null;
            Q3 = null;
            Q4 = null;
            Q5 = null;
            Q6 = null;
            Q7 = null;
        }
    }

    this.UpdateDataCaptureNCStatusForInlineEdit = function (DcId) {
        try {
            OneViewConsole.Debug("UpdateDataCaptureNCStatusForInlineEdit start", "DataCaptureBO.UpdateDataCaptureNCStatusForInlineEdit");
            OneViewConsole.DataLog("DcId :" + DcId, "DataCaptureBO.UpdateDataCaptureNCStatusForInlineEdit");

            var IsNC = false;

            var oDateTime = new DateTime();
            var CurrentDateAndTime = oDateTime.GetDateAndTime();


            var query = "SELECT DCNCMapping.IsNC FROM DataCaptureEntity INNER JOIN DCNCMapping ON DataCaptureEntity.ClientGuid = DCNCMapping.DataCaptureClientGuid WHERE DataCaptureEntity.Id = " + DcId;

            var result = window.OneViewSqlite.excecuteSqlReader(query);
            result = JSON.parse(result);

          //  alert('result' + JSON.stringify(result));

            for (var i = 0; i < result.length; i++) {
                if (result[i].IsNC == 'true' || result.IsNC == true) {
                    IsNC = true;
                    break;
                }
            }

          //  alert('IsNC :' + IsNC);
            var query = "UPDATE DataCaptureEntity SET IsAnyNC='" + IsNC + "',IsSynchronized='false',TimeStamp='" + CurrentDateAndTime + "' WHERE Id=" + DcId + "";
          //  alert('query :' + query);
            var queryResult = window.OneViewSqlite.excecuteSql(query);

           
            OneViewConsole.Debug("UpdateDataCaptureNCStatusForInlineEdit end", "DataCaptureBO.UpdateDataCaptureNCStatusForInlineEdit");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateDataCaptureNCStatusForInlineEdit", Excep);
        }
        finally {
        }
    }
    
    ///////////////////////////***************** Delete NC START ***********************/////////////////////////////


    /////////////////////////////////*********Create DataCaptureBO for BoutNC Form START ************//////////////////////

    //Create DataCaptureBO for BoutNC Form
    //here override SetEditValuesInControls ,to solving prepopulated value issues
    var GetBoutNCDataCaptureBO = function (ConstrParm) {
        try {
            OneViewConsole.Debug("GetBoutNCDataCaptureBO Start", "DataCaptureBO.GetBoutNCDataCaptureBO");

            BOUTNCDataCaptureBO.prototype = new DataCaptureBO(ConstrParm);

            //override SetEditValuesInControls ,for solving prepopulated value issues in Bout NC form
            BOUTNCDataCaptureBO.prototype.SetEditValuesInControls = function (scope, AnswerModeObject, AnswerToBind) {
                try {
                    OneViewConsole.Debug("SetEditValuesInControls Start", "DataCaptureBO.GetBoutNCDataCaptureBO.SetEditValuesInControls");
                   
                    if (AnswerModeObject.Type == 'DDL') {
                    }
                    else if (AnswerModeObject.ControlId == "ATBlastChillerTempOutControlId") {
                    }
                    else if (AnswerModeObject.ControlId == 'DTBlastChillerTimeOutControlId') {
                    }
                    else if (AnswerModeObject.ControlId == 'DTBlastChillerTimeOutControlId') {
                    }
                    else if ((AnswerModeObject.DataType == 'DATAURL') && (AnswerToBind.Answer != '')) {
                        $scope.lblSignature = "Signed " + AnswerToBind.LastUpdatedDate;
                    }
                    else if (AnswerModeObject.Type == 'TIME') {
                        var Time = AnswerToBind.Answer.split(':');
                        scope.NewDCModel[AnswerModeObject.ControlId] = new Date(0, 0, 0, Time[0], Time[1]);
                    }
                    else if (AnswerModeObject.Type == "MonthYear" && AnswerToBind.Answer != '') {
                       
                        document.getElementById(AnswerModeObject.ControlId).value = AnswerToBind.Answer;
                        scope.NewDCModel[AnswerModeObject.ControlId] = document.getElementById(AnswerModeObject.ControlId).value;
                        // scope.NewDCModel[AnswerModeObject.ControlId] = AnswerToBind.Answer;

                    }
                    else {
                        scope.NewDCModel[AnswerModeObject.ControlId] = AnswerToBind.Answer;
                    }
                    if (scope[AnswerModeObject.ControlId + "_IsModified"] != undefined) {
                        scope[AnswerModeObject.ControlId + "_IsModified"] = undefined;
                    }
                    if (scope[AnswerModeObject.ControlId + "_SignaturePad"] != undefined) {
                        scope[AnswerModeObject.ControlId + "_SignaturePad"] = undefined;
                    }

                    OneViewConsole.Debug("SetEditValuesInControls End", "DataCaptureBO.GetBoutNCDataCaptureBO.SetEditValuesInControls");
                }
                catch (Excep) {
                    throw Excep;
                }
            }

            BOUTNCDataCaptureBO.prototype.ClearControls = function (TemplateNodes) {
                try {
                    OneViewConsole.Debug("ClearControls Start", "DataCaptureBO.GetBoutNCDataCaptureBO.ClearControls");

                    for (var itrAttrId in TemplateNodes) {
                        var _oPrimarayAnswerModeInfo = TemplateNodes[itrAttrId].AnswerMode[0];

                        if (_oPrimarayAnswerModeInfo.ControlId == "ATBlastChillerTempOutControlId") {
                        }
                        else if (_oPrimarayAnswerModeInfo.Type == 'DDL') {
                        }
                        else if (_oPrimarayAnswerModeInfo.ControlId == 'DTBlastChillerTimeOutControlId') {
                        }
                        else {
                            $scope.NewDCModel[_oPrimarayAnswerModeInfo.ControlId] = '';
                        }
                    }
                    OneViewConsole.Debug("ClearControls End", "DataCaptureBO.GetBoutNCDataCaptureBO.ClearControls");
                }
                catch (Excep) {
                    throw Excep;
                }
            }

            var oBOUTNCDataCaptureBO = new BOUTNCDataCaptureBO();

            OneViewConsole.Debug("GetBoutNCDataCaptureBO End", "DataCaptureBO.GetBoutNCDataCaptureBO");

            return oBOUTNCDataCaptureBO;
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
            oBOUTNCDataCaptureBO = null;
        }
    }

    /////////////////////////////////*********Create DataCaptureBO for BoutNC Form END ************//////////////////////


    ///////////////////////////////////////************************* Evaluate NC and Action END **************************************** ////////////////////////////////////////////////////////



    ////////////for multiple form action save data in temporary dict


    var FormActionDataDict = {};
    //// AttributeNodeId: '', ControlId: '', Answer: '', AnswerValue: '', AnswerFKType: '',
    ////AnswerMode: '', IsDynamicAnswer: '', IsManual: '', Latitude: '', Longitude: '', Comments: '', AttributeNodeName: '', signaturePadDataURL: ''

    var SaveNCTemplateTemporary = function (SelectedAttributeId, FormActionTemplateNodeId) {
        try {
            var NCTemplateMetaData;
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4) {
                //var _oTemplateConfigDAO = new TemplateConfigDAO();
                //NCTemplateMetaData = _oTemplateConfigDAO.GetMetaData(ServiceId, NCTemplateDetails.NCTemplateId);
            }
            else {
                NCTemplateMetaData = TemplateMetaData['1']['66'];
            }
           
			//new
           // var NCTemplateMetaData = new CustomPageTemplateNodeFormatterComponent().FormatTemplateNode(TemplateMetaData_NCForm);


            var AttributeDcResultDetailsDict = {};
            // var ValueArray = [];
            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();
            OneViewConsole.DataLog("CurrenntDateAndTime :" + CurrenntDateAndTime, "DataCaptureBO.SaveNCTemplateTemporary");


            for (var itrAttrId in NCTemplateMetaData) {
                // alert('itrAttrId' + itrAttrId + JSON.stringify(itrAttrId));

                var ValueData = {
                    AttributeNodeId: '', ControlId: '', Answer: '', AnswerValue: '', AnswerFKType: '',
                    AnswerMode: '', IsDynamicAnswer: '', IsManual: '', Latitude: '', Longitude: '', Comments: '', AttributeNodeName: '', signaturePadDataURL: ''
                };
                var _oAttributeInfo = NCTemplateMetaData[itrAttrId];

                // alert('_oAttributeInfo' + _oAttributeInfo + JSON.stringify(_oAttributeInfo));
                //oScope
                for (var _oPrimarayAnswerModeInfo in _oAttributeInfo.AnswerMode) {


                    if (typeof (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]) != 'function') {

                        var AttributeNodeId = itrAttrId;
                        var AttributeNodeName = _oAttributeInfo.Name;
                        var Answer = '';
                        //if answer mode is ddl,value will save here, for text box and other make it null
                        var AnswerValue = '';
                        var AnswerFKType = ''
                        var AnswerMode = '';
                        //IsDynamicElement=true => if answer mode is ddl and enter new element which is not in the drop dowen list
                        var IsDynamicAnswer = 'false';

                        //for dropdowen,auto complete
                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DDL') {
                            if (oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText() == undefined) {
                                Answer = '';
                                AnswerValue = '';
                            }
                            else {
                                Answer = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedValue();
                                AnswerValue = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();
                            }
                            AnswerFKType = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetDATEntityTypeId();
                            AnswerMode = 'DDL';//oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetControlType();
                            if ((Answer == 0 || Answer == '0') && (AnswerValue != ''))
                                IsDynamicAnswer = 'true';

                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'Band') {

                            Answer = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedValue();
                            AnswerValue = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId].GetSelectedText();
                        }
                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'SignaturePad') {
                            if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "DATAURL" && oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsModified"] == true) {
                                //var canvas = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);
                                var signaturePad = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_SignaturePad"];
                               // if (signaturePad.isEmpty() == false) {
                                if (signaturePad != '') {
                                   // alert('SaveNCTemplateTemporary : ' + signaturePad);
                                    ValueData.signaturePadDataURL = signaturePad;//.toDataURL();
                                    //alert('signaturePad.toDataURL(): ' + signaturePad.toDataURL());
                                }

                            }
                        }

                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'DATE') {

                            Answer = "";

                            var temp = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);//oScope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];

                            if (temp != null) {
                                var date = temp.value;
                                Answer = Dateformat(date);
                            }

                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }
                        }

                        else if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'TIME') {

                            Answer = "";

                            var temp = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);//oScope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];                           
                            if (temp != null) {
                                var Time = temp.value;
                                if (Time != "") {
                                    Time = Time.split(':');
                                    Answer = Time[0] + ":" + Time[1];
                                }
                            }

                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }
                        }
                        else {
                            //Answer = oScope.NewDCModel['NodeId_' + itrAttrId];
                            Answer = oScope.NewDCModel[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId];
                            //alert('Answer' + Answer);
                            if (Answer == null || Answer == undefined) {
                                Answer = '';
                            }
                        }




                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "BOOLEAN") {
                            if (Answer == true || Answer == "true") {
                                Answer = '1';
                            }
                            else {
                                Answer = "0";
                            }
                        }

                        var Comments = '';
                        if (TemplateId == 44) {
                            Comments = (ObservationResult[AttributeNodeId] != undefined) ? ObservationResult[AttributeNodeId].Comments : "";

                        }

                        ValueData.Answer = Answer;
                        ValueData.AnswerValue = AnswerValue;
                        ValueData.AnswerFKType = AnswerFKType;
                        ValueData.AnswerMode = AnswerMode;
                        if (oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"] != undefined) {
                            ValueData.IsManual = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsManual"];
                        }
                        else {
                            ValueData.IsManual = "true";
                        }
                        ValueData.AttributeNodeId = AttributeNodeId;
                        ValueData.ControlId = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId;;
                        ValueData.IsDynamicAnswer = IsDynamicAnswer;
                        ValueData.Latitude = Latitude,
                        ValueData.Longitude = Longitude
                        ValueData.Comments = Comments;
                        ValueData.AttributeNodeName = AttributeNodeName;
                        AttributeDcResultDetailsDict[AttributeNodeId] = ValueData;

                        // alert('AttributeDcResultDetailsDict :' + JSON.stringify(AttributeDcResultDetailsDict));

                    }
                }

            }

            FormActionDataDict[SelectedAttributeId] = AttributeDcResultDetailsDict;

          //  alert('FormActionDataDict :' + JSON.stringify(FormActionDataDict));
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "SaveNCTemplateTemporary.Save", Excep);
        }
        finally {
            oBOUTNCDataCaptureBO = null;
        }
    }


    //############## Get DataCaptureEntity  Start ################
    var GetCompleteDataCaptureEntityForAction = function (scope, TemplateNodes) {
        try {

            OneViewConsole.Debug("GetCompleteDataCaptureEntity start", "DataCaptureBO.GetCompleteDataCaptureEntity");
            OneViewConsole.DataLog("TemplateNodes :" + JSON.stringify(TemplateNodes), "DataCaptureBO.GetCompleteDataCaptureEntity");

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();

            var IsDynamicDCPlace = "false";
            var IsDynamicAttribute = "false";
            var IsDynamicAnswer = "false";

            //take  DataCaptureEntity
            var _oDataCaptureEntity = MyInstance.GetDataCaptureEntity(CurrenntDateAndTime);


            //take  DCResultsEntity
            var _oDCResultsEntity = MyInstance.GetDCResultsEntity(CurrenntDateAndTime);

            //take  DcResultDetailsEntityList
            var _oDcResultDetailsEntityList = MyInstance.GetDcResultDetailsEntity(scope, TemplateNodes, CurrenntDateAndTime);

            for (var i = 0; i < _oDcResultDetailsEntityList.length; i++) {
                _oDCResultsEntity.DcResultDetailsEntityList[i] = _oDcResultDetailsEntityList[i];

                if (_oDcResultDetailsEntityList[i].IsDynamicAnswer == 'true')
                    IsDynamicAnswer = 'true';
            }

            MyInstance.SetShift(_oDCResultsEntity);
            //Code moved to SaveDC Faced,to make validation easy
            _oDataCaptureEntity.DcResultsEntitylist[0] = _oDCResultsEntity;
            _oDataCaptureEntity.IsDynamicDCPlace = IsDynamicDCPlace;
            _oDataCaptureEntity.IsDynamicAttribute = IsDynamicAttribute;
            _oDataCaptureEntity.IsDynamicAnswer = IsDynamicAnswer;



            OneViewConsole.Debug("GetCompleteDataCaptureEntity end", "DataCaptureBO.GetCompleteDataCaptureEntity");
            return _oDataCaptureEntity;
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCompleteDataCaptureEntityForAction", Excep);
        }
        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            IsDynamicDCPlace = null;
            IsDynamicAttribute = null;
            IsDynamicAnswer = null;
            _oDataCaptureEntity = null;
            _oDCResultsEntity = null;
            _oDcResultDetailsEntityList = null;
        }
    }


    var GetDcResultDetailsEntityForAction = function ($scope, TemplateNodes, CurrenntDateAndTime, DCId, DcResultId,SelectedAttributeId) {
        try {

            var NCTemplateValueDict = FormActionDataDict[SelectedAttributeId];

            OneViewConsole.Debug("GetDcResultDetailsEntity start", "DataCaptureBO.GetDcResultDetailsEntityForAction");
            OneViewConsole.DataLog("TemplateNodes :" + JSON.stringify(TemplateNodes), "DataCaptureBO.GetDcResultDetailsEntityForAction");
            OneViewConsole.DataLog("DCId :" + DCId, "DataCaptureBO.GetDcResultDetailsEntityForAction");
            OneViewConsole.DataLog("DCResultId :" + DcResultId, "DataCaptureBO.GetDcResultDetailsEntityForAction");

            var ServiceId = OneViewSessionStorage.Get("ServiceId");

            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }

            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();
            OneViewConsole.DataLog("CurrenntDateAndTime :" + CurrenntDateAndTime, "DataCaptureBO.GetDcResultDetailsEntityForAction");

            var DCResultDetails = [];
            for (var itrAttrId in TemplateNodes) {
                var AttributeValue = NCTemplateValueDict[itrAttrId];
                var _oAttributeInfo = TemplateNodes[itrAttrId];

                for (var _oPrimarayAnswerModeInfo in _oAttributeInfo.AnswerMode) {

                    if (typeof (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo]) != 'function') {

                        var AttributeNodeId = itrAttrId;
                        var AttributeNodeName = _oAttributeInfo.Name;
                        var Answer = AttributeValue.Answer;
                        //if answer mode is ddl,value will save here, for text box and other make it null
                        //var AnswerValue = '';
                        var AnswerFKType = AttributeValue.AnswerFKType;
                        // var AnswerMode = '';
                        //IsDynamicElement=true => if answer mode is ddl and enter new element which is not in the drop dowen list
                        var IsDynamicAnswer = 'false';

                        var _DcResultDetailsEntity = new DcResultDetailsEntity();
                        _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
                       
                        if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].Type == 'SignaturePad') {
                            if (_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType == "DATAURL" && oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_IsModified"] == true) {
                                //var canvas = document.getElementById(_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId);
                                //  var signaturePad = oScope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "_SignaturePad"];
                                var oMultiMediaBlobSubElements = new MultiMediaBlobSubElements();
                                // if (signaturePad.isEmpty() == false) {
                                if (signaturePad != '') {
                                    oMultiMediaBlobSubElements.ClientGuid = OneViewUniqueGenerator.GetGuid();
                                    oMultiMediaBlobSubElements.ServiceId = OneViewSessionStorage.Get("ServiceId");
                                    oMultiMediaBlobSubElements.Dimension = DATEntityType.DCResultDetails;
                                    oMultiMediaBlobSubElements.MultiMediaType = "image/png";
                                    oMultiMediaBlobSubElements.MappedEntityClientGuid = _DcResultDetailsEntity.ClientGuid;
                                    oMultiMediaBlobSubElements.CreatedDate = CurrenntDateAndTime;
                                    oMultiMediaBlobSubElements.MobileVersionId = 1;
                                    oMultiMediaBlobSubElements.IsSynchronized = 'false';

                                    oMultiMediaBlobSubElements.DataURL = AttributeValue.signaturePadDataURL;
                                    //alert('signaturePad.toDataURL(): ' + signaturePad.toDataURL());
                                    Answer = oMultiMediaBlobSubElements;
                                    AnswerFKType = DATEntityType.MultiMediaBlobSubElements;
                                    // alert(JSON.stringify(Answer) + "," + AnswerFKType);
                                    //}
                                }

                                //oMultiMediaBlobSubElements.MappedEntityClientGuid
                            }
                        }

                        _DcResultDetailsEntity.ServiceId = ServiceId;

                        if (DCId != undefined && DCId != '')
                            _DcResultDetailsEntity.DataCaptureId = DCId;

                        if (DcResultId != undefined && DcResultId != '')
                            _DcResultDetailsEntity.DataResultsId = DcResultId;

                        _DcResultDetailsEntity.MobileVersionId = 1;

                        _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

                        _DcResultDetailsEntity.AttributeNodeId = AttributeNodeId;

                        _DcResultDetailsEntity.ControlId = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId;

                        _DcResultDetailsEntity.AttributeNodeName = AttributeNodeName;
                        
                        _DcResultDetailsEntity.Answer = Answer;
                        _DcResultDetailsEntity.AnswerValue = AttributeValue.AnswerValue;

                        _DcResultDetailsEntity.AnswerFKType = AnswerFKType;
                        _DcResultDetailsEntity.AnswerMode = AttributeValue.AnswerMode;


                      
                        _DcResultDetailsEntity.IsManual = AttributeValue.IsManual;
                        

                        _DcResultDetailsEntity.IsSynchronized = "false";
                        _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;

                        _DcResultDetailsEntity.AnswerDataType = AttributeValue.AnswerDataType;
                        _DcResultDetailsEntity.IsDynamicAnswer = AttributeValue.IsDynamicAnswer;
                        _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;
                        _DcResultDetailsEntity.Latitude = AttributeValue.Latitude;
                        _DcResultDetailsEntity.Longitude = AttributeValue.Longitude;
                        _DcResultDetailsEntity.Comments = AttributeValue.Comments;


                        DCResultDetails.push(_DcResultDetailsEntity);

                    }
                }

            }
            OneViewConsole.Debug("GetDcResultDetailsEntity end", "DataCaptureBO.GetDcResultDetailsEntityForAction");

            return DCResultDetails;
        }

        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailsEntityForAction", Excep);
        }

        finally {
            oDateTime = null;
            CurrenntDateAndTime = null;
            DCResultDetails = null;
            _oAttributeInfo = null;
            AttributeNodeId = null;
            AttributeNodeName = null;
            Answer = null;
            AnswerValue = null;
            AnswerFKType = null;
            AnswerMode = null;
            IsDynamicAnswer = null;
            _DcResultDetailsEntity = null;
            signaturePad = null;
            oMultiMediaBlobSubElements = null;
            date = null;
        }
    }

    ///Load All Shifts in DC Page
    this.LoadNCOptions = function () {
        try {

            OneViewConsole.Debug("LoadNCOptions start", "DataCaptureBO.LoadNCOptions");
            
            var oNC = new AnswerModeUserControl({ 'Scope': oScope, 'ControlId': 'chkNC', 'DataSourceModelName': 'NCOptions', 'DisplayElementModelName': 'NewDCModel.chkNC' });            
            oNC.LoadNCOptions();

            OneViewConsole.Debug("LoadNCOptions end", "DataCaptureBO.LoadNCOptions");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadNCOptions", Excep);
        }
        finally {
            DefaultMasterDAOObj = null;
            Shifts = null;
            oShift = null;
        }
    }

    this.LoadNCCommentsHtml = function ($compile) {

        try {
            oScope.MultiMediaSubElements = [];

            var _oOneViewSidePanel = new OneViewSidePanel();
            _oOneViewSidePanel.Clear();

            var MediaHtml = '<div class="list">' +
                                     '<div class="item item-divider item-icon-left">' +
                                         '<i class="icon icon-photo"></i>' + xlatService.xlat('Add Media') +
                                     '</div>' +
                                     '<div class="item">' +
                                         '<a class="button button-block button-calm no-margin" ng-click="AttachPicture(' + DATEntityType.DCNCMapping + ')"><i class="icon icon-camera"></i> ' + xlatService.xlat('Camera') + '</a>' +
                                         '<div class="cam-photo">' +
                                             '<div ng-repeat="MultiMediaSubElement in MultiMediaSubElements">' +
                                                 '<a href="{{MultiMediaSubElement.LocalURL}}" class="angularbox" rel="1" id="{{MultiMediaSubElement.RuleId}}"><img src="{{MultiMediaSubElement.LocalURL}}" alt="{{MultiMediaSubElement.AlternateName}}"></a>' +
                                             '</div>' +
                                         '</div>' +
                                     '</div>' +
                                 '</div>';

            MediaHtml = (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 10) ? MediaHtml : "";

            var Html = '<div class="bar bar-header no-padding">' +
                            '<div class="button-bar my-audit">' +
                                '<a href="javascript:void(0)" id="NCTab" ng-click="NCTabClick();" class="button button-clear activated"><i class="icon icon-live_help"></i>' + xlatService.xlat('Reasons') + ' </a>' +
            '<a href="javascript:void(0)" id="ObservationTab" ng-click="ObservationTabClick();" class="button button-clear"><i class="icon icon-comments"></i>'+xlatService.xlat('Comments')+' </a>' +
                            '</div>' +
                       '</div>' +
                        '<div class="scroll-content has-header has-footer action" style="background: #eef3f5;">' +
                            '<div class="full-height scrollable" id="RightPanelContent">' +
                                '<div class="list comment-box">' +
                                    '<div class="item item-divider item-icon-left"><i class="icon icon-comment-o"></i>' + xlatService.xlat('Comments') + '</div>' +
                                    '<div class="item item-button-right">' +
                                        '<textarea rows="6" ng-model="NewDCModel.NCComments"></textarea>' +
                                        '<a class="button button-calm" ng-click="ClearReasons()">' + xlatService.xlat('Clear') + '</a>' +
                                    '</div>' +
                                     '<div class="item">' +
                                        '<buttons-band class="button-bar" data-toggle="buttons-band" model="NewDCModel.NCOptions" options="NCOptions" ng-model="NewDCModel.NCOptions" attributenodeid="" controlid="NCOptions" id="NCOptions"></buttons-band>' +
                                     '</div>' +
                                '</div>' +
                                MediaHtml +
                            '</div>' +
                       '</div>'+

                       //'<div class="right-panel-content has-footer" style="padding:10px;" id="RightPanelContent">' +
                          /* '<ul class="list" style="border:0px">' +
                               '<li class="item item-checkbox" style="border:0px;"><label class="checkbox"><input type="checkbox" ng-model="NewDCModel.IsNC" ng-click="SS(IsNC)"> </label>  <siva style="padding-left:40px;" >Is NC?</siva></li>' +
                               '<li class="item item-checkbox" style="border:0px;"><label class="checkbox"><input type="checkbox" ng-model="NewDCModel.IsObservation" ng-click="SS(IsObservation)"> </label>  <siva style="padding-left:40px;" >Is Observation?</siva></li>' +
                            '</ul>' +*/
                            //'<buttons-band class="" data-toggle="buttons-band" model="NewDCModel.chkNC" options="NCOptions" ng-model="NewDCModel.chkNC" controlid="chkNC"></buttons-band>' +
                            //'<div class="list comment-box">' +
                            //    '<div class="item item-divider item-icon-left"><i class="icon icon-comment-o"></i> Comments</div>' +
                            //    '<div class="item item-button-right">' +
                            //        '<textarea rows="6" ng-model="NewDCModel.NCComments"></textarea>' +
                            //        '<a class="button button-calm" ng-click="ClearReasons()">Clear</a>'+
                            //    '</div>' +
                            //     '<div class="item">' +
                            //        '<buttons-band class="button-bar" data-toggle="buttons-band" model="NewDCModel.NCOptions" options="NCOptions" ng-model="NewDCModel.NCOptions" attributenodeid="" controlid="NCOptions" id="NCOptions"></buttons-band>' +
                            //     '</div>' +
                            //'</div>' +
                            //'<div class="row responsive-sm dc-button-holder"><div class="col no-padding text-right"><a class="button button-calm" ng-click="ClearReasons()">Clear</a></div></div>' +
                            //'<buttons-band class="button-bar" data-toggle="buttons-band" model="NewDCModel.NCOptions" options="NCOptions" ng-model="NewDCModel.NCOptions" attributenodeid="" controlid="NCOptions" id="NCOptions"></buttons-band>' +
                        //'</div>' +
                       '<div class="bar bar-footer no-padding"><div class="row">' +
                            '<div class="col"><a class="button button-block button-clear" ng-click="CloseRightPanel()"><i class="icon icon-cancel-circle"></i>' + xlatService.xlat('Close') + ' </a></div>' +
                            '<div class="col"><a class="button button-block button-clear" ng-click="CustomNCClick()"><i class="icon icon-plus"></i>' + xlatService.xlat('Save') + '</a></div>' +
                        '</div></div>';

            var _oOneViewCompiler = new OneViewCompiler();
            _oOneViewCompiler.CompileAndApeend(oScope, $compile, Html, "divAutocomplatePopUp");

            _oOneViewSidePanel.Toggle(oSnapRemote);

            //alert(JSON.stringify(CommentsResult[MyInstance.NCOrObservationRuleId]));
            //alert(JSON.stringify(ObservationResult[NCSelectedAttributeId]));

            if (CommentsResult["'" + MyInstance.RuleGroup + "'"] != undefined) {
                oScope.NewDCModel.NCComments = CommentsResult["'" + MyInstance.RuleGroup + "'"].Comments;
                //oScope.NewDCModel.IsNC = CommentsResult[MyInstance.NCOrObservationRuleId].IsNC;
                //oScope.NewDCModel.IsObservation = CommentsResult[MyInstance.NCOrObservationRuleId].IsObservation;

                for (var i = 0; i < oScope.NCOptions.length; i++) {

                    if (CommentsResult["'" + MyInstance.RuleGroup + "'"].IsNC == true) {
                        if (oScope.NCOptions[i].Id == 1) {
                            oScope.NCOptions[i].Selected = true;
                        }
                        else {
                            oScope.NCOptions[i].Selected = false;
                        }
                    }
                    
                    else if (CommentsResult["'" + MyInstance.RuleGroup + "'"].IsObservation == true) {

                        if (oScope.NCOptions[i].Id == 2) {
                            oScope.NCOptions[i].Selected = true;
                        }
                        else {
                            oScope.NCOptions[i].Selected = false;
                        }
                    }                    
                }
            }
            else {
                oScope.NewDCModel.NCComments = "";
                //oScope.NewDCModel.IsNC = false;
                //oScope.NewDCModel.IsObservation = false;

                //for (var i = 0; i < oScope.NCOptions.length; i++) {                
                //    if (oScope.NCOptions[i].Id == 1)
                //        oScope.NCOptions[i].Selected = true;
                //    else
                //        oScope.NCOptions[i].Selected = false;
                //}
            }

            if (ObservationResult[NCSelectedAttributeId] != undefined) {
                oScope.NewDCModel.ObservationComments = ObservationResult[NCSelectedAttributeId].Comments;
            }
            else {
                oScope.NewDCModel.ObservationComments = "";
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadNCCommentsHtml", Excep);
        }
    }

    this.AppendNCHtml = function ($compile) {

        try {
            var Html = '<div class="list comment-box">' +
                            '<div class="item item-divider item-icon-left"><i class="icon icon-comment-o"></i>' + xlatService.xlat('Comments') + ' </div>' +
                            '<div class="item item-button-right">' +
                                '<textarea rows="6" ng-model="NewDCModel.NCComments"></textarea>' +
                                '<a class="button button-calm" ng-click="ClearReasons()">' + xlatService.xlat('Clear') + '</a>' +
                            '</div>' +
                             '<div class="item">' +
                                '<buttons-band class="button-bar" data-toggle="buttons-band" model="NewDCModel.NCOptions" options="NCOptions" ng-model="NewDCModel.NCOptions" attributenodeid="" controlid="NCOptions" id="NCOptions"></buttons-band>' +
                            '</div>' +
                        '</div>';

            var MediaHtml = '<div class="list">' +
                                   '<div class="item item-divider item-icon-left">' +
                                       '<i class="icon icon-photo"></i> ' + xlatService.xlat('Add Media') +
                                   '</div>' +
                                   '<div class="item">' +
                                       '<a class="button button-block button-calm no-margin" ng-click="AttachPicture(' + DATEntityType.DCNCMapping + ')"><i class="icon icon-camera"></i> ' + xlatService.xlat('Camera') + '</a>' +
                                       '<div class="cam-photo">' +
                                           '<div ng-repeat="MultiMediaSubElement in MultiMediaSubElements">' +
                                               '<a href="{{MultiMediaSubElement.LocalURL}}" class="angularbox" rel="1" id="{{MultiMediaSubElement.RuleId}}"><img src="{{MultiMediaSubElement.LocalURL}}" alt="{{MultiMediaSubElement.AlternateName}}"></a>' +
                                           '</div>' +
                                       '</div>' +
                                   '</div>' +
                               '</div>';

            MediaHtml = (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 10) ? MediaHtml : "";

            Html = Html + MediaHtml;
                        //'<div class="row responsive-sm dc-button-holder"><div class="col no-padding text-right"><a class="button button-calm" ng-click="ClearReasons()">Clear</a></div></div>' +
                        

            //var Html = '<buttons-band class="" data-toggle="buttons-band" model="NewDCModel.chkNC" options="NCOptions" ng-model="NewDCModel.chkNC" controlid="chkNC"></buttons-band>' +
            //            '<div class="comment-box">' +
            //                '<div class="title-bar"><i class="icon icon-comment-o"></i> Comments</div>' +
            //                '<textarea rows="6" ng-model="NewDCModel.NCComments"></textarea>' +
            //            '</div>';


            document.getElementById('RightPanelContent').innerHTML = "";

            var _oOneViewCompiler = new OneViewCompiler();
            _oOneViewCompiler.CompileAndApeend(oScope, $compile, Html, "RightPanelContent");

            NCCurrentTabId = 2;

            var RegularExpressionForRemoveClass = new RegExp('(\\s|^)activated(\\s|$)');
            var ObservationTab = document.getElementById('ObservationTab');
            ObservationTab.className = ObservationTab.className.replace(RegularExpressionForRemoveClass, ' ');

            var NCTab = document.getElementById('NCTab');
            NCTab.className = NCTab.className + " activated";
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.AppendNCHtml", Excep);
        }
    }

    this.AppendObservationHtml = function ($compile) {

        try {
            var Html = '<div class="list comment-box">' +
                            '<div class="item item-divider item-icon-left"><i class="icon icon-comment-o"></i>' + xlatService.xlat('Comments') + ' </div>' +
                            '<div class="item item-button-right">' +
                                '<textarea rows="6" ng-model="NewDCModel.ObservationComments"></textarea>' +
                                '<a class="button button-calm" ng-click="ClearComments()">' + xlatService.xlat('Clear') + '</a>' +
                             '</div>'+
                        '</div>';

            document.getElementById('RightPanelContent').innerHTML = "";

            var _oOneViewCompiler = new OneViewCompiler();
            _oOneViewCompiler.CompileAndApeend(oScope, $compile, Html, "RightPanelContent");

            NCCurrentTabId = 1;

            var RegularExpressionForRemoveClass = new RegExp('(\\s|^)activated(\\s|$)');
            var ObservationTab = document.getElementById('NCTab');
            ObservationTab.className = ObservationTab.className.replace(RegularExpressionForRemoveClass, ' ');

            var NCTab = document.getElementById('ObservationTab');
            NCTab.className = NCTab.className + " activated";
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.AppendObservationHtml", Excep);
        }
    }

    this.CustomNCClick = function () {

        try {
            if (NCSelectedAttributeId != 0) {

                var _OneViewSqlitePlugin = new OneViewSqlitePlugin();

                var NCComments = (oScope.NewDCModel.NCComments != undefined) ? oScope.NewDCModel.NCComments : "";
                var IsNC = false;
                var IsObservation = false;

                //alert(JSON.stringify(oScope.NCOptions))

                for (var i = 0; i < oScope.NCOptions.length; i++) {
                    if (oScope.NCOptions[i].Selected == true && oScope.NCOptions[i].Id == 1)
                        IsNC = true;
                    else if (oScope.NCOptions[i].Selected == true && oScope.NCOptions[i].Id == 2)
                        IsObservation = true;
                }

                //alert("NCComments : " + NCComments + ", IsNC : " + IsNC + ", IsObservation : " + IsObservation);

                var NCRuleId = MyInstance.NCOrObservationRuleId;
                var RuleGroup = "'" + MyInstance.RuleGroup + "'";

                if (CommentsResult[RuleGroup] == undefined) {
                    CommentsResult[RuleGroup] = {
                        'Comments': NCComments, 
                        "IsNC": IsNC,
                        "IsObservation": IsObservation,
                        "IsNCOrObservationMandatory": MyInstance.IsNCOrObservationMandatory,
                        "IsManualRule" : MyInstance.IsManualRule,
                        "RuleId": MyInstance.NCOrObservationRuleId,
                        "RuleName": MyInstance.NCOrObservationRuleName,
                        "RuleDescription": MyInstance.NCOrObservationRuleDescription,
                        "RuleGroup": MyInstance.RuleGroup,
                        "RuleCode": MyInstance.RuleCode,
                        'Deviatedby': MyInstance.Deviatedby,
                        'ExpectedValue': MyInstance.ExpectedValue,
                        'ActualValue': MyInstance.ActualValue,
                        'TemplateNodeIds': MyInstance.TemplateNodeIds
                    };
                }
                else {
                    CommentsResult[RuleGroup].Comments = NCComments;
                    CommentsResult[RuleGroup].IsNC = IsNC;
                    CommentsResult[RuleGroup].IsObservation = IsObservation;
                    CommentsResult[RuleGroup].IsNCOrObservationMandatory = MyInstance.IsNCOrObservationMandatory;
                    CommentsResult[RuleGroup].IsManualRule = MyInstance.IsManualRule;
                    CommentsResult[RuleGroup].RuleId = MyInstance.NCOrObservationRuleId;
                    CommentsResult[RuleGroup].RuleName = MyInstance.NCOrObservationRuleName;
                    CommentsResult[RuleGroup].RuleDescription = MyInstance.NCOrObservationRuleDescription;
                    CommentsResult[RuleGroup].RuleGroup = MyInstance.RuleGroup;
                    CommentsResult[RuleGroup].RuleCode = MyInstance.RuleCode;
                    CommentsResult[RuleGroup].Deviatedby = MyInstance.Deviatedby;
                    CommentsResult[RuleGroup].ExpectedValue = MyInstance.ExpectedValue;
                    CommentsResult[RuleGroup].ActualValue = MyInstance.ActualValue;
                    CommentsResult[RuleGroup].TemplateNodeIds = MyInstance.TemplateNodeIds;
                }
               
                //alert(oScope.NewDCModel.NCComments + "," + oScope.NewDCModel.IsNC + "," + oScope.NewDCModel.IsObservation + "," + oScope.NewDCModel.ObservationComments);
                if (IsNC == true || IsObservation == true || NCComments != "") {
                    var DCNCMappingListData = new Array();
                    DCNCMappingListData[0] = { 'NCRuleId': NCRuleId, 'IsNC': IsNC, "IsObservation": IsObservation, "Comments": NCComments, "IsManualRule": true, "RuleName": MyInstance.NCOrObservationRuleName, "RuleDescription": MyInstance.NCOrObservationRuleDescription, "AttributeGroupId": NCSelectedAttributeId, "RuleGroup": MyInstance.RuleGroup, 'RuleCode': MyInstance.RuleCode, 'Deviatedby': MyInstance.Deviatedby, 'ExpectedValue': MyInstance.ExpectedValue, 'ActualValue': MyInstance.ActualValue, 'TemplateNodeIds': MyInstance.TemplateNodeIds };
                    //alert(JSON.stringify(DCNCMappingListData));
                    CreateDCNCMapping(DCNCMappingListData);
                }
                else {
                    if (OneViewSessionStorage.Get("DcId") != null) {
                        //var DCNCMappingQuery = "DELETE FROM DCNCMapping WHERE NCRuleId = " + NCRuleId + " AND DataCaptureClientGuid = '" + NCDataCaptureClientGuid + "'";
                        //alert(DCNCMappingQuery);
                        //_OneViewSqlitePlugin.ExcecuteSql(DCNCMappingQuery);
                        var DCNCMappingListData = new Array();
                        DCNCMappingListData[0] = { 'NCRuleId': NCRuleId, 'IsNC': IsNC, "IsObservation": IsObservation, "Comments": NCComments, "IsManualRule": true, "RuleName": MyInstance.NCOrObservationRuleName, "RuleDescription": MyInstance.NCOrObservationRuleDescription, "AttributeGroupId": NCSelectedAttributeId, "RuleGroup": MyInstance.RuleGroup, 'RuleCode': MyInstance.RuleCode, 'Deviatedby': MyInstance.Deviatedby, 'ExpectedValue': MyInstance.ExpectedValue, 'ActualValue': MyInstance.ActualValue, 'TemplateNodeIds': MyInstance.TemplateNodeIds };
                        CreateDCNCMapping(DCNCMappingListData);
                    }
                    else {
                        for (i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                            if (MyInstance.DCNCMappingList[i].NCRuleId == NCRuleId) {
                                MyInstance.DCNCMappingList.splice(i, 1);
                            }
                        }
                    }
                }
                //alert(oScope.NewDCModel.ObservationComments);
                var Comments = (oScope.NewDCModel.ObservationComments != undefined) ? oScope.NewDCModel.ObservationComments : "";
                if (ObservationResult[NCSelectedAttributeId] == undefined) {

                    Comments = removeSpecialCharacter(Comments);

                    ObservationResult[NCSelectedAttributeId] = {
                        "Comments": Comments,
                        "IsCommentsMandatory": MyInstance.IsCommentsMandatory                      
                    };
                }
                else {
                    Comments = removeSpecialCharacter(Comments);
                    ObservationResult[NCSelectedAttributeId].Comments = Comments;
                    ObservationResult[NCSelectedAttributeId].IsCommentsMandatory = MyInstance.IsCommentsMandatory;                  
                }

                oScope.NewDCModel.NCComments = "";
                //oScope.NewDCModel.IsNC = false;
                oScope.NewDCModel.ObservationComments = "";

                var _oOneViewSidePanel = new OneViewSidePanel();
                _oOneViewSidePanel.Toggle(oSnapRemote);
                _oOneViewSidePanel.Clear();
            }

            //alert("ObservationResult : " + JSON.stringify(ObservationResult) + ", CommentsResult : " + JSON.stringify(CommentsResult));
            //alert(JSON.stringify(MyInstance.DCNCMappingList));

        }
        catch (Excep) {
            //alert('CustomNCClick Excep ' + Excep);
           // alert('CustomNCClick Excep ' + JSON.stringify(Excep));
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.CustomNCClick", xlatService);
        }
        finally {
            NCComments = null;
            IsNC = null;
            DCNCMappingListData = null;
        }
    }

    var ValidateNCAndComments = function () {

        try {
            //alert("ObservationResult : " + JSON.stringify(ObservationResult) + ", CommentsResult : " + JSON.stringify(CommentsResult));
            var IsVallidationSuccess = true;

            var ValidationMessage = "******** Mandatory Comments ********\n";

            for (var itrObservationResult in ObservationResult) {
                if (ObservationResult[itrObservationResult].IsNCOrObservationMandatory == true && ObservationResult[itrObservationResult].IsNC == false && ObservationResult[itrObservationResult].IsObservation == false) {                                     
                    ValidationMessage += "\nRuleId : " + ObservationResult[itrObservationResult].RuleId + ", RuleName : " + ObservationResult[itrObservationResult].RuleName + ", RuleDescription : " + ObservationResult[itrObservationResult].RuleDescription;
                    IsVallidationSuccess = false;
                }
            }

            OutPut = "\n******** Mandatory NcOrObservation ********\n";

            for (var itrCommentsResult in CommentsResult) {
                if (CommentsResult[itrCommentsResult].IsCommentsMandatory == true && CommentsResult[itrCommentsResult].Comments == "") {
                    ValidationMessage += "\nRuleId : " + ObservationResult[itrObservationResult].RuleId + ", RuleName : " + ObservationResult[itrObservationResult].RuleName + ", RuleDescription : " + ObservationResult[itrObservationResult].RuleDescription;
                    IsVallidationSuccess = false;
                }
            }

            if (IsVallidationSuccess == false) {
                alert(ValidationMessage);
            }

            return IsVallidationSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ValidateNCAndComments", Excep);
        }
        finally {
        }
    }

    this.GetNCComments = function (DcId) {

        try {
            OneViewConsole.Debug("GetNCComments Start", "DataCaptureBO.GetNCComments");

            CommentsResult = {};
            ObservationResult = {};

            var _OneViewSqlitePlugin = new OneViewSqlitePlugin();
            //var _oNCColorComponent = new NCColorComponent();

            var DataCaptureQuery = "SELECT * FROM DataCaptureEntity WHERE Id = " + DcId;
            var DataCaptureResult = _OneViewSqlitePlugin.ExcecuteSqlReader(DataCaptureQuery);

            NCDataCaptureClientGuid = DataCaptureResult[0].ClientGuid;

            var DCNCMappingQuery = "SELECT * FROM DCNCMapping WHERE DataCaptureClientGuid = '" + DataCaptureResult[0].ClientGuid + "'";
            var DCNCMappingResult = _OneViewSqlitePlugin.ExcecuteSqlReader(DCNCMappingQuery);

            var DcResultDetailsQuery = "SELECT * FROM DcResultDetailsEntity WHERE DataCaptureId = " + DcId;
            var DcResultDetailsResult = _OneViewSqlitePlugin.ExcecuteSqlReader(DcResultDetailsQuery);

            for (var i = 0; i < DCNCMappingResult.length; i++) {
                CommentsResult["'" + DCNCMappingResult[i].RuleGroup + "'"] = {
                    'Comments': DCNCMappingResult[i].Comments,
                    "IsNC": (DCNCMappingResult[i].IsNC == "true") ? true : false,
                    "IsObservation": (DCNCMappingResult[i].IsObservation == "true") ? true : false,
                    "IsNCOrObservationMandatory": false,
                    "IsManualRule": (DCNCMappingResult[i].IsManualRule == "true") ? true : false,
                    "RuleId": DCNCMappingResult[i].NCRuleId,
                    "RuleName": DCNCMappingResult[i].RuleName,
                    "RuleDescription": DCNCMappingResult[i].RuleDescription,
                    "AttributeGroupId": DCNCMappingResult[i].AttributeGroupId
                };               
                //if (DCNCMappingResult[i].IsNC == "true") {
                //    _oNCColorComponent.Show(DCNCMappingResult[i].AttributeGroupId);
                //}
            }

            for (var i = 0; i < DcResultDetailsResult.length; i++) {
                ObservationResult[DcResultDetailsResult[i].AttributeNodeId] = {
                    'Comments': DcResultDetailsResult[i].Comments,
                    "IsCommentsMandatory": false                  
                };
            }

            //alert(JSON.stringify("CommentsResult : " + JSON.stringify(CommentsResult)));
            //alert(JSON.stringify("ObservationResult : " + JSON.stringify(ObservationResult)));

            OneViewConsole.Debug("GetNCComments End", "DataCaptureBO.GetNCComments");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetNCComments", Excep);
        }
    }

    this.AttachPicture = function (LocalURL, DATEntityType) {
        try {
            OneViewConsole.Debug("AttachPicture Start", "DataCaptureBO.AttachPicture");

            var MultiMediaElement = {
                "Id": 0,
                "ServerId": 0,
                "MappedEntityClientGuid": "",
                "Dimension": DATEntityType,
                "MultiMediaType": "image/jpg",
                "LocalURL": LocalURL,
                "AlternateName": "No Image",
                "Comments": "",
                "IsDisabled": false,
                "RuleId": MyInstance.NCOrObservationRuleId
            };
            oScope.MultiMediaSubElements.push(MultiMediaElement);
            MyInstance.MultiMediaSubElementsList.push(MultiMediaElement);

            oScope.$apply();

            OneViewConsole.Debug("AttachPicture End", "DataCaptureBO.AttachPicture");
        }
        catch (Excep) {           
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.AttachPicture", Excep);
        }
    }

    this.SetHygAvgrageReading = function () {

        try {
          
            var Reading1 = 0;
            var Reading2 = 0;
            var Reading3 = 0;
            var Reading4 = 0;
            var Reading5 = 0;

            var AverageCount = 0;

            if (oScope.NewDCModel.Reading1ControlId != "" && oScope.NewDCModel.Reading1ControlId != undefined) {
                Reading1 = parseFloat(oScope.NewDCModel.Reading1ControlId);
                AverageCount = (Reading1 == 0) ? AverageCount : AverageCount + 1;
            }
            if (oScope.NewDCModel.Reading2ControlId != "" && oScope.NewDCModel.Reading2ControlId != undefined) {
                Reading2 = parseFloat(oScope.NewDCModel.Reading2ControlId);
                AverageCount = (Reading2 == 0) ? AverageCount : AverageCount + 1;
            }
            if (oScope.NewDCModel.Reading3ControlId != "" && oScope.NewDCModel.Reading3ControlId != undefined) {
                Reading3 = parseFloat(oScope.NewDCModel.Reading3ControlId);
                AverageCount = (Reading3 == 0) ? AverageCount : AverageCount + 1;
            }
            if (oScope.NewDCModel.Reading4ControlId != "" && oScope.NewDCModel.Reading4ControlId != undefined) {
                Reading4 = parseFloat(oScope.NewDCModel.Reading4ControlId);
                AverageCount = (Reading4 == 0) ? AverageCount : AverageCount + 1;
            }
            if (oScope.NewDCModel.Reading5ControlId != "" && oScope.NewDCModel.Reading5ControlId != undefined) {
                Reading5 = parseFloat(oScope.NewDCModel.Reading5ControlId);
                AverageCount = (Reading5 == 0) ? AverageCount : AverageCount + 1;
            }

            if (AverageCount > 0) {
                var Average = (Reading1 + Reading2 + Reading3 + Reading4 + Reading5) / AverageCount;               
                //oScope.NewDCModel.AverageTempControlId = Average
                oScope.NewDCModel.AverageTempControlId = Average.toFixed(1);
            }
            else
            {
                oScope.NewDCModel.AverageTempControlId = "";
            }
          
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetHygAvgrageReading", Excep);
        }
        finally {
        }       
    }

    this.PreControlEventsOLD = function (AttributeId, ControlId, $event) {
        try {
            // alert("AttributeId=>" + AttributeId);
           // alert(JSON.stringify(TemplateNodes[AttributeId].AnswerMode));
           // alert(JSON.stringify(TemplateNodes));
            //alert(oScope.NewDCModel.ATPreChillerTempInControlId);
             var oDefaultValidationResponse = new DefaultValidationResponse();
             oDefaultValidationResponse.IsSuccess = true;
             if (TemplateNodes[AttributeId] != undefined){          
            for (var i = 0; i < TemplateNodes[AttributeId].AnswerMode.length; i++) {

                if (TemplateNodes[AttributeId].AnswerMode[i].ControlId == ControlId) {
                    if (TemplateNodes[AttributeId].AnswerMode[i].PreControlEvents != undefined) {
                        var EventArgs = { ControlEvents: TemplateNodes[AttributeId].AnswerMode[i].PreControlEvents, EventType: 'PreControlEvent', AnswerMode: TemplateNodes[AttributeId].AnswerMode[i], oScope: oScope, $event: $event };
                        oDefaultValidationResponse = new RunTimeEventHandler().handleEventJob(EventArgs);                        
                        break;
                    }
                }         
             }
          }
            return oDefaultValidationResponse;
        }

        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PreControlEvents", xlatService);
        }
    }
    

    this.PreControlEvents = function (AttributeId, ControlId, $event) {
        try {

            var oDefaultValidationResponse = new DefaultValidationResponse();
            oDefaultValidationResponse.IsSuccess = true;

            //CMFT
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 5 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 36 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 39) {
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AttributeId,
                        'ControlId': ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': $event,
                        'AnswerModeObject': '',
                        'AnswerToBind': ''
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePreControlUIJobs(EventArgs);
                }
            }

            else {
                if (TemplateNodes[AttributeId] != undefined) {
                    for (var i = 0; i < TemplateNodes[AttributeId].AnswerMode.length; i++) {

                        if (TemplateNodes[AttributeId].AnswerMode[i].ControlId == ControlId) {
                            if (TemplateNodes[AttributeId].AnswerMode[i].PreControlEvents != undefined) {
                                var EventArgs = { ControlEvents: TemplateNodes[AttributeId].AnswerMode[i].PreControlEvents, EventType: 'PreControlEvent', AnswerMode: TemplateNodes[AttributeId].AnswerMode[i], oScope: oScope, $event: $event };
                                oDefaultValidationResponse = new RunTimeEventHandler().handleEventJob(EventArgs);
                                break;
                            }
                        }
                    }
                }
            }


            return oDefaultValidationResponse;
        }

        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PreControlEvents", xlatService);
        }
    }
    var PostControlEventTimeOut = 1000;
    var PostControlEventlastTimeOutId = null;
    this.PostControlEventsOLD = function (AttributeId, ControlId) {
        try {

        if (PostControlEventlastTimeOutId != null)
            otimeoutService.cancel(PostControlEventlastTimeOutId);
        PostControlEventlastTimeOutId = otimeoutService(function () {MyInstance.PostControlEventsExe(AttributeId, ControlId); }, PostControlEventTimeOut);
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PostControlEvents", xlatService);
        }
    }

    this.PostControlEvents = function (AttributeId, ControlId) {
        try {

            if (PostControlEventlastTimeOutId != null)
                otimeoutService.cancel(PostControlEventlastTimeOutId);
            PostControlEventlastTimeOutId = otimeoutService(function () { MyInstance.PostControlEventsExe(AttributeId, ControlId); }, PostControlEventTimeOut);
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PostControlEvents", xlatService);
        }
    }

    this.PostControlEventsExeOLD = function (AttributeId, ControlId) {
        try {
            var oDefaultValidationResponse = new DefaultValidationResponse();
            oDefaultValidationResponse.IsSuccess = true;

            var AnswerMode = GetAnswerMode(AttributeId, ControlId);


            if (AnswerMode != undefined) {
                oDefaultValidationResponse = postControlValidation(AnswerMode);
                if (oDefaultValidationResponse.IsSuccess == true) {
                    RefreshControls(AnswerMode)
                }

            }
            return oDefaultValidationResponse;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PostControlEventsExe", xlatService);
        }
    }

    this.GetTemplateUIEventJobConfigMetaData = function () {
        try {
            var _oTemplateUIEventJobConfigMetaDataComponent = new TemplateUIEventJobConfigMetaDataComponent();
            _oTemplateUIEventJobConfigMetaDataComponent.Load(ServiceId, TemplateId, DcPlaceId, DATEntityType.OrganizationAssestsNode, LoginUserId);

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.GetTemplateUIEventJobConfigMetaData", xlatService);
        }
    }


    this.PostControlEventsExe = function (AttributeId, ControlId) {
        try {
            var oDefaultValidationResponse = new DefaultValidationResponse();
            oDefaultValidationResponse.IsSuccess = true;

            //CMFT
            if (OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 4 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 19 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 23 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 24 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 26
                || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 36 || OneViewGlobalServiceTypeEnum[OneViewGlobalServiceType] == 39) {
               
                if (GlobalTemplateUIEventJobConfigMetaData != null) {
                    var EventArgs = {
                        'ControlEventUIJobs': GlobalTemplateUIEventJobConfigMetaData.ControlEventUIJobs,
                        'AttributeId': AttributeId,
                        'ControlId': ControlId,
                        'oScope': oScope,
                        'TemplateNodes': TemplateNodes,
                        'oEvent': '',
                        'AnswerModeObject': '',
                        'AnswerToBind': ''
                    };
                    var _oUIEventJobHandler = new UIEventJobHandler();
                    oDefaultValidationResponse = _oUIEventJobHandler.EvaluatePostControlUIJobs(EventArgs);
                }
            }

            else {

                var AnswerMode = GetAnswerMode(AttributeId, ControlId);
                if (AnswerMode != undefined) {
                    oDefaultValidationResponse = postControlValidation(AnswerMode);
                    if (oDefaultValidationResponse.IsSuccess == true) {
                        RefreshControls(AnswerMode)
                    }

                }
            }

            return oDefaultValidationResponse;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.PostControlEventsExe", xlatService);
        }
    }
    var postControlValidation = function (AnswerMode)
    {
        var oDefaultValidationResponse = new DefaultValidationResponse();
        oDefaultValidationResponse.IsSuccess = true;

        if (AnswerMode.PostControlEvents != undefined) {
            var EventArgs = { ControlEvents: AnswerMode.PostControlEvents, EventType: 'PostControlEvent', AnswerMode: AnswerMode, oScope: oScope };
            oDefaultValidationResponse = new RunTimeEventHandler().handleEventJob(EventArgs);
        }   
        return oDefaultValidationResponse;
    }
    var RefreshControls = function (AnswerMode)
    {
        if (AnswerMode.RefreshControlsInfo != undefined) {

            for (var i = 0; i < AnswerMode.RefreshControlsInfo.length; i++)
            {
                var RefreshControlInfo = AnswerMode.RefreshControlsInfo[i];
              //  alert("RefreshControlInfo" + JSON.stringify(RefreshControlInfo))
                var RefreshControlAnswerModeInfo = GetAnswerMode(RefreshControlInfo.AttributeId, RefreshControlInfo.ControlId);
               // alert("RefreshControlAnswerModeInfo" + JSON.stringify(RefreshControlAnswerModeInfo));
                if (RefreshControlAnswerModeInfo.Type == "TEXTBOX" && (RefreshControlAnswerModeInfo.DataType == 'FLOAT' || RefreshControlAnswerModeInfo.DataType == 'INTEGER')) {                    

                    var oDefaultNumericTextBoxControl = new DefaultNumericTextBoxControl();
                    oDefaultNumericTextBoxControl.Refresh(RefreshControlAnswerModeInfo, oScope);
                }
                else {
                    var oDDefaultTextBoxControl = new DefaultTextBoxControl();
                    oDDefaultTextBoxControl.Refresh(RefreshControlAnswerModeInfo, oScope);
                }
            }
        }
    }
    var GetAnswerMode = function (AttributeId, ControlId)
    {
        var AnswerMode = null;
        if (TemplateNodes[AttributeId] != undefined) {
            for (var i = 0; i < TemplateNodes[AttributeId].AnswerMode.length; i++) {
                if (TemplateNodes[AttributeId].AnswerMode[i].ControlId == ControlId) {
                    AnswerMode = TemplateNodes[AttributeId].AnswerMode[i];
                    break;
                }
            }
        }
        return AnswerMode;
    }

    this.ProbPreControlEvents = function (Model) {
        try {

            var oDefaultValidationResponse = new DefaultValidationResponse();
            oDefaultValidationResponse.IsSuccess = true;
            if (TemplateId == 2) {//CookingAndBlastChillingMonitoring
                if (Model == "txtCoreTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(11, 'txtCoreTempControlId', "");
                }
                else if (Model == "ATPreChillerTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(15, 'ATPreChillerTempInControlId', "");
                }
                else if (Model == "ATBlastChillerTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(20, 'ATBlastChillerTempInControlId', "");
                }
                else if (Model == "ATPreChillerTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(17, 'ATPreChillerTempOutControlId',  "");
                }
                else if (Model == "ATBlastChillerTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(22, 'ATBlastChillerTempOutControlId',  "");
                }
            }
            else if (TemplateId == 3) {//Cooking And BlastChilling Verification
                if (Model == "txtCoreTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(31, 'txtCoreTempControlId',  "");
                }
                else if (Model == "ATPreChillerTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(35, 'ATPreChillerTempInControlId', "");
                }
                else if (Model == "ATBlastChillerTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(40, 'ATBlastChillerTempInControlId', "");
                }
                else if (Model == "ATPreChillerTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(37, 'ATPreChillerTempOutControlId', "");
                }
                else if (Model == "ATBlastChillerTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(42, 'ATBlastChillerTempOutControlId', "");
                }
            }
            else if (TemplateId == 88) {//BakingBCVerification
                if (Model == "txtCoreTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(91, 'txtCoreTempControlId', "");
                }
                else if (Model == "ATBlastChillerTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(95, 'ATBlastChillerTempInControlId', "");
                }
                else if (Model == "ATBlastChillerTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(97, 'ATBlastChillerTempOutControlId', "");
                }
            }
            else if (TemplateId == 282) {//ColdMealDishingVerification
                if (Model == "StartingTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(289, 'StartingTempInControlId', "");
                }
                else if (Model == "FinishingTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(291, 'FinishingTempOutControlId', "");
                }
                else if (Model == "AmbientTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(285, 'AmbientTempControlId', "");
                }
            }
            else if (TemplateId == 140) {//HotMealDishingVerification
                if (Model == "StartingTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(147, 'StartingTempInControlId', "");
                }
                else if (Model == "FinishingTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(149, 'FinishingTempOutControlId', "");
                }
                else if (Model == "DTAmbientTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(143, 'DTAmbientTempControlId', "");
                }
            }

            else if (TemplateId == 116) {//TraySettingVerification
                if (Model == "StartingTempInControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(123, 'StartingTempInControlId', "");
                }
                else if (Model == "FinishingTempOutControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(125, 'FinishingTempOutControlId', "");
                }
                else if (Model == "DTAmbientTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(119, 'DTAmbientTempControlId', "");
                }
            }           
            else if (TemplateId == 77) {//ThawingVerification              
                if (Model == "txtTempControlId") {                   
                    oDefaultValidationResponse = MyInstance.PreControlEvents(84, 'txtTempControlId', "");
                }
            }
            else if (TemplateId == 293) {//AircraftLoadingVerification
                if (Model == "AmbientTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(297, 'AmbientTempControlId', "");
                }
               else if (Model == "AircraftLoadingTempControlId") {                 
                    oDefaultValidationResponse = MyInstance.PreControlEvents(299, 'AircraftLoadingTempControlId', "");
                }
                else if (Model == "TempControlId") {                  
                    oDefaultValidationResponse = MyInstance.PreControlEvents(302, 'TempControlId', "");
                }
            }
            else if (TemplateId == 44) {//GoodsReceiving And Temperature Verification Records
                if (Model == "ATSurfaceTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(61, 'ATSurfaceTempControlId', "");
                }
            }
            else if (TemplateId == 434) {//Staff Food Temperature
                if (Model == "ATFoodTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(439, 'ATFoodTempControlId', '');
                }
                else if (Model == "ATBainMarieTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(440, 'ATBainMarieTempControlId', '');
                }
            }
            else if (TemplateId == 442) {//ChillerFreezerChecking
                if (Model == "ATAirProbeTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(449, 'ATAirProbeTempControlId', '');
                }
                else if (Model == "ATGaugeTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(448, 'ATGaugeTempControlId', '');
                }
            }
            else if (TemplateId == 463) {//MEALS DISPATCH TEMPERATURE LOG
                if (Model == "ATTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(469, 'ATTempControlId', '');
                }
            }
            else if (TemplateId == 452) {//Dispatch Temperature Verification of Food Products EKFC to EKFC  
                if (Model == "ATLoadingTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(456, 'ATLoadingTempControlId', '');
                }
                else if (Model == "ATOffLoadingTempControlId") {
                    oDefaultValidationResponse = MyInstance.PreControlEvents(461, 'ATOffLoadingTempControlId', '');
                }
            }
               
           
            return oDefaultValidationResponse;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.ProbPreControlEvents", xlatService);
        }
    }

    this.Destroy = function () {
        AnswerModePreControlEvents = null;
        CPActionResult = {};
        CPTemplateResult = {};
    }

    //this.SpecialCharacterValidator = function (ControlId) {
    //    try {
    //        var value = document.getElementById(ControlId).value;
    //        value = value.replace(/\s/g, '');
    //        value = value.replace(/[^- 0-9 .a-zA-Z]/g, '');
           
    //        value = value.trim();
    //        document.getElementById(ControlId).value = value;
    //        oScope.NewDCModel[ControlId] = value;
    //    }
    //    catch (Excep) {
    //        throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SpecialCharacterValidator", Excep);
    //    }
    //    finally {
    //    }
    //}


   
    this.GetFormattedDateTime = function (ControlId) {
        try {
            OneViewConsole.Debug("GetFormattedDateTime Start", "DataCaptureBO.GetFormattedDateTime");

            var Value = oScope[ControlId + "_DateTime"];
            //alert('GetFormattedDateTime Value : ' + Value)
            var FormattedDateTime = undefined;
            if (Value != undefined && Value != null && Value != "") {
                var ValueSplittedBySpace = Value.split(" ");
                var ValueSplittedByHifen = (ValueSplittedBySpace[0]).split("-");
                var ValueSplittedByColon = (ValueSplittedBySpace[1]).split(":");
                FormattedDateTime = new Date(ValueSplittedByHifen[2], (ValueSplittedByHifen[1] - 1), ValueSplittedByHifen[0], ValueSplittedByColon[0], ValueSplittedByColon[1]);
            }
            OneViewConsole.Debug("GetFormattedDateTime End", "DataCaptureBO.GetFormattedDateTime");

            return FormattedDateTime;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetFormattedDateTime", Excep);
        }
        finally {
        }
    }


    this.ngChange_setDateTime = function (ControlId) {
        try {
         
            var oDateTime = new DateTime();
            var time = document.getElementById(ControlId).value;
           
           // alert(oScope[ControlId + "_DateTime"]);

            //   alert(oScope[ControlId]);
            if (time != "" && time != undefined && time != null) {
                if (oScope[ControlId + "_DateTime"] != null && oScope[ControlId + "_DateTime"] != '') {
                   // alert(oScope[ControlId + "_DateTime"]);
                    oScope[ControlId + "_DateTime"] = oScope[ControlId + "_DateTime"].split(' ')[0] + " " + time;
                }
                else {
                    //oScope["NewDCModel." + ControlId + "_DateTime"] = oDateTime.GetDate() + " " + time;
                    oScope[ControlId + "_DateTime"] = oDateTime.GetDate() + " " + time;
                }
            }
            else {
                oScope[ControlId + "_DateTime"] = "";
            }
           
          
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ngChange_setDateTime", Excep);
        }
    }

    this.SamplingSheetAndHandSwabAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {
            var IsSuccess = true;
            var ErrorMessage = "";

            var Result = { IsSuccess: true, ErrorMessage: "" };
            Result.IsSuccess = SamplingSheetCustomValidation();

            if (IsSuccess == true) {

                if (AryDcResultDetails != undefined) {

                    for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                        var valueFromPage = AryDcResultDetails[itr2].Answer;

                        if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                            var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();

                            if (ParameterTested != "") {

                                Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Staph", "txtActualValue1ControlId", "AddlEvaluation1ControlId");
                                Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Ecoli", "txtActualValue2ControlId", "AddlEvaluation2ControlId");

                                if (Result.IsSuccess == true) {
                                    if (oScope.NewDCModel["txtActualValue1ControlId"] == "" && oScope.NewDCModel["txtActualValue2ControlId"] == "") {
                                        Result.ErrorMessage = "Parameter Tested";
                                        Result.IsSuccess = false;
                                    }
                                }
                            }
                            else {
                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }
                    }
                }
            }
            IsSuccess = Result.IsSuccess;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SampleSheetAndIceAnalysisValidation", Excep);
        }
    }

    var SamplingSheetCustomValidation = function () {
        try {
            var IsSuccess = true;


            var CommonMessage = "MN-RQ-CST-008 :: Please enter ";
            var ErrorMessage = "";

            var IsSuccess = true;

            if (scope.NewDCModel.txtSamplingNoControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample No.";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtStaffNameControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Staff Name";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtStaffNumberControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Staff Number";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtOthersLocationControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Others";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.txtRemarksControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Remarks";
            //    IsSuccess = false;
            //}          
            //if (scope.NewDCModel.DTDateofAnalysisControlId == "") {
            if (document.getElementById("DTDateofAnalysisControlId").value == "" || document.getElementById("DTDateofAnalysisControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Analysis";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTDateofCompletionControlId == "") {
            if (document.getElementById("DTDateofCompletionControlId").value == "" || document.getElementById("DTDateofCompletionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Completion";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTDateTimeOfCollectionControlId == "") {
            if (document.getElementById("DTDateTimeOfCollectionControlId").value == "" || document.getElementById("DTDateTimeOfCollectionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date & Time of Collection";
                IsSuccess = false;
            }
            if ((scope.AddlEvaluation1ControlId.GetSelectedText() == "F" || scope.AddlEvaluation2ControlId.GetSelectedText() == "F") &&
                (scope.NewDCModel.txtFollowUpStatusControlId == undefined || scope.NewDCModel.txtFollowUpStatusControlId == "" || scope.NewDCModel.txtFollowUpStatusControlId == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Follow Up Status";
                IsSuccess = false;
            }
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            //if (IsSuccess == false) {
            //    alert(CommonMessage + " " + ErrorMessage);
            //}

            return IsSuccess;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetaAndHandSwabAnalysisFacade.SamplingSheetCustomValidation", xlatService);
        }
    }

    this.SamplingSheetAndEquipmentSwabValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {
            var IsSuccess = true;
            var ErrorMessage = "";

            var Result = { IsSuccess: true, ErrorMessage: "" };
            Result.IsSuccess = SamplingSheetAndEquipmentSwabCustomValidation();

            if (IsSuccess == true) {

                if (AryDcResultDetails != undefined) {

                    for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                        var valueFromPage = AryDcResultDetails[itr2].Answer;

                        if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                            var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();

                            if (ParameterTested != "") {

                                Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Tvb", "txtActualValue1ControlId", "AddlEvaluation1ControlId");
                                Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Coliforms", "txtActualValue2ControlId", "AddlEvaluation2ControlId");
                                Result = ResultAndEvaluationAirParameterTestedValidation(Result, "Ecoli", "txtActualValue3ControlId", "AddlEvaluation3ControlId");
                                Result = ResultAndEvaluationAirParameterTestedValidation(Result, "Listeria", "txtActualValue4ControlId", "AddlEvaluation4ControlId");
                                Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Yeas & Mould", "txtActualValue5ControlId", "AddlEvaluation5ControlId");

                                if (Result.IsSuccess == true) {
                                    if (oScope.NewDCModel["txtActualValue1ControlId"] == "" && oScope.NewDCModel["txtActualValue2ControlId"] == "" && oScope.NewDCModel["txtActualValue3ControlId"] == "" && oScope.NewDCModel["txtActualValue4ControlId"] == "" && oScope.NewDCModel["txtActualValue5ControlId"] == "") {
                                        Result.ErrorMessage = "Parameter Tested";
                                        Result.IsSuccess = false;
                                    }
                                }
                            }
                            else {
                                Result.ErrorMessage = "Parameter Tested";
                                Result.IsSuccess = false;
                            }
                        }
                    }
                }
            }
            IsSuccess = Result.IsSuccess;

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SamplingSheetAndHandSwabAnalysisValidation", Excep);
        }
    }

    var SamplingSheetAndEquipmentSwabCustomValidation = function () {
        try {
            var IsSuccess = true;

            var CommonMessage = "MN-RQ-CST-008 :: Please enter ";
            var ErrorMessage = "";

            var IsSuccess = true;

            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Description";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtRemarksControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Remarks";
            //    IsSuccess = false;
            //}         
            //if (scope.NewDCModel.DTDateofAnalysisControlId == "" || scope.NewDCModel.DTDateofAnalysisControlId == null) {
            if (document.getElementById("DTDateofAnalysisControlId").value == "" || document.getElementById("DTDateofAnalysisControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Analysis";
                IsSuccess = false;
            }
            //if (document.getElementById('DTTimeControlId').value == "" || document.getElementById('DTTimeControlId').value == null) {
            if (document.getElementById('DTDateTimeOfCollectionControlId').value == "" || document.getElementById('DTDateTimeOfCollectionControlId').value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date & Time of Collection";
                IsSuccess = false;
            }

            if ((scope.AddlEvaluation1ControlId.GetSelectedText() == "F" || scope.AddlEvaluation2ControlId.GetSelectedText() == "F" || scope.AddlEvaluation3ControlId.GetSelectedText() == "F" || scope.AddlEvaluation4ControlId.GetSelectedText() == "F"
                || scope.AddlEvaluation5ControlId.GetSelectedText() == "F") && (scope.NewDCModel.txtFollowUpStatusControlId == undefined || scope.NewDCModel.txtFollowUpStatusControlId == "" || scope.NewDCModel.txtFollowUpStatusControlId == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Follow Up Status";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtVictoryControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sanitizer Concentration in ppm";
            //    IsSuccess = false;
            //}
            //if (scope.AddlChemicalsUsedControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Chemicals Used";
            //    IsSuccess = false;
            //}

            //if (IsSuccess == false) {
            //    alert(CommonMessage + " " + ErrorMessage);
            //}
            //if (scope.NewDCModel.DTDateofCompletionControlId == "" || scope.NewDCModel.DTDateofCompletionControlId == null) {
            if (document.getElementById("DTDateofCompletionControlId").value == "" || document.getElementById("DTDateofCompletionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Completion";
                IsSuccess = false;
            }
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }
            return IsSuccess;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetaAndHandSwabAnalysisFacade.SamplingSheetAndEquipmentSwabCustomValidation", xlatService);
        }
    }

    this.SamplingSheetAndLinenValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

            try {
                var IsSuccess = true;
                var ErrorMessage = "";

                var Result = { IsSuccess: true, ErrorMessage: "" };               
                Result.IsSuccess = SamplingSheetAndLinenCustomValidation();
              
                if (IsSuccess == true) {

                    if (AryDcResultDetails != undefined) {

                        for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                            var valueFromPage = AryDcResultDetails[itr2].Answer;

                            if (AryDcResultDetails[itr2].ControlId == 'chkParameterTested') {
                                var ParameterTested = oScope["chkParameterTested"].GetSelectedValue();

                                if (ParameterTested != "") {

                                    Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Tvb", "txtActualValue1ControlId", "AddlEvaluation1ControlId");
                                    Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Coliforms", "txtActualValue2ControlId", "AddlEvaluation2ControlId");
                                    //Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Ecoli", "txtActualValue3ControlId", "AddlEvaluation3ControlId");
                                    //Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Listeria", "txtActualValue4ControlId", "AddlEvaluation4ControlId");
                                    //Result = ActualAndEvaluationAirParameterTestedValidation(Result, "Yeas & Mould", "txtActualValue5ControlId", "AddlEvaluation5ControlId");
                                   
                                    if (Result.IsSuccess == true) {
                                        //if (oScope.NewDCModel["txtActualValue1ControlId"] == "" && oScope.NewDCModel["txtActualValue2ControlId"] == "" && oScope.NewDCModel["txtActualValue3ControlId"] == "" && oScope.NewDCModel["txtActualValue4ControlId"] == "" && oScope.NewDCModel["txtActualValue5ControlId"] == "") {
                                        if (oScope.NewDCModel["txtActualValue1ControlId"] == "" && oScope.NewDCModel["txtActualValue2ControlId"] == "") {
                                        Result.ErrorMessage = "Parameter Tested";
                                            Result.IsSuccess = false;
                                        }
                                    }
                                }
                                else {                                    
                                    Result.ErrorMessage = "Parameter Tested";
                                    Result.IsSuccess = false;
                                }
                            }
                        }
                    }                   
                }
                IsSuccess = Result.IsSuccess;

                if (IsSuccess == false && IsAlertMessageEnabled == true) {

                    var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + Result.ErrorMessage;
                    alert(finalMesg);
                }
              
                return IsSuccess;
            }
            catch (Excep) {              
                throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SamplingSheetAndHandSwabAnalysisValidation", Excep);
            }      
    }

    var SamplingSheetAndLinenCustomValidation = function () {
        try {
            var IsSuccess = true;

            var CommonMessage = "MN-RQ-CST-008 :: Please enter ";
            var ErrorMessage = "";

            var IsSuccess = true;

            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Description";
                IsSuccess = false;
            }                    
            //if (scope.NewDCModel.txtRemarksControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Remarks";
            //    IsSuccess = false;
            //}         
            //if (scope.NewDCModel.DTDateofAnalysisControlId == "") {
            if (document.getElementById("DTDateofAnalysisControlId").value == "" || document.getElementById("DTDateofAnalysisControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Analysis";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTDateofCompletionControlId == "") {
            if (document.getElementById("DTDateofCompletionControlId").value == "" || document.getElementById("DTDateofCompletionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of Completion";
                IsSuccess = false;
            }
            
            //if (scope.NewDCModel.DTDateTimeOfCollectionControlId == "") {
            if (document.getElementById("DTDateTimeOfCollectionControlId").value == "" || document.getElementById("DTDateTimeOfCollectionControlId").value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date & Time of Collection";
                IsSuccess = false;
            }
            if ((scope.AddlEvaluation1ControlId.GetSelectedText() == "F" || scope.AddlEvaluation2ControlId.GetSelectedText() == "F") &&
                (scope.NewDCModel.txtFollowUpStatusControlId == undefined || scope.NewDCModel.txtFollowUpStatusControlId == "" || scope.NewDCModel.txtFollowUpStatusControlId == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Follow Up Status";
                IsSuccess = false;
            }
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            //if (IsSuccess == false) {
            //    alert(CommonMessage + " " + ErrorMessage);
            //}
          
            return IsSuccess;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetaAndHandSwabAnalysisFacade.SamplingSheetAndEquipmentSwabCustomValidation", xlatService);
        }
    }

    this.IceAnalysisValidation_16122015 = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";
          
            var IceAnalysisSamplingSheetValidationResponse = SampleSheetAndIceAnalysisCustomValidation();
            var ReasonForAnalysis = oScope["chkAnalysisReason"].GetSelectedValue();
            if (ReasonForAnalysis == undefined) {
                ReasonForAnalysis = "";
            }
           
            //if (IceAnalysisSamplingSheetValidationResponse) {
            if (IceAnalysisSamplingSheetValidationResponse != true) {
                IsSuccess = false;
                //if (IsAlertMessageEnabled == true) {
                //    Message = IceAnalysisSamplingSheetValidationResponse.Message;
                //}
            }
     
            //}
            if (IsSuccess ==true){
            if (oScope["AddlCriteriaControlId"].GetSelectedText() == "") {
                IsSuccess = false;
                Message = "MN-RQ-CBM-002 :: Please enter Criteria";
            }

                // Coliforms, Ecoll, Pseudomonas
            else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "01 Bottled Water / Ice / Tap Water") {
               
                var TvbControlInfo = MyInstance.GetIcAnalysisControlInfo("Tvb");
                var ColiformsControlInfo = MyInstance.GetIcAnalysisControlInfo("Coliforms");
                var EcollControlInfo = MyInstance.GetIcAnalysisControlInfo("Ecoll");
                var PseudomonasControlInfo = MyInstance.GetIcAnalysisControlInfo("Pseudomonas");

                if (TvbControlInfo != null && ColiformsControlInfo != null && EcollControlInfo != null && PseudomonasControlInfo != null) {

                    var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                    var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                    var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                    var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");

                    if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                       
                        if (TvbResponse.IsSuccess == false) {
                            IsSuccess = false;
                            Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = Message + ColiformsResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (PseudomonasResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + PseudomonasResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                            }
                            else {
                                IsSuccess = true;
                            }


                            if (IsAlertMessageEnabled == true) {
                                //alert(Message);
                            }
                        }
                    }
                    else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                        alert("2")
                        if (TvbResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || PseudomonasResponse.IsSuccess != true) {
                            IsSuccess = false;
                            if (IsAlertMessageEnabled == true) {
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + PseudomonasResponse.Message;
                            }
                        }
                    }
                    //alert(Message);
                }
            }

                // Coliforms, Ecoll
            else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "02 Bottled Water") {
               
                var ColiformsControlInfo = MyInstance.GetIcAnalysisControlInfo("Coliforms");
                var EcollControlInfo = MyInstance.GetIcAnalysisControlInfo("Ecoll");
                
               
                if (ColiformsControlInfo != null && EcollControlInfo != null) {

                    var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                    var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                    if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                      
                        if (ColiformsResponse.IsSuccess == false) {
                            IsSuccess = false;
                            Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message;

                            if (EcollResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = Message + EcollResponse.Message;
                               
                            }
                            else {
                                IsSuccess = true;
                            }

                            if (IsAlertMessageEnabled == true) {
                                //alert(Message);
                            }
                        }
                    }
                    else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                        
                        if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                            IsSuccess = false;
                            if (IsAlertMessageEnabled == true) {
                                Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + EcollResponse.Message;
                            }
                        }
                    }
                   
                }
            }
        }

            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }

            
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.FoodAnalysisValidation", Excep);
        }
        finally {
        }
    }

    this.IceAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";

            var IceAnalysisSamplingSheetValidationResponse = SampleSheetAndIceAnalysisCustomValidation();
            var ReasonForAnalysis = oScope["chkAnalysisReason"].GetSelectedValue();
            if (ReasonForAnalysis == undefined) {
                ReasonForAnalysis = "";
            }

            //if (IceAnalysisSamplingSheetValidationResponse) {
            if (IceAnalysisSamplingSheetValidationResponse != true) {
                IsSuccess = false;
                //if (IsAlertMessageEnabled == true) {
                //    Message = IceAnalysisSamplingSheetValidationResponse.Message;
                //}
            }

            //}
            if (IsSuccess == true) {
                if (oScope["AddlCriteriaControlId"].GetSelectedText() == "") {
                    IsSuccess = false;
                    Message = "MN-RQ-CBM-002 :: Please enter Criteria";
                }

                    // Coliforms, Ecoll, Pseudomonas
                else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "01 Bottled Water / Ice / Tap Water") {

                    var TvbControlInfo = MyInstance.GetIcAnalysisControlInfo("Tvb");
                    var ColiformsControlInfo = MyInstance.GetIcAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = MyInstance.GetIcAnalysisControlInfo("Ecoll");
                    var PseudomonasControlInfo = MyInstance.GetIcAnalysisControlInfo("Pseudomonas");

                    /*Optional Start*/
                    var SalmonellaControlInfo = MyInstance.GetIcAnalysisControlInfo("Salmonella");
                    var EnterococcusControlInfo = MyInstance.GetIcAnalysisControlInfo("Enterococcus");
                    /*Optional End*/

                    if (TvbControlInfo != null && ColiformsControlInfo != null && EcollControlInfo != null && PseudomonasControlInfo != null && SalmonellaControlInfo != null && EnterococcusControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");

                        /*Optional Start*/
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EnterococcusResponse = ValidateFoodAnalysis(oScope, EnterococcusControlInfo, "Enterococcus");
                        /*Optional End*/

                        if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = Message + ColiformsResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (PseudomonasResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + PseudomonasResponse.Message;

                                            /*Optional Start*/
                                            if (SalmonellaResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SalmonellaResponse.Message;

                                                if (EnterococcusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + EnterococcusResponse.Message;

                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }


                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                        }
                        else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || PseudomonasResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + PseudomonasResponse.Message;
                                }
                            }
                        }
                        //alert(Message);
                    }
                }

                    // Coliforms, Ecoll
                else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "02 Bottled Water") {

                    var ColiformsControlInfo = MyInstance.GetIcAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = MyInstance.GetIcAnalysisControlInfo("Ecoll");

                    /*Optional Start*/
                    var TvbControlInfo = MyInstance.GetIcAnalysisControlInfo("Tvb");
                    var PseudomonasControlInfo = MyInstance.GetIcAnalysisControlInfo("Pseudomonas");
                    var SalmonellaControlInfo = MyInstance.GetIcAnalysisControlInfo("Salmonella");
                    var EnterococcusControlInfo = MyInstance.GetIcAnalysisControlInfo("Enterococcus");
                    /*Optional End*/

                    if (ColiformsControlInfo != null && EcollControlInfo != null && TvbControlInfo != null && PseudomonasControlInfo != null && SalmonellaControlInfo != null && EnterococcusControlInfo != null) {

                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EnterococcusResponse = ValidateFoodAnalysis(oScope, EnterococcusControlInfo, "Enterococcus");
                        /*Optional End*/

                        if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = Message + EcollResponse.Message;

                                    /*Optional Start*/
                                    if (TvbResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = Message + TvbResponse.Message;

                                        if (PseudomonasResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = Message + PseudomonasResponse.Message;

                                            if (SalmonellaResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = Message + SalmonellaResponse.Message;

                                                if (EnterococcusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = Message + EnterococcusResponse.Message;

                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/

                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                        }
                        else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {

                            if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + EcollResponse.Message;
                                }
                            }
                        }

                    }
                }
            }

            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }


            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IceAnalysisValidation", Excep);
        }
        finally {
        }
    }

    this.WaterAnalysisValidation_16122015 = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";

            var WaterAnalysisSamplingSheetValidationResponse = SampleSheetAndWaterAnalysisCustomValidation();
            var ReasonForAnalysis = oScope["chkAnalysisReason"].GetSelectedValue();
            if (ReasonForAnalysis == undefined) {
                ReasonForAnalysis = "";
            }
            //if (WaterAnalysisSamplingSheetValidationResponse) {
                if (WaterAnalysisSamplingSheetValidationResponse != true) {
                    IsSuccess = false;
                    //if (IsAlertMessageEnabled == true) {
                    //    Message = WaterAnalysisSamplingSheetValidationResponse.Message;
                    //}
                }
            //}
                if (IsSuccess == true) {
                    if (oScope["AddlCriteriaControlId"].GetSelectedText() == "") {
                        IsSuccess = false;
                        Message = "MN-RQ-CBM-002 :: Please enter Criteria";
                    }

                        // Coliforms, Ecoll, Pseudomonas
                    else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "01 Bottled Water / Ice / Tap Water") {

                        var ColiformsControlInfo = MyInstance.GetWaterAnalysisControlInfo("Coliforms");
                        var EcollControlInfo = MyInstance.GetWaterAnalysisControlInfo("Ecoll");                       
                        var PseudomonasControlInfo = MyInstance.GetWaterAnalysisControlInfo("Pseudomonas");

                        if (ColiformsControlInfo != null && EcollControlInfo != null && PseudomonasControlInfo != null) {

                            var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");                           
                            var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");                           
                            var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");                         



                            if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = Message + ColiformsResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (PseudomonasResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + PseudomonasResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                    

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                           
                            }
                            else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {

                                if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || PseudomonasResponse.IsSuccess != true) {
                                    IsSuccess = false;
                                    if (IsAlertMessageEnabled == true) {
                                        Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + PseudomonasResponse.Message;
                                    }
                                }
                            }
                            
                        }
                    }

                        // Coliforms, Ecoll
                    else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "02 Bottled Water") {

                        var ColiformsControlInfo = MyInstance.GetWaterAnalysisControlInfo("Coliforms");
                        var EcollControlInfo = MyInstance.GetWaterAnalysisControlInfo("Ecoll");

                        if (ColiformsControlInfo != null && EcollControlInfo != null) {

                            var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                            var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                            if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = Message + ColiformsResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;
                                       
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }


                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }

                            }
                            else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                                if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                    IsSuccess = false;
                                    if (IsAlertMessageEnabled == true) {
                                        Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + EcollResponse.Message;
                                    }
                                }
                            }
                        }
                    }
                }
            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }

            //alert("IsSuccess : " + IsSuccess);
          
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.FoodAnalysisValidation", Excep);
        }
        finally {
        }
    }

    this.WaterAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";

            var WaterAnalysisSamplingSheetValidationResponse = SampleSheetAndWaterAnalysisCustomValidation();
            var ReasonForAnalysis = oScope["chkAnalysisReason"].GetSelectedValue();
            if (ReasonForAnalysis == undefined) {
                ReasonForAnalysis = "";
            }
            //if (WaterAnalysisSamplingSheetValidationResponse) {
            if (WaterAnalysisSamplingSheetValidationResponse != true) {
                IsSuccess = false;
                //if (IsAlertMessageEnabled == true) {
                //    Message = WaterAnalysisSamplingSheetValidationResponse.Message;
                //}
            }
            //}
            if (IsSuccess == true) {
                if (oScope["AddlCriteriaControlId"].GetSelectedText() == "") {
                    IsSuccess = false;
                    Message = "MN-RQ-CBM-002 :: Please enter Criteria";
                }

                    // Coliforms, Ecoll, Pseudomonas
                else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "01 Bottled Water / Ice / Tap Water") {

                    var ColiformsControlInfo = MyInstance.GetWaterAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = MyInstance.GetWaterAnalysisControlInfo("Ecoll");
                    var PseudomonasControlInfo = MyInstance.GetWaterAnalysisControlInfo("Pseudomonas");

                    /*Optional Start*/
                    var SalmonellaControlInfo = MyInstance.GetWaterAnalysisControlInfo("Salmonella");
                    var TvbControlInfo = MyInstance.GetWaterAnalysisControlInfo("Tvb");
                    var EnterococcusControlInfo = MyInstance.GetWaterAnalysisControlInfo("Enterococcus");
                    /*Optional End*/

                    if (ColiformsControlInfo != null && EcollControlInfo != null && PseudomonasControlInfo != null && SalmonellaControlInfo != null && TvbControlInfo != null && EnterococcusControlInfo != null) {

                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");

                        /*Optional Start*/
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EnterococcusResponse = ValidateFoodAnalysis(oScope, EnterococcusControlInfo, "Enterococcus");
                        /*Optional End*/

                        if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = Message + ColiformsResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (PseudomonasResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + PseudomonasResponse.Message;

                                        /*Optional Start*/
                                        if (SalmonellaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SalmonellaResponse.Message;

                                            if (TvbResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + TvbResponse.Message;

                                                if (EnterococcusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + EnterococcusResponse.Message;

                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                            }


                            if (IsAlertMessageEnabled == true) {
                                //alert(Message);
                            }

                        }
                        else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {

                            if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || PseudomonasResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + PseudomonasResponse.Message;
                                }
                            }
                        }

                    }
                }

                    // Coliforms, Ecoll
                else if (oScope["AddlCriteriaControlId"].GetSelectedText() == "02 Bottled Water") {

                    var ColiformsControlInfo = MyInstance.GetWaterAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = MyInstance.GetWaterAnalysisControlInfo("Ecoll");

                    /*Optional Start*/
                    var PseudomonasControlInfo = MyInstance.GetWaterAnalysisControlInfo("Pseudomonas");
                    var SalmonellaControlInfo = MyInstance.GetWaterAnalysisControlInfo("Salmonella");
                    var TvbControlInfo = MyInstance.GetWaterAnalysisControlInfo("Tvb");
                    var EnterococcusControlInfo = MyInstance.GetWaterAnalysisControlInfo("Enterococcus");
                    /*Optional End*/

                    if (ColiformsControlInfo != null && EcollControlInfo != null && PseudomonasControlInfo != null && SalmonellaControlInfo != null && TvbControlInfo != null && EnterococcusControlInfo != null) {

                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        /*Optional Start*/
                        var PseudomonasResponse = ValidateFoodAnalysis(oScope, PseudomonasControlInfo, "Pseudomonas");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EnterococcusResponse = ValidateFoodAnalysis(oScope, EnterococcusControlInfo, "Enterococcus");
                        /*Optional End*/

                        if (ReasonForAnalysis != "" && ReasonForAnalysis != 116) {

                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = Message + ColiformsResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    /*Optional Start*/
                                    if (PseudomonasResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + PseudomonasResponse.Message;

                                        if (SalmonellaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SalmonellaResponse.Message;

                                            if (TvbResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + TvbResponse.Message;

                                                if (EnterococcusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + EnterococcusResponse.Message;

                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/

                                }
                                else {
                                    IsSuccess = true;
                                }
                            }


                            if (IsAlertMessageEnabled == true) {
                                //alert(Message);
                            }

                        }
                        else if (ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }
            }
            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }

            //alert("IsSuccess : " + IsSuccess +"," + Message);

            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.WaterAnalysisValidation", Excep);
        }
        finally {
        }
    }


    this.FoodAnalysisValidation_17122015 = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";
            var ReasonForAnalysis = oScope['chkAnalysisReason'].GetSelectedValue();

            //alert(oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText());
            var FoodAnalysisSamplingSheetValidationResponse = FoodAnalysisSamplingSheetValidation();
            if (FoodAnalysisSamplingSheetValidationResponse) {
                if (FoodAnalysisSamplingSheetValidationResponse.IsSuccess != true) {
                    IsSuccess = false;
                    if (IsAlertMessageEnabled == true) {
                        Message = FoodAnalysisSamplingSheetValidationResponse.Message;
                    }
                }
            }
            if (IsSuccess == true) {
                if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "") {
                    IsSuccess = false;
                    Message = "MN-RQ-CBM-002 :: Please enter Food Analysis";
                }
                    // Tvb, Salmonella, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "01 Poultry" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "02 Meat") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");



                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }

                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "03 Fish and Shell Fish" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "17 Seafood Dried") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    if (TvbControlInfo != null && VparahaemolyticusControlInfo != null && EcollControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "04 Pasteurized Frozen Whole Egg and Egg Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "04 Pasteurized Frozen Whole Egg and  Egg Products") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (BcereusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + BcereusResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Ecoll, Bcereus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "05 Dried Food to be cooked") {

                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");

                    if (EcollControlInfo != null && BcereusControlInfo != null) {

                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbEcollResponseResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message;

                                if (BcereusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + BcereusResponse.Message;
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message + BcereusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "06 U.H.T. Milk, Cream Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "06 U.H.T. Milk  Cream Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "08 Pasteurized Milk and Cream. Other Pasteurized Milk Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "08 Pasteurized Milk and Cream. Other  Pasteurized Milk Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "13 Processed Cheese" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "32 Jam, Jelly and Marmalade, Fruit in Syrup" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "32 Jam  Jelly and Marmalade  Fruit in Syrup" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "43 Mayonnaise  Mustard Sauces") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }
                    // Tvb, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "19 Dried Heat Processed Foods" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "31 Soft Drinks and Alcoholic Beverages" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "41 Pasteurized Fruit Juices" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "43 Mayonnaise, Mustard Sauces" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "50 Salad Dressings (In House)") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    if (TvbControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (YmcResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + YmcResponse.Message;
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "07 Cream and Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "15 Hard, Semi-Hard Cheese (Un-processed)" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "15 Hard  Semi Hard Cheese  (Un processed)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (SaureusControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "09 Cream with added flavours" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "42 Part Cooked Foods") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "10 Whipped Cream") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "11 Fermented Cream") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (YmcResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + YmcResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }
                    // Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "16 Preserved Food (Heat Treated)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");


                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "12 Ice Cream" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "12 Ice   Cream") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && SaureusControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (SalmonellaResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + SalmonellaResponse.Message;

                                        if (EcollResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + EcollResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Listeria, Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "14 Soft Cheese") {

                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (ListeriaControlInfo != null && SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (ListeriaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + ListeriaResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (ListeriaResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ListeriaResponse.Message + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                // Tvb

                if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "18 Canned, Pouched or Bottled Food" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "18 Canned  Pouched or Bottled Food" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "34 Vinegar") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");

                    if (TvbControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Salmonella, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "20 Dried Heat Processed Foods (Ready to Eat after Rehydration)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (SaureusControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null && ColiformsControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (BcereusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + BcereusResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "21 Dried Raw Foods (Ready to Eat)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    if (TvbControlInfo != null && EcollControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "22 Non-Dairy Fats & Oils" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "22 Non Dairy Fats & Oils" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "23 Different Types of Chocolates") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (SalmonellaControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "25 Molasses, Hard Brown Sugar" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "25 Molasses  Hard Brown Sugar") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    if (SalmonellaControlInfo != null && EcollControlInfo != null && YmcControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (YmcResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + YmcResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "26 Dyes (Food Colours)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");

                    if (TvbControlInfo != null && SalmonellaControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Bcereus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "27 Yeast") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");

                    if (SalmonellaControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (BcereusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + BcereusResponse.Message;
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Clostridium
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "28 Gelatin") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");

                    if (TvbControlInfo != null && SaureusControlInfo != null && SalmonellaControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (ClostridiumResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ClostridiumResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || ClostridiumResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + ClostridiumResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "30 Tea & Coffee") {

                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    if (ColiformsControlInfo != null && YmcControlInfo != null) {

                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message;

                                if (YmcResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + YmcResponse.Message;

                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "33 Starch – i.e. Corn Flour" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "33 Starch   i.e. Corn Flour" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "49 Sauce (In House)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (BcereusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + BcereusResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "35 Bread" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "36 Bottled Water / Ice / Tap Water" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "36 Bottled Water   Ice   Tap Water" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "37 Bottled Water") {

                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (EcollControlInfo != null && ColiformsControlInfo != null) {

                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (EcollResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message;

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + ColiformsResponse.Message;

                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "38 Unsanitized Vegetables/Fruits/Salads" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "38 Unsanitized Vegetables Fruits Salads") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");

                    if (SalmonellaControlInfo != null && EcollControlInfo != null && ListeriaControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ListeriaResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ListeriaResponse.Message;

                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "39 Sanitized Vegetables") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");


                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ListeriaControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ListeriaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ListeriaResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "40 Sanitized Fruit and Fruit Juices") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");


                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ListeriaControlInfo != null && YmcControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ListeriaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ListeriaResponse.Message;

                                            if (YmcResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + YmcResponse.Message;

                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "44 Cooked Sea Food") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    if (TvbControlInfo != null && VparahaemolyticusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "45 Caviar") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    if (TvbControlInfo != null && VparahaemolyticusControlInfo != null && EcollControlInfo != null && SaureusControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Coliforms, Ecoll, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "46 Cooked Poultry and Poultry Products" && oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "48 Desserts") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    if (TvbControlInfo != null && ColiformsControlInfo != null && EcollControlInfo != null && SaureusControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + ColiformsResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Bcereus, Coliforms, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods :- (Ready to Eat)" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods :  (Ready to Eat)") {
                    /**************Change request 5 Oct 15 For the criteria 47 – Bacillus is not mandatory  ***********/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    //var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    //if (TvbControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null && ColiformsControlInfo != null && SaureusControlInfo != null) {
                    if (TvbControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && SaureusControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        //var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    //if (BcereusResponse.IsSuccess == false) {
                                    //    IsSuccess = false;
                                    //    Message = " " + BcereusResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    //}
                                    //else {
                                    //    IsSuccess = true;
                                    //}
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            //if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    //Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message + SaureusResponse.Message;
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "24 Honey" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "29 Margarine") {

                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");


                    if (YmcControlInfo != null) {

                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (YmcResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + YmcResponse.Message;

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }
            }

            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }

           // alert("IsSuccess : " + IsSuccess);
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.FoodAnalysisValidation", Excep);
        }
        finally {
        }
    }

    this.FoodAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = true;
            var Message = "";
            var ReasonForAnalysis = oScope['chkAnalysisReason'].GetSelectedValue();

            //alert(oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText());
            var FoodAnalysisSamplingSheetValidationResponse = FoodAnalysisSamplingSheetValidation();
            if (FoodAnalysisSamplingSheetValidationResponse) {
                if (FoodAnalysisSamplingSheetValidationResponse.IsSuccess != true) {
                    IsSuccess = false;
                    if (IsAlertMessageEnabled == true) {
                        Message = FoodAnalysisSamplingSheetValidationResponse.Message;
                    }
                }
            }
            if (IsSuccess == true) {
                if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "") {
                    IsSuccess = false;
                    Message = "MN-RQ-CBM-002 :: Please enter Food Analysis";
                }
                    // Tvb, Salmonella, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "01 Poultry" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "02 Meat") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    /*Optional Start*/
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null &&
                        ColiformsControlInfo != null && SaureusControlInfo != null && BcereusControlInfo != null
                        && VparahaemolyticusControlInfo != null && ListeriaControlInfo != null && ClostridiumControlInfo != null
                        && YmcControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        /*Optional Start*/
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/


                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        /*Optional Start*/

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (VparahaemolyticusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + VparahaemolyticusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }

                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }

                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "03 Fish and Shell Fish" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "17 Seafood Dried") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    /*Optional Start*/
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (TvbControlInfo != null && VparahaemolyticusControlInfo != null && EcollControlInfo != null
                        && ColiformsControlInfo != null && SaureusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                         && ListeriaControlInfo != null && ClostridiumControlInfo != null && YmcControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        /*Optional Start*/
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;
                                        
                                        /*Optional Start*/
                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "04 Pasteurized Frozen Whole Egg and Egg Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "04 Pasteurized Frozen Whole Egg and  Egg Products") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (BcereusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + BcereusResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                /*Optional Start*/
                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (SaureusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SaureusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                                /*Optional End*/
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Ecoll, Bcereus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "05 Dried Food to be cooked") {

                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/
                                        

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        
                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (EcollResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message;
                                                               
                                if (BcereusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + BcereusResponse.Message;

                                    /*Optional Start*/
                                    if (TvbResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + TvbResponse.Message;

                                        if (VparahaemolyticusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + VparahaemolyticusResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                                                        
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message + BcereusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "06 U.H.T. Milk, Cream Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "06 U.H.T. Milk  Cream Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "08 Pasteurized Milk and Cream. Other Pasteurized Milk Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "08 Pasteurized Milk and Cream. Other  Pasteurized Milk Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "13 Processed Cheese" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "32 Jam, Jelly and Marmalade, Fruit in Syrup" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "32 Jam  Jelly and Marmalade  Fruit in Syrup" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "43 Mayonnaise  Mustard Sauces") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        /*Optional Start*/
                                        if (VparahaemolyticusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + VparahaemolyticusResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }
                    // Tvb, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "19 Dried Heat Processed Foods" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "31 Soft Drinks and Alcoholic Beverages" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "41 Pasteurized Fruit Juices" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "43 Mayonnaise, Mustard Sauces" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "50 Salad Dressings (In House)") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (YmcResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + YmcResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "07 Cream and Dairy Products" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "15 Hard, Semi-Hard Cheese (Un-processed)" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "15 Hard  Semi Hard Cheese  (Un processed)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (TvbResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + TvbResponse.Message;

                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Ecoll, Coliforms

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "09 Cream with added flavours" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "42 Part Cooked Foods") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (BcereusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + BcereusResponse.Message;

                                                if (SalmonellaResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SalmonellaResponse.Message;

                                                    if (ListeriaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + ListeriaResponse.Message;

                                                        if (ClostridiumResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ClostridiumResponse.Message;

                                                            if (YmcResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + YmcResponse.Message;

                                                                if (CampylobacterResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + CampylobacterResponse.Message;
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "10 Whipped Cream") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (TvbControlInfo != null && SalmonellaControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;
                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "11 Fermented Cream") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (YmcResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + YmcResponse.Message;

                                            /*Optional Start*/
                                            if (TvbResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + TvbResponse.Message;

                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }

                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }

                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }

                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }

                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }
                    // Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "16 Preserved Food (Heat Treated)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        /*Optional Start*/
                                        if (TvbResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + TvbResponse.Message;

                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "12 Ice Cream" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "12 Ice   Cream") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        
                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (SalmonellaResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + SalmonellaResponse.Message;

                                        if (EcollResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + EcollResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                /*Optional Start*/
                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                                /*Optional End*/
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Listeria, Saureus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "14 Soft Cheese") {

                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (ListeriaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + ListeriaResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (TvbResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + TvbResponse.Message;

                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (ListeriaResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ListeriaResponse.Message + SaureusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                // Tvb

                if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "18 Canned, Pouched or Bottled Food" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "18 Canned  Pouched or Bottled Food" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "34 Vinegar") {


                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                /*Optional Start*/
                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                /*Optional End*/

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Saureus, Salmonella, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "20 Dried Heat Processed Foods (Ready to Eat after Rehydration)") {

                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SaureusResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (BcereusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + BcereusResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                /*Optional Start*/
                                                if (TvbResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + TvbResponse.Message;

                                                    if (VparahaemolyticusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + VparahaemolyticusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                                /*Optional End*/
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SaureusResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SaureusResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "21 Dried Raw Foods (Ready to Eat)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    /*Optional Start*/
                                    if (VparahaemolyticusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + VparahaemolyticusResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "22 Non-Dairy Fats & Oils" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "22 Non Dairy Fats & Oils" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "23 Different Types of Chocolates") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        /*Optional Start*/
                                        if (TvbResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + TvbResponse.Message;

                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "25 Molasses, Hard Brown Sugar" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "25 Molasses  Hard Brown Sugar") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (YmcResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + YmcResponse.Message;

                                        /*Optional Start*/
                                        if (TvbResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + TvbResponse.Message;

                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (ColiformsResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + ColiformsResponse.Message;

                                                    if (SaureusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SaureusResponse.Message;

                                                        if (BcereusResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + BcereusResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "26 Dyes (Food Colours)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");                        
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    /*Optional Start*/
                                    if (VparahaemolyticusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + VparahaemolyticusResponse.Message;

                                        if (EcollResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + EcollResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Bcereus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "27 Yeast") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    
                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        
                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (BcereusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + BcereusResponse.Message;

                                        /*Optional Start*/
                                        if (TvbResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + TvbResponse.Message;

                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (ColiformsResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + ColiformsResponse.Message;

                                                    if (SaureusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SaureusResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + BcereusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Saureus, Clostridium
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "28 Gelatin") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SaureusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SaureusResponse.Message;

                                    if (ClostridiumResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ClostridiumResponse.Message;

                                        /*Optional Start*/
                                        if (VparahaemolyticusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + VparahaemolyticusResponse.Message;

                                            if (EcollResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + EcollResponse.Message;

                                                if (ColiformsResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + ColiformsResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SaureusResponse.IsSuccess != true || ClostridiumResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SaureusResponse.Message + ClostridiumResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "30 Tea & Coffee") {

                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (ColiformsResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message;

                                if (YmcResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + YmcResponse.Message;

                                    /*Optional Start*/
                                    if (TvbResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + TvbResponse.Message;

                                        if (VparahaemolyticusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + VparahaemolyticusResponse.Message;

                                            if (EcollResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + EcollResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (ColiformsResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + ColiformsResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Bcereus, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "33 Starch � i.e. Corn Flour" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "33 Starch   i.e. Corn Flour" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "49 Sauce (In House)") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (BcereusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + BcereusResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "35 Bread" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "36 Bottled Water / Ice / Tap Water" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "36 Bottled Water   Ice   Tap Water" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "37 Bottled Water") {

                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (EcollResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message;

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + ColiformsResponse.Message;

                                    /*Optional Start*/
                                    if (TvbResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + TvbResponse.Message;

                                        if (VparahaemolyticusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + VparahaemolyticusResponse.Message;

                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    /*Optional End*/
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "38 Unsanitized Vegetables/Fruits/Salads" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "38 Unsanitized Vegetables Fruits Salads") {

                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    
                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (SalmonellaResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    if (ListeriaResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ListeriaResponse.Message;

                                        /*Optional Start*/
                                        if (TvbResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + TvbResponse.Message;

                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (ColiformsResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + ColiformsResponse.Message;

                                                    if (SaureusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SaureusResponse.Message;

                                                        if (BcereusResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + BcereusResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                        /*Optional End*/
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "39 Sanitized Vegetables") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ListeriaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ListeriaResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (ColiformsResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + ColiformsResponse.Message;

                                                    if (SaureusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SaureusResponse.Message;

                                                        if (BcereusResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + BcereusResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Salmonella, Ecoll, Listeria
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "40 Sanitized Fruit and Fruit Juices") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/


                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (SalmonellaResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + SalmonellaResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ListeriaResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ListeriaResponse.Message;

                                            if (YmcResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + YmcResponse.Message;

                                                /*Optional Start*/
                                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + VparahaemolyticusResponse.Message;

                                                    if (ColiformsResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + ColiformsResponse.Message;

                                                        if (SaureusResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SaureusResponse.Message;

                                                            if (BcereusResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + BcereusResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                                /*Optional End*/
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || SalmonellaResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ListeriaResponse.IsSuccess != true || YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message + ListeriaResponse.Message + YmcResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll, Coliforms
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "44 Cooked Sea Food") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");

                    /*Optional Start*/
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");

                        /*Optional Start*/
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (ColiformsResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + ColiformsResponse.Message;

                                            /*Optional Start*/
                                            if (SaureusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + SaureusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message + ColiformsResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Vparahaemolyticus, Ecoll, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "45 Caviar") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    /*Optional Start*/
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        /*Optional Start*/
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (VparahaemolyticusResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + VparahaemolyticusResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                            /*Optional Start*/
                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || VparahaemolyticusResponse.IsSuccess != true || EcollResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + VparahaemolyticusResponse.Message + EcollResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Coliforms, Ecoll, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "46 Cooked Poultry and Poultry Products" && oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "48 Desserts") {

                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (ColiformsResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + ColiformsResponse.Message;

                                    if (EcollResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + EcollResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (TvbResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || EcollResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + ColiformsResponse.Message + EcollResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                    // Tvb, Ecoll, Bcereus, Coliforms, Saureus
                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods :- (Ready to Eat)" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "47 Processed Foods :  (Ready to Eat)") {
                    /**************Change request 5 Oct 15 For the criteria 47 � Bacillus is not mandatory  ***********/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    //var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");

                    /*Optional Start*/
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    //if (TvbControlInfo != null && EcollControlInfo != null && BcereusControlInfo != null && ColiformsControlInfo != null && SaureusControlInfo != null) {
                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        //var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");

                        /*Optional Start*/
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (TvbResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message;

                                if (EcollResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + EcollResponse.Message;

                                    //if (BcereusResponse.IsSuccess == false) {
                                    //    IsSuccess = false;
                                    //    Message = " " + BcereusResponse.Message;

                                    if (ColiformsResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + ColiformsResponse.Message;

                                        if (SaureusResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + SaureusResponse.Message;

                                            /*Optional Start*/
                                            if (VparahaemolyticusResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + VparahaemolyticusResponse.Message;

                                                if (BcereusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + BcereusResponse.Message;

                                                    if (SalmonellaResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + SalmonellaResponse.Message;

                                                        if (ListeriaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + ListeriaResponse.Message;

                                                            if (ClostridiumResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ClostridiumResponse.Message;

                                                                if (YmcResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + YmcResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                            /*Optional End*/
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                    //}
                                    //else {
                                    //    IsSuccess = true;
                                    //}
                                }
                                else {
                                    IsSuccess = true;
                                }
                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            //if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || BcereusResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                            if (TvbResponse.IsSuccess != true || EcollResponse.IsSuccess != true || ColiformsResponse.IsSuccess != true || SaureusResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    //Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + BcereusResponse.Message + ColiformsResponse.Message + SaureusResponse.Message;
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + EcollResponse.Message + ColiformsResponse.Message + SaureusResponse.Message;
                                }
                            }
                        }
                    }
                }

                else if (oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "24 Honey" || oScope["AddlFoodAnalysisTypeControlId"].GetSelectedText() == "29 Margarine") {

                    var YmcControlInfo = GetFoodAnalysisControlInfo("Ymc");

                    /*Optional Start*/
                    var TvbControlInfo = GetFoodAnalysisControlInfo("Tvb");
                    var VparahaemolyticusControlInfo = GetFoodAnalysisControlInfo("Vparahaemolyticus");
                    var EcollControlInfo = GetFoodAnalysisControlInfo("Ecoll");
                    var ColiformsControlInfo = GetFoodAnalysisControlInfo("Coliforms");
                    var SaureusControlInfo = GetFoodAnalysisControlInfo("Saureus");
                    var BcereusControlInfo = GetFoodAnalysisControlInfo("Bcereus");
                    var SalmonellaControlInfo = GetFoodAnalysisControlInfo("Salmonella");
                    var ListeriaControlInfo = GetFoodAnalysisControlInfo("Listeria");
                    var ClostridiumControlInfo = GetFoodAnalysisControlInfo("Clostridium");
                    var CampylobacterControlInfo = GetFoodAnalysisControlInfo("Campylobacter");
                    /*Optional End*/

                    if (SaureusControlInfo != null && EcollControlInfo != null && ColiformsControlInfo != null && YmcControlInfo != null
                        && TvbControlInfo != null && VparahaemolyticusControlInfo != null && BcereusControlInfo != null && SalmonellaControlInfo != null
                        && ListeriaControlInfo != null && ClostridiumControlInfo != null && CampylobacterControlInfo != null) {

                        var YmcResponse = ValidateFoodAnalysis(oScope, YmcControlInfo, "Ymc");

                        /*Optional Start*/
                        var TvbResponse = ValidateFoodAnalysis(oScope, TvbControlInfo, "Tvb");
                        var VparahaemolyticusResponse = ValidateFoodAnalysis(oScope, VparahaemolyticusControlInfo, "Vparahaemolyticus");
                        var EcollResponse = ValidateFoodAnalysis(oScope, EcollControlInfo, "Ecoll");
                        var ColiformsResponse = ValidateFoodAnalysis(oScope, ColiformsControlInfo, "Coliforms");
                        var SaureusResponse = ValidateFoodAnalysis(oScope, SaureusControlInfo, "Saureus");
                        var BcereusResponse = ValidateFoodAnalysis(oScope, BcereusControlInfo, "Bcereus");
                        var SalmonellaResponse = ValidateFoodAnalysis(oScope, SalmonellaControlInfo, "Salmonella");
                        var ListeriaResponse = ValidateFoodAnalysis(oScope, ListeriaControlInfo, "Listeria");
                        var ClostridiumResponse = ValidateFoodAnalysis(oScope, ClostridiumControlInfo, "Clostridium");
                        var CampylobacterResponse = ValidateFoodAnalysis(oScope, CampylobacterControlInfo, "Campylobacter");
                        /*Optional End*/

                        if (ReasonForAnalysis != undefined && ReasonForAnalysis != "" && ReasonForAnalysis != 116) {
                            if (YmcResponse.IsSuccess == false) {
                                IsSuccess = false;
                                Message = "MN-RQ-CBM-002 :: Please enter " + YmcResponse.Message;

                                /*Optional Start*/
                                if (TvbResponse.IsSuccess == false) {
                                    IsSuccess = false;
                                    Message = " " + TvbResponse.Message;

                                    if (VparahaemolyticusResponse.IsSuccess == false) {
                                        IsSuccess = false;
                                        Message = " " + VparahaemolyticusResponse.Message;

                                        if (EcollResponse.IsSuccess == false) {
                                            IsSuccess = false;
                                            Message = " " + EcollResponse.Message;

                                            if (ColiformsResponse.IsSuccess == false) {
                                                IsSuccess = false;
                                                Message = " " + ColiformsResponse.Message;

                                                if (SaureusResponse.IsSuccess == false) {
                                                    IsSuccess = false;
                                                    Message = " " + SaureusResponse.Message;

                                                    if (BcereusResponse.IsSuccess == false) {
                                                        IsSuccess = false;
                                                        Message = " " + BcereusResponse.Message;

                                                        if (SalmonellaResponse.IsSuccess == false) {
                                                            IsSuccess = false;
                                                            Message = " " + SalmonellaResponse.Message;

                                                            if (ListeriaResponse.IsSuccess == false) {
                                                                IsSuccess = false;
                                                                Message = " " + ListeriaResponse.Message;

                                                                if (ClostridiumResponse.IsSuccess == false) {
                                                                    IsSuccess = false;
                                                                    Message = " " + ClostridiumResponse.Message;

                                                                    if (CampylobacterResponse.IsSuccess == false) {
                                                                        IsSuccess = false;
                                                                        Message = " " + CampylobacterResponse.Message;

                                                                    }
                                                                    else {
                                                                        IsSuccess = true;
                                                                    }
                                                                }
                                                                else {
                                                                    IsSuccess = true;
                                                                }
                                                            }
                                                            else {
                                                                IsSuccess = true;
                                                            }
                                                        }
                                                        else {
                                                            IsSuccess = true;
                                                        }
                                                    }
                                                    else {
                                                        IsSuccess = true;
                                                    }
                                                }
                                                else {
                                                    IsSuccess = true;
                                                }
                                            }
                                            else {
                                                IsSuccess = true;
                                            }
                                        }
                                        else {
                                            IsSuccess = true;
                                        }
                                    }
                                    else {
                                        IsSuccess = true;
                                    }
                                }
                                else {
                                    IsSuccess = true;
                                }
                                /*Optional End*/

                                if (IsAlertMessageEnabled == true) {
                                    //alert(Message);
                                }
                            }
                            else {
                                IsSuccess = true;
                            }
                        }
                        else if (ReasonForAnalysis == undefined || ReasonForAnalysis == "" || ReasonForAnalysis == 116) {
                            if (YmcResponse.IsSuccess != true) {
                                IsSuccess = false;
                                if (IsAlertMessageEnabled == true) {
                                    Message = "MN-RQ-CBM-002 :: Please enter " + TvbResponse.Message + SalmonellaResponse.Message + EcollResponse.Message;
                                }
                            }
                        }
                    }
                }
            }

            if (IsAlertMessageEnabled == true) {
                Message = Message.substring(0, Message.length - 1);
                alert(Message);
            }

            //alert("IsSuccess : " + IsSuccess + Message);
            return IsSuccess;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.FoodAnalysisValidation", Excep);
        }
        finally {
        }
    }

    var ValidateFoodAnalysis = function (oScope, ControlInfo, MessagePrefix) {

        try {
            var IsValidationsuccess = true;
            var Message = "";

            for (var i = 0; i < ControlInfo.length; i++) {

                if (ControlInfo[i].Type == "TEXTBOX") {
                    if (oScope.NewDCModel[ControlInfo[i].ControlId] == undefined || oScope.NewDCModel[ControlInfo[i].ControlId] == "") {
                        Message += (MessagePrefix != undefined && MessagePrefix != "") ? MessagePrefix + "-" + ControlInfo[i].MessageKey + "," : ControlInfo[i].MessageKey + ",";
                        IsValidationsuccess = false;
                    }
                }
                else if (ControlInfo[i].Type == "DDL" || ControlInfo[i].Type == "Band") {
                    if (oScope[ControlInfo[i].ControlId] != undefined && (oScope[ControlInfo[i].ControlId].GetSelectedText() == undefined || oScope[ControlInfo[i].ControlId].GetSelectedText() == "")) {
                        Message += (MessagePrefix != undefined && MessagePrefix != "") ? MessagePrefix + "-" + ControlInfo[i].MessageKey + "," : ControlInfo[i].MessageKey + ",";
                        IsValidationsuccess = false;
                    }
                }
            }

            return { "IsSuccess": IsValidationsuccess, "Message": Message }
        }
        catch (Excep) {        
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.ValidateFoodAnalysis", Excep);
        }
        finally {
        }
    }

    var GetFoodAnalysisControlInfo = function (Type) {

        try {        
            var ControlInfo = null;
            
            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed1ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp1ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed1ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                     { "ControlId": "txtEquipmentUsed1ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst1ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond1ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest1ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult1ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Salmonella") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed7ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp7ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed7ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed7ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst7ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond7ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest7ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult7ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation7ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "AddlPresumptiveResult3ControlId", "MessageKey": "PresumptiveResult", 'Type': 'DDL' },
                ];
            }
            else if (Type == "Ecoll") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed3ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp3ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed3ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed3ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },                 
                    //{ "ControlId": "txtColonyCountDilutionFirst3ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond3ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest3ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult3ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "AddlPresumptiveResult1ControlId", "MessageKey": "PresumptiveResult", 'Type': 'DDL' },
                ];
            }
            else if (Type == "Coliforms") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed2ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp2ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed2ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed2ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst2ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond2ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest2ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult2ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Saureus") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed4ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp4ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed4ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed4ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst4ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond4ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest4ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult4ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Bcereus") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed5ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp5ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed5ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed5ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst5ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond5ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest5ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult5ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Vparahaemolyticus") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed6ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp6ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed6ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed6ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst6ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond6ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest6ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtResult6ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult6ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation6ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "AddlPresumptiveResult2ControlId", "MessageKey": "PresumptiveResult", 'Type': 'DDL' },
                ];
            }
            else if (Type == "Listeria") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed8ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp8ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed8ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed8ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst8ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond8ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest8ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult8ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation8ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "AddlPresumptiveResult4ControlId", "MessageKey": "PresumptiveResult", 'Type': 'DDL' },
                ];
            }
            else if (Type == "Clostridium") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed9ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp9ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed9ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed9ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst9ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond9ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest9ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult9ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation9ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Ymc") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed10ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp10ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed10ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed10ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst10ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond10ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest10ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult10ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation10ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Campylobacter") {

                ControlInfo = [
                    { "ControlId": "txtMediaUsed11ControlId", "MessageKey": "MediaUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtIncubationTimeTemp11ControlId", "MessageKey": "IncubationTimeTemp", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtEquipmentUsed11ControlId", "MessageKey": "EquipmentUsed", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtEquipmentUsed11ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst11ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond11ControlId", "MessageKey": "ColonyCountDilution2", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtConfirmationTest11ControlId", "MessageKey": "ConfirmationTest", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult11ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation11ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "AddlPresumptiveResult5ControlId", "MessageKey": "PresumptiveResult", 'Type': 'DDL' },
                ];
            }

            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetFoodAnalysisControlInfo = function (Type) {

        try {                    
            return GetFoodAnalysisControlInfo(Type);
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {        
        }
    }

    var GetLaminarAirFlowControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {
                ControlInfo = [
                    { "ControlId": "txtColonyCountControlId", "MessageKey": "ColonyCount", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluationControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "txtResultControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' }                    
                ];
            }
            else if (Type == "Ymc") {
                ControlInfo = [
                    { "ControlId": "txtColonyCount2ControlId", "MessageKey": "ColonyCount", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' },
                    { "ControlId": "txtResult2ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' }
                ];
            }

            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetLaminarAirFlowControlInfo = function (Type) {

        try {
            return GetLaminarAirFlowControlInfo(Type);
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetLaminarAirFlowControlInfo", Excep);
        }
        finally {
        }
    }

    var FoodAnalysisSamplingSheetValidation = function () {
        try {
            var IsSuccess = true;


            var CommonMessage = "";
            var ErrorMessage = "";


            var IsSuccess = true;


            if (scope.NewDCModel.txtSamplingNoControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample No.";
                IsSuccess = false;
            }
            if (scope.txtSamplingMethodControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Method";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtSamplingPlanRefControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Plan Ref.";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtSamplingDescriptionControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sample Description";
                IsSuccess = false;
            }
            if (scope.NewDCModel.DTDateOfCollectionControlId == "" || scope.NewDCModel.DTDateOfCollectionControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date Of Collection";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.DTDateOfPreparationControlId == "" || scope.NewDCModel.DTDateOfPreparationControlId == null) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Date Of Preparation";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.txtSampleLocationControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Location";
            //    IsSuccess = false;
            //}
            //if (scope.AddlSectorControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Sector";
            //    IsSuccess = false;
            //}
            //if (scope.AddlAirlineControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Airline";
            //    IsSuccess = false;
            //}
            //if (scope.AddlClassControlId.GetSelectedText() == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Class";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.ATSampleCollectionTempControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Collection Temp";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.DTSampleCollectionTimeControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Sample Collection Time";
            //    IsSuccess = false;
            //}
            if (scope.NewDCModel.ATAmbientTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Temp";
                IsSuccess = false;
            }
            if (document.getElementById('DTAmbientTimeControlId').value == "" || document.getElementById('DTAmbientTimeControlId').value == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Ambient Time";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && scope.NewDCModel.ATLabChillerTempControlId === "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Temp";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && (document.getElementById('DTLabChillerTimeControlId').value == "" || document.getElementById('DTLabChillerTimeControlId').value == null)) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Storage in Lab Chiller Time";
                IsSuccess = false;
            }
            if (scope.AddlSamplingToolsControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Tools";
                IsSuccess = false;
            }
            if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Condition of area";
                IsSuccess = false;
            }
            else if (scope["chkConditionOfAreaOnSampling"].GetSelectedValue() == 254 && scope.AddlAreaConditionUnsatisfactoryControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Area condition";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtCollectedByControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Collected By";
                IsSuccess = false;
            }

            if (scope["chkNAControlId"].GetSelectedText() == "" && scope["chkConditionOfSampleOnReceipt"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Condition of sample";
                IsSuccess = false;
            }
            else if (scope["chkNAControlId"].GetSelectedText() == "" && scope["chkConditionOfSampleOnReceipt"].GetSelectedValue() == 254 && scope.AddlSampleConditionUnsatisfactoryControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Condition";
                IsSuccess = false;
            }
            if (scope["chkNAControlId"].GetSelectedText() == "" && scope.NewDCModel.txtVerifiedByControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Verified By";
                IsSuccess = false;
            }
            //if (scope.NewDCModel.txtUponReceiptRemarksControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Upon Receipt Remarks";
            //    IsSuccess = false;
            //}
            if (scope["chkConditionOfSampleAnalysis"].GetSelectedValue() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Condition of sample";
                IsSuccess = false;
            }
            else if (scope["chkConditionOfSampleAnalysis"].GetSelectedValue() == 254 && scope.AddlSampleAnalysisUnsatisfactoryControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Sampling Analysis";
                IsSuccess = false;
            }
            if (scope.NewDCModel.txtAnalysisVerifiedByControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Verified By";
                IsSuccess = false;
            }
            //if (scope["chkNAControlId"].GetSelectedText() == "" && (scope.NewDCModel.DTDateofReceiptControlId == "" || scope.NewDCModel.DTDateofReceiptControlId == null)) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Date of Receipt";
            //    IsSuccess = false;
            //}
            //if (scope.NewDCModel.ATReceivingTemperatureControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Receiving Temperature";
            //    IsSuccess = false;
            //}
            //if (document.getElementById('DTTimeofReceiptControlId').value == "" || document.getElementById('DTTimeofReceiptControlId').value == null) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Time of Receipt";
            //    IsSuccess = false;
            //}
            if (scope.NewDCModel.txtTransportOfSample == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Transport Of Sample";
                IsSuccess = false;
            }
            if (scope.NewDCModel.DTAnalysisDateControlId == "" || scope.NewDCModel.DTAnalysisDateControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Date";
                IsSuccess = false;
            }
            if (scope.NewDCModel.DTAnalysisCompletionDateControlId == "" || scope.NewDCModel.DTAnalysisDateControlId == null) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Analysis Completion Date";
                IsSuccess = false;
            }
           
            if (scope.AddlOverAllEvaluationControlId.GetSelectedText() == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            //alert("DTDateofReceiptControlId : " + scope.NewDCModel.DTDateofReceiptControlId + " ATReceivingTemperatureControlId : " + scope.NewDCModel.ATReceivingTemperatureControlId + " txtTransportOfSample : " + scope.NewDCModel.txtTransportOfSample + " DTTimeofReceiptControlId : " + document.getElementById('DTTimeofReceiptControlId').value)
            //if (scope['chkFoodReceivedType'].GetSelectedValue() == 139 || scope['chkFoodReceivedType'].GetSelectedValue() == 141) {                   
            //    if (scope.NewDCModel.txtSampleLocationControlId == "") {
            //        if (ErrorMessage != "") {
            //            ErrorMessage = ErrorMessage + ",";
            //        }
            //        ErrorMessage = ErrorMessage + "Sampling Location";
            //        IsSuccess = false;
            //    }
            //}
            //else if (scope['chkFoodReceivedType'].GetSelectedValue() == 140) {                    
            //    if (scope.NewDCModel.txtCustomerNameControlId == "") {
            //        if (ErrorMessage != "") {
            //            ErrorMessage = ErrorMessage + ",";
            //        }
            //        ErrorMessage = ErrorMessage + "Customer Name";
            //        IsSuccess = false;
            //    }
            //}
            //

            //if (IsSuccess == false) {
                //alert(CommonMessage + " " + ErrorMessage);
            //}
            // return IsSuccess;
            //alert(IsSuccess + ", Message : " + CommonMessage + " " + ErrorMessage);
            return { "IsSuccess": IsSuccess, "Message": ErrorMessage }

        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "SamplingSheetAndFoodAnalysisController.ShowFoodAnalysisValidation", xlatService);
        }
    }
  
    this.CheckCompletedStatusForParameterTested = function (ControlInfo, BandDetailId) {

        try {
            OneViewConsole.Debug("CheckCompletedStatusForParameterTested Start", "DataCaptureBO.CheckCompletedStatusForParameterTested");

            UpdateCompledStatusForParameterTested(IsAllCompletedForParameterTested(ControlInfo), BandDetailId);

            OneViewConsole.Debug("CheckCompletedStatusForParameterTested End", "DataCaptureBO.CheckCompletedStatusForParameterTested");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    var IsAllCompletedForParameterTested = function (ControlInfo) {

        try {
            OneViewConsole.Debug("IsAllCompletedForParameterTested Start", "DataCaptureBO.IsAllCompletedForParameterTested");

            var IsCompleted = true;
           
            for (var i = 0; i < ControlInfo.length; i++) {

                if (ControlInfo[i].Type == "TEXTBOX") {
                    if (oScope.NewDCModel[ControlInfo[i].ControlId] == undefined || oScope.NewDCModel[ControlInfo[i].ControlId] == "") {
                        IsCompleted = false;
                        //alert("ControlId : " + ControlInfo[i].ControlId + ", IsCompleted : " + IsCompleted);
                        break;
                    }
                }
                else if (ControlInfo[i].Type == "DDL" || ControlInfo[i].Type == "Band") {
                    if (oScope[ControlInfo[i].ControlId] == undefined || (oScope[ControlInfo[i].ControlId] != undefined && oScope[ControlInfo[i].ControlId].GetSelectedText() == "")) {
                        IsCompleted = false;
                        //alert("ControlId : " + ControlInfo[i].ControlId + ", IsCompleted : " + IsCompleted);
                        break;
                    }
                }
                //alert("ControlId : " + ControlInfo[i].ControlId + ", IsCompleted : " + IsCompleted);
            }
            // alert("ControlInfo : " + ControlInfo.length + " IsCompleted " + IsCompleted);
            //alert(" IsCompleted " + IsCompleted + ', ControlInfo : + ' + JSON.stringify(ControlInfo))

            OneViewConsole.Debug("IsAllCompletedForParameterTested End", "DataCaptureBO.IsAllCompletedForParameterTested");

            return IsCompleted;            
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IsAllCompletedForParameterTested", Excep);
        }
        finally {
        }
    }

    var UpdateCompledStatusForParameterTested = function (IsAllCompleted, Id) {

        try {
            OneViewConsole.Debug("UpdateCompledStatusForParameterTested Start", "DataCaptureBO.UpdateCompledStatusForParameterTested");

            var _oDOM = new DOM();
            var ClassName = 'completed';

           // alert(Id + " : "+IsAllCompleted);

            if (IsAllCompleted == true) {
                _oDOM.AddClass(Id, ClassName);
            }
            else {
                _oDOM.RemoveClass(Id, ClassName);
            }

            OneViewConsole.Debug("UpdateCompledStatusForParameterTested End", "DataCaptureBO.UpdateCompledStatusForParameterTested");
        }
        catch (Excep) {
            alert('Excep' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateCompledStatusForParameterTested", Excep);
        }
        finally {
        }
    }

    this.GetWaterAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed1ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst1ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond1ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor1ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult1ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }
            else if (Type == "Coliforms") {

                ControlInfo = [
                   { "ControlId": "txtEquipmentUsed2ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst2ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond2ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor2ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult2ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }
            else if (Type == "Ecoll") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed3ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst3ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond3ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor3ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult3ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }
            else if (Type == "Pseudomonas") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed4ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst4ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond4ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor4ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult4ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }
           
            else if (Type == "Enterococcus") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed5ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst5ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond5ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor5ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult5ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }
            else if (Type == "Salmonella") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed6ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst6ControlId", "MessageKey": "ColonyCountDilution1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond6ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor6ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult6ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation6ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ]
            }

            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetWaterAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetIcAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed1ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst1ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond1ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor1ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult1ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Coliforms") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed2ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst2ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond2ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor2ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult2ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Ecoll") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed3ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst3ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond3ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor3ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult3ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Pseudomonas") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed4ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst4ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'DDL' },
                   // { "ControlId": "txtColonyCountDilutionSecond4ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor4ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult4ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Enterococcus") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed5ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    { "ControlId": "txtColonyCountDilutionFirst5ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionSecond1ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' }, // Configuration is wrong 'ControlId' should be txtColonyCountDilutionSecond5ControlId
                    //{ "ControlId": "txtFactor5ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult5ControlId", "MessageKey": "Result", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Salmonella") {

                ControlInfo = [
                    { "ControlId": "txtEquipmentUsed6ControlId", "MessageKey": "EquipmentUsed", 'Type': 'DDL' },
                    //{ "ControlId": "txtColonyCountDilutionFirst6ControlId", "MessageKey": "ColonyCountDilution", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtColonyCountDilutionSecond6ControlId", "MessageKey": "Factor1", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "txtFactor6ControlId", "MessageKey": "Factor2", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtResult6ControlId", "MessageKey": "Result", 'Type': 'Band' },
                    { "ControlId": "AddlEvaluation6ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }


            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetAirAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtActualValue1ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Coliforms") {

                ControlInfo = [
                   { "ControlId": "txtActualValue2ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "YeasAndMould") {

                ControlInfo = [
                    { "ControlId": "txtActualValue3ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            
            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetHandSwabAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Staph") {

                ControlInfo = [
                    { "ControlId": "txtActualValue1ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Ecoli") {

                ControlInfo = [
                   { "ControlId": "txtActualValue2ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'Band' }
                ];
            }
           
            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetEquipmentSwabAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtActualValue1ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Coliforms") {

                ControlInfo = [
                   { "ControlId": "txtActualValue2ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Ecoli") {

                ControlInfo = [
                   { "ControlId": "txtActualValue3ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Listeria") {

                ControlInfo = [
                   { "ControlId": "txtActualValue4ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "YeasAndMouldShow") {

                ControlInfo = [
                   { "ControlId": "txtActualValue5ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetLinenAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Tvb") {

                ControlInfo = [
                    { "ControlId": "txtActualValue1ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                    { "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Coliforms") {

                ControlInfo = [
                   { "ControlId": "txtActualValue2ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Ecoli") {

                ControlInfo = [
                   { "ControlId": "txtActualValue3ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Listeria") {

                ControlInfo = [
                   { "ControlId": "txtActualValue4ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "YeasAndMouldShow") {

                ControlInfo = [
                   { "ControlId": "txtActualValue5ControlId", "MessageKey": "ActualValue", 'Type': 'TEXTBOX' },
                   { "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }
    this.GetAllergenAnalysisControlInfo = function (Type) {

        try {
            var ControlInfo = null;

            if (Type == "Total Milk Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue1ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst1ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit1ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue1ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                   // { "ControlId": "AddlUnitSecond1ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue1ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation1ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Egg Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue2ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst2ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit2ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue2ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond2ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue2ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation2ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Almond Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue3ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst3ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit3ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue3ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond3ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue3ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation3ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Peanut Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue4ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst4ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit4ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue4ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond4ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue4ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation4ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            else if (Type == "Gladin Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue5ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst5ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit5ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue5ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond5ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue5ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation5ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Mustard Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue6ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst6ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit6ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue6ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond6ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                    //{ "ControlId": "txtDeviatedValue6ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation6ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }

            else if (Type == "Soy Allergen") {

                ControlInfo = [
                    //{ "ControlId": "txtCriticalValue7ControlId", "MessageKey": "CriticalValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlUnitFirst7ControlId", "MessageKey": "UnitFirst", 'Type': 'DDL' },
                    { "ControlId": "txtDetectionLimit7ControlId", "MessageKey": "DetectionLimit", 'Type': 'TEXTBOX' },
                    { "ControlId": "txtDetectedValue7ControlId", "MessageKey": "DetectedValue", 'Type': 'Band' },
                    //{ "ControlId": "AddlUnitSecond7ControlId", "MessageKey": "UnitSecond", 'Type': 'DDL' },
                   // { "ControlId": "txtDeviatedValue7ControlId", "MessageKey": "DeviatedValue", 'Type': 'TEXTBOX' },
                    //{ "ControlId": "AddlEvaluation7ControlId", "MessageKey": "Evaluation", 'Type': 'DDL' }
                ];
            }
            //alert("Type : "+Type+"  ControlInfo : " + JSON.stringify(ControlInfo));
            return ControlInfo;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "FoodAnalysysValidationComponent.GetFoodAnalysisControlInfo", Excep);
        }
        finally {
        }
    }

    this.GetCurrentPageGlobalizationMetadata = function (currentPage,currentLanguage) {
        try {
            OneViewConsole.Debug("GetCurrentPageGlobalizationMetadata Start", "DataCaptureBO.GetCurrentPageGlobalizationMetadata");

            var ServiceId = OneViewSessionStorage.Get("ServiceId");
            var OrganizationId = OneViewSessionStorage.Get("OrganizationId");

            var CurrentPageMeta = (GlobalizationMetadata[ServiceId] != undefined ? ((GlobalizationMetadata[ServiceId])[OrganizationId] != undefined ?
                (((GlobalizationMetadata[ServiceId])[OrganizationId])[currentPage] != undefined ? (((GlobalizationMetadata[ServiceId])[OrganizationId])[currentPage][currentLanguage] != undefined ?
                ((GlobalizationMetadata[ServiceId])[OrganizationId])[currentPage][currentLanguage] : undefined) : undefined) : undefined) : undefined);

            //alert('CurrentPageMeta :' + JSON.stringify( CurrentPageMeta));
            if (CurrentPageMeta == undefined) {
                //Get metadata for particular template from Db and convert to required structure
                var oGlobalizationComponent = new GlobalizationComponent();
                oGlobalizationComponent.LoadTemplateWiseGlobalizationMetadata(currentLanguage);
            }

            OneViewConsole.Debug("GetCurrentPageGlobalizationMetadata End", "DataCaptureBO.GetCurrentPageGlobalizationMetadata");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCurrentPageGlobalizationMetadata", Excep);
        }
        finally {
            oDataCaptureBO = null;
        }
    }

    this.ClearAutoTempAndTime = function (ControlId) {
        try {
            OneViewConsole.Debug("ClearAutoTempAndTime Start", "DataCaptureBO.ClearAutoTempAndTime");

            MyInstance.ModelIdForAutoTemperatureUpdation = "";
            MyInstance.ModelIdForAutoTimeUpdation = "";

            if (ControlId != undefined && ControlId != "") {
                oScope[ControlId] = '';
            }

           
            OneViewConsole.Debug("ClearAutoTempAndTime End", "DataCaptureBO.ClearAutoTempAndTime");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearAutoTempAndTime", Excep);
        }
        finally {           
        }
    }

    var LaminarAirFlowMonitoringValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {
            var IsSuccess = true;


            var ErrorMessage = "";

            var IsSuccess = true;

            var TestMethod = "";
            var VolumeofAir = "";

            var Time = "";
            var ExposureStartTime = "";
            var ExposureEndTime = "";
            var ExposureTime = "";

            var DateOfAnalysis = "";
            var ParameterTested = "";
            var TVBIncubationTemp = "";
            var TVBColonyCount = "";
            var TVBEvaluation = "";
            var TVBResult = "";

            var YMCIncubationTemp = "";
            var YMCColonyCount = "";
            var YMCEvaluation = "";
            var YMCResult = "";
            var OverAllEvaluation = "";



            if (AryDcResultDetails == undefined) {

                TestMethod = oScope["chkTestMethod"].GetSelectedValue();
                VolumeofAir = oScope.NewDCModel.txtVolumeOfAirControlId;


                if (document.getElementById('DTTimeControlId') != null) {
                    Time = document.getElementById('DTTimeControlId').value;
                }
                if (document.getElementById('DTExposureStartTimeControlId') != null) {
                    ExposureStartTime = document.getElementById('DTExposureStartTimeControlId').value;
                }
                if (document.getElementById('DTExposureEndTimeControlId') != null) {
                    ExposureEndTime = document.getElementById('DTExposureEndTimeControlId').value;
                }
                if (document.getElementById('DTExposureTimeControlId') != null) {
                    ExposureTime = document.getElementById('DTExposureTimeControlId').value;
                }

                DateOfAnalysis = oScope.NewDCModel.DTDateOfAnalysisControlId;
                ParameterTested = oScope["chkParameterTested"].GetSelectedValue();
                TVBIncubationTemp = oScope.NewDCModel.ATIncubationTempControlId;
                TVBColonyCount = oScope.NewDCModel.txtColonyCountControlId;
                TVBEvaluation = oScope["AddlEvaluationControlId"].GetSelectedValue();
                TVBResult = oScope.NewDCModel.txtResultControlId;


                YMCIncubationTemp = oScope.NewDCModel.ATIncubationTemp2ControlId;
                YMCColonyCount = oScope.NewDCModel.txtColonyCount2ControlId;
                YMCEvaluation = oScope["AddlEvaluation2ControlId"].GetSelectedValue();
                YMCResult = oScope.NewDCModel.txtResult2ControlId;

                OverAllEvaluation = oScope["AddlOverAllEvaluationControlId"].GetSelectedValue();

            }
            else {
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'chkTestMethod') {
                        TestMethod = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtVolumeOfAirControlId') {
                        VolumeofAir = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'DTTimeControlId') {
                        Time = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'DTExposureStartTimeControlId') {
                        ExposureStartTime = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'DTExposureEndTimeControlId') {
                        ExposureEndTime = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'DTExposureTimeControlId') {
                        ExposureTime = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'DTDateOfAnalysisControlId') {
                        DateOfAnalysis = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'chkParameterTested') {
                        ParameterTested = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'ATIncubationTempControlId') {
                        TVBIncubationTemp = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'txtColonyCountControlId') {
                        TVBColonyCount = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'AddlEvaluationControlId') {
                        TVBEvaluation = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'txtResultControlId') {
                        TVBResult = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId != 'ATIncubationTemp2ControlId') {
                        YMCIncubationTemp = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'txtColonyCount2ControlId') {
                        YMCColonyCount = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'AddlEvaluation2ControlId') {
                        YMCEvaluation = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'txtResult2ControlId') {
                        YMCResult = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId != 'AddlOverAllEvaluationControlId') {
                        OverAllEvaluation = valueFromPage;
                    }


                }

            }


            if (TestMethod == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Test Method";
                IsSuccess = false;
            }

            if (TestMethod != "" && TestMethod == 68 && VolumeofAir == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Volume of Air";
                IsSuccess = false;
            }
            if (TestMethod != "" && TestMethod == 68 && Time == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Time";
                IsSuccess = false;
            }
            if (TestMethod != "" && TestMethod == 69 && ExposureStartTime == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Exposure Start Time";
                IsSuccess = false;
            }
            if (TestMethod != "" && TestMethod == 69 && ExposureEndTime == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Exposure End Time";
                IsSuccess = false;
            }
            if (TestMethod != "" && TestMethod == 69 && ExposureTime == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Exposure Time";
                IsSuccess = false;
            }
            if (oScope.NewDCModel.DTDateOfAnalysisControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Date of analysis";
                IsSuccess = false;
            }
            if (ParameterTested == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Parameter Tested";
                IsSuccess = false;
            }
            if (TVBIncubationTemp == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "TVB Incubation Temp";
                IsSuccess = false;
            }
            if (TVBColonyCount == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "TVB Colony Count";
                IsSuccess = false;
            }
            if (TVBEvaluation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "TVB Evaluation";
                IsSuccess = false;
            }
            if (TVBResult == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "TVB Result";
                IsSuccess = false;
            }
            //YMC
            if (YMCIncubationTemp == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Yeast & Mould Incubation Temp";
                IsSuccess = false;
            }
            if (YMCColonyCount == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Yeast & Mould Colony Count";
                IsSuccess = false;
            }
            if (YMCEvaluation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Yeast & Mould Evaluation";
                IsSuccess = false;
            }
            if (YMCResult == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Yeast & Mould Result";
                IsSuccess = false;
            }

            if (OverAllEvaluation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Over All Evaluation";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DatacaptureBO.LaminarAirFlowMonitoringValidation", xlatService);
        }
    }

    var MonthlyVerificationofProbeThermometerValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {
            var IsSuccess = true;


            var ErrorMessage = "";

            var IsSuccess = true;

            var Department = "";
            var Department1 = "";
            var Section = "";

            var Allocation = "";
            var ThermometerCode = "";
            var ThermometerSerialNumber = "";
            var ThermometerModelNo = "";

            var DateOfCalibration = "";
            var TestCap1TestCapRefNo = "";
            var TestCap1StandardValue = "";
            var TestCap1ObservedValue = "";
            var TestCap1DeviationValue = "";

            var ValidationStandardValue = "";
            var ValidationObservedValue = "";
            var ValidationDeviationValue = "";

            var ThermometerStatus = "";
            var OtherThermometerStatus = "";


            if (AryDcResultDetails == undefined) {

               
                /*Start*/
                Department = oScope["AddlDepartmentControlId"].GetSelectedValue();
                Department1 = oScope["AddlDepartment1ControlId"].GetSelectedValue();
                Section = oScope.NewDCModel.txtSectionControlId;
                Allocation = oScope.NewDCModel.txtAllocationControlId;
                ThermometerCode = oScope["AddlThermometerCodeControlId"].GetSelectedValue();
                ThermometerSerialNumber = oScope.NewDCModel.txtThermometerSerialNoControlId;
                ThermometerModelNo = oScope.NewDCModel.txtThermometerModelNoControlId;
                DateOfCalibration = oScope.NewDCModel.DTDDateOfCalibrationControlId;
                TestCap1TestCapRefNo = oScope.NewDCModel.txtTestCap1RefNoControlId;
                TestCap1StandardValue = oScope.NewDCModel.txtTestCap1StandardValueControlId;
                TestCap1ObservedValue = oScope.NewDCModel.txtTestCap1ObservedValueControlId;
                TestCap1DeviationValue = oScope.NewDCModel.txtTestCap1DeviationValueControlId;

                ValidationStandardValue = oScope.NewDCModel.txtValidationStandardValueControlId;
                ValidationObservedValue = oScope.NewDCModel.txtValidationObservedValueControlId;
                ValidationDeviationValue = oScope.NewDCModel.txtValidationDeviationValueControlId;


                ThermometerStatus = oScope["ChkThermometerStatusControlId"].GetSelectedText();
                OtherThermometerStatus = oScope.NewDCModel.txtTOtherThermometerStatusControlId;

                /*End*/

            }
            else {
                
                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartmentControlId') {
                        Department = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartment1ControlId') {
                        Department1 = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtSectionControlId') {
                        Section = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtAllocationControlId') {
                        Allocation = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlThermometerCodeControlId') {
                        ThermometerCode = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtThermometerSerialNoControlId') {
                        ThermometerSerialNumber = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtThermometerModelNoControlId') {
                        ThermometerModelNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'DTDDateOfCalibrationControlId') {
                        DateOfCalibration = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1RefNoControlId') {
                        TestCap1TestCapRefNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1StandardValueControlId') {
                        TestCap1StandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1ObservedValueControlId') {
                        TestCap1ObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTestCap1DeviationValueControlId') {
                        TestCap1DeviationValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationStandardValueControlId') {
                        ValidationStandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationObservedValueControlId') {
                        ValidationObservedValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationDeviationValueControlId') {
                        ValidationDeviationValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'ChkThermometerStatusControlId') {
                        ThermometerStatus = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTOtherThermometerStatusControlId') {
                        OtherThermometerStatus = valueFromPage;
                    }
                }

            }

            //alert("Department" + Department + "  /n Section :" + Section+  "  /n Allocation :" + Allocation+ "  /n ThermometerCode :" + ThermometerCode+ "  /n ThermometerSerialNumber :" + ThermometerSerialNumber+ "  /n ThermometerModelNo :" + ThermometerModelNo+ "  /n DateOfCalibration :" + DateOfCalibration)
            if (Department == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Unit";
                IsSuccess = false;
            }
            if (Department1 == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Department";
                IsSuccess = false;
            }

            
            if (Section == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Section";
                IsSuccess = false;
            }
            if (Allocation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Allocation";
                IsSuccess = false;
            }

            if (ThermometerCode == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Code";
                IsSuccess = false;
            }

            if (ThermometerSerialNumber == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Serial Number";
                IsSuccess = false;
            }

            if (ThermometerModelNo == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Model No";
                IsSuccess = false;
            }

            //if (DateOfCalibration == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Date Of Verification";
            //    IsSuccess = false;
            //}

            //if ((TestCap1TestCapRefNo === "" && TestCap1StandardValue === "" && TestCap1ObservedValue === "" && TestCap1DeviationValue === "") && (ValidationStandardValue === "" && ValidationObservedValue === "" && ValidationDeviationValue === "")) {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Test Cap / Validator Method";
            //    IsSuccess = false;
            //}
            //else {
                
            //    if ((TestCap1TestCapRefNo === "" || TestCap1StandardValue === "" || TestCap1ObservedValue === "" || TestCap1DeviationValue === "") && (ValidationStandardValue === "" || ValidationObservedValue === "" || ValidationDeviationValue === "")) {
            //        if (ErrorMessage != "") {
            //            ErrorMessage = ErrorMessage + ",";
            //        }
            //        ErrorMessage = ErrorMessage + "Test Cap / Validator Method";
            //        IsSuccess = false;
            //    }
            //}

            if (ThermometerStatus == "") {

                if (DateOfCalibration == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Date Of Verification";
                    IsSuccess = false;
                }

                if ((TestCap1TestCapRefNo === "" && TestCap1StandardValue === "" && TestCap1ObservedValue === "" && TestCap1DeviationValue === "") && (ValidationStandardValue === "" && ValidationObservedValue === "" && ValidationDeviationValue === "")) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Test Cap / Validator Method";
                    IsSuccess = false;
                }
                else {

                    if ((TestCap1TestCapRefNo === "" || TestCap1StandardValue === "" || TestCap1ObservedValue === "" || TestCap1DeviationValue === "") && (ValidationStandardValue === "" || ValidationObservedValue === "" || ValidationDeviationValue === "")) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Test Cap / Validator Method";
                        IsSuccess = false;
                    }
                }
            }
            else {
                if (ThermometerStatus == "Other" && OtherThermometerStatus == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Other";
                    IsSuccess = false;
                }
            }
                       
           if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {
            
            oOneViewExceptionHandler.Catch(Excep, "DatacaptureBO.MonthlyVerificationofProbeThermometerValidation", xlatService);
        }
    }

    var MonthlyVerificationofIRThermometerValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {
            var IsSuccess = true;


            var ErrorMessage = "";

            var IsSuccess = true;

            var Department = "";
            var Department1 = "";
            var Section = "";

            var Allocation = "";
            var ThermometerCode = "";
            var ThermometerSerialNumber = "";
            var ThermometerModelNo = "";

            var DateOfCalibration = "";

            var ICEStandardValue = "";
            var ICEObservedValue = "";
            var ICEDeviationValue = "";
            

            var ValidationStandardValue = "";
            var ValidationObservedValue = "";
            var ValidationDeviationValue = "";

            var ThermometerStatus = "";
            var OtherThermometerStatus = "";


            if (AryDcResultDetails == undefined) {


                /*Start*/
                Department = oScope["AddlDepartmentControlId"].GetSelectedValue();
                Department1 = oScope["AddlDepartment1ControlId"].GetSelectedValue();
                Section = oScope.NewDCModel.txtSectionControlId;
                Allocation = oScope.NewDCModel.txtAllocationControlId;
                ThermometerCode = oScope["AddlThermometerCodeControlId"].GetSelectedValue();
                ThermometerSerialNumber = oScope.NewDCModel.txtThermometerSerialNoControlId;
                ThermometerModelNo = oScope.NewDCModel.txtThermometerModelNoControlId;
                DateOfCalibration = oScope.NewDCModel.DTDDateOfCalibrationControlId;

                ICEStandardValue = oScope.NewDCModel.txtICEStandardValueControlId;
                ICEObservedValue = oScope.NewDCModel.txtICEObservedValueControlId;
                ICEDeviationValue = oScope.NewDCModel.txtICEDeviationValueControlId;
       

                ValidationStandardValue = oScope.NewDCModel.txtValidationStandardValueControlId;
                ValidationObservedValue = oScope.NewDCModel.txtValidationObservedValueControlId;
                ValidationDeviationValue = oScope.NewDCModel.txtValidationDeviationValueControlId;

                ThermometerStatus = oScope["ChkThermometerStatusControlId"].GetSelectedText();
                OtherThermometerStatus = oScope.NewDCModel.txtTOtherThermometerStatusControlId;

                /*End*/

            }
            else {

                for (var itr2 = 0; itr2 < AryDcResultDetails.length ; itr2++) {

                    var valueFromPage = AryDcResultDetails[itr2].Answer;

                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartmentControlId') {
                        Department = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlDepartment1ControlId') {
                        Department1 = valueFromPage;

                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtSectionControlId') {
                        Section = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtAllocationControlId') {
                        Allocation = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'AddlThermometerCodeControlId') {
                        ThermometerCode = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtThermometerSerialNoControlId') {
                        ThermometerSerialNumber = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtThermometerModelNoControlId') {
                        ThermometerModelNo = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'DTDDateOfCalibrationControlId') {
                        DateOfCalibration = valueFromPage;
                    }
                    
                    if (AryDcResultDetails[itr2].ControlId == 'txtICEStandardValueControlId') {
                        ICEStandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtICEObservedValueControlId') {
                        ICEObservedValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtICEDeviationValueControlId') {
                        ICEDeviationValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationStandardValueControlId') {
                        ValidationStandardValue = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationObservedValueControlId') {
                        ValidationObservedValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'txtValidationDeviationValueControlId') {
                        ValidationDeviationValue = valueFromPage;
                    }

                    if (AryDcResultDetails[itr2].ControlId == 'ChkThermometerStatusControlId') {
                        ThermometerStatus = valueFromPage;
                    }
                    if (AryDcResultDetails[itr2].ControlId == 'txtTOtherThermometerStatusControlId') {
                        OtherThermometerStatus = valueFromPage;
                    }

                    
                }

            }

            //alert("Department" + Department + "  /n Section :" + Section+  "  /n Allocation :" + Allocation+ "  /n ThermometerCode :" + ThermometerCode+ "  /n ThermometerSerialNumber :" + ThermometerSerialNumber+ "  /n ThermometerModelNo :" + ThermometerModelNo+ "  /n DateOfCalibration :" + DateOfCalibration)
            if (Department == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Unit";
                IsSuccess = false;
            }

            if (Department1 == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Department";
                IsSuccess = false;
            }


            if (Section == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Section";
                IsSuccess = false;
            }
            if (Allocation == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Allocation";
                IsSuccess = false;
            }

            if (ThermometerCode == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Code";
                IsSuccess = false;
            }

            if (ThermometerSerialNumber == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Serial Number";
                IsSuccess = false;
            }

            if (ThermometerModelNo == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Thermometer Model No";
                IsSuccess = false;
            }
            
           
            if (ThermometerStatus == "") {

                if (DateOfCalibration == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Date Of Verification";
                    IsSuccess = false;
                }

                if ((ICEStandardValue === "" && ICEObservedValue === "" && ICEDeviationValue === "") && (ValidationStandardValue === "" && ValidationObservedValue === "" && ValidationDeviationValue === "")) {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "ICE Bath Method/ Validator Method";
                    IsSuccess = false;
                }
                else {

                    if ((ICEStandardValue === "" || ICEObservedValue === "" || ICEDeviationValue === "") && (ValidationStandardValue === "" || ValidationObservedValue === "" || ValidationDeviationValue === "")) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "ICE Bath Method / Validator Method";
                        IsSuccess = false;
                    }
                }
            }
            else {
                if (ThermometerStatus == "Other" && OtherThermometerStatus == "") {
                    if (ErrorMessage != "") {
                        ErrorMessage = ErrorMessage + ",";
                    }
                    ErrorMessage = ErrorMessage + "Other";
                    IsSuccess = false;
                }
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {

                var finalMesg = 'MN-RQ-SWA-002 :: Please enter ' + ErrorMessage;
                alert(finalMesg);
            }

            return IsSuccess;
        }
        catch (Excep) {

            oOneViewExceptionHandler.Catch(Excep, "DatacaptureBO.MonthlyVerificationofIRThermometerValidation", xlatService);
        }
    }

    var SetEditValuesForMonthlyVerificationofProbe = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForMonthlyVerificationofProbe Start", "AnswerMode.SetEditValuesForMonthlyVerificationofProbe");

            if (AnswerModeObject.ControlId == "ChkThermometerStatusControlId") {
                if (AnswerToBind.Answer == "Not Available" || AnswerToBind.Answer == "Damage" || AnswerToBind.Answer == "Lost") {
                    scope.DateOfVerificationShow = false;
                    scope.ICECAPmethodShow = false;
                    scope.ValidatorMethodShow = false;
                    scope.OtherhermometerStatusShow = false;
                }
                else if (AnswerToBind.Answer == "Other") {
                    scope.DateOfVerificationShow = false;
                    scope.ICECAPmethodShow = false;
                    scope.ValidatorMethodShow = false;
                    scope.OtherhermometerStatusShow = true;
                }
                else {
                    scope.DateOfVerificationShow = true;
                    scope.ICECAPmethodShow = true;
                    scope.ValidatorMethodShow = true;
                    scope.OtherhermometerStatusShow = false;
                }
            }

            OneViewConsole.Debug("SetEditValuesForMonthlyVerificationofProbe End", "AnswerMode.SetEditValuesForMonthlyVerificationofProbe");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForMonthlyVerificationofProbe", Excep);
        }


    }
    
    var SetEditValuesForYearlyVerificationofProbe = function (AnswerModeObject, AnswerToBind) {
        try {
            OneViewConsole.Debug("SetEditValuesForYearlyVerificationofProbe Start", "AnswerMode.SetEditValuesForYearlyVerificationofProbe");

            if (AnswerModeObject.ControlId == "ChkThermometerStatusControlId") {
                if (AnswerToBind.Answer == "Not Available" || AnswerToBind.Answer == "Damage" || AnswerToBind.Answer == "Lost") {
                    scope.DateOfVerificationShow = false;
                    scope.TestCap1methodShow = false;
                    scope.TestCap2methodShow = false;
                    scope.TestCap3methodShow = false;
                    scope.BoilingWaterShow = false;
                    scope.OtherhermometerStatusShow = false;
                }
                else if (AnswerToBind.Answer == "Other") {
                    scope.DateOfVerificationShow = false;
                    scope.TestCap1methodShow = false;
                    scope.TestCap2methodShow = false;
                    scope.TestCap3methodShow = false;
                    scope.BoilingWaterShow = false;
                    scope.OtherhermometerStatusShow = true;
                }
                else {
                    scope.DateOfVerificationShow = true;
                    scope.TestCap1methodShow = true;
                    scope.TestCap2methodShow = true;
                    scope.TestCap3methodShow = true;
                    scope.BoilingWaterShow = true;
                    scope.OtherhermometerStatusShow = false;
                }
            }

            OneViewConsole.Debug("SetEditValuesForYearlyVerificationofProbe End", "AnswerMode.SetEditValuesForYearlyVerificationofProbe");
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.SetEditValuesForYearlyVerificationofProbe", Excep);
        }


    }
    /////////////////////////////**************************CMFT Start*****************************//////////////////////////////////
    var SetEditValuesForPreAcceptanceQuestionnaire_OLD = function (AnswerModeObject, AnswerToBind) {
        try {

            if (AnswerModeObject.ControlId == "chkLocalWasteProcedureControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_AwareofProcedure = true;
                }
                else {
                    scope.Div_AwareofProcedure = false;
                    scope["chkAwareofProcedureControlId"].Clear();
                    scope.NewDCModel.txtAwareofProcedureCommentControlId = "";
                }
            }
            if (AnswerModeObject.ControlId == "chkSegregationChartControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_Location = true;

                }
                else {
                    scope.Div_Location = false;
                    scope.NewDCModel.txtLocationControlId = "";
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForPreAcceptanceQuestionnaire", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForPreAcceptanceCompositionAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {

            ////alert('AnswerModeObject : ' + JSON.stringify(AnswerModeObject) + "             AnswerToBind        : " +JSON.stringify(AnswerToBind));

            if (AnswerModeObject.ControlId == "ChkContainerTypeDummyBandControlId") {
                //if (AnswerToBind.Answer == "Sharps Bin") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('SharpsBinShow');
                //}
                //else if (AnswerToBind.Answer == "Rigid container Plastic") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('RigidPlasticShow');
                //}
                //else if (AnswerToBind.Answer == "Rigid Container Card") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('RigidCardShow');
                //}
                //else if (AnswerToBind.Answer == "Bag") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('BagShow');
                //}
                //else if (AnswerToBind.Answer == "Glass Bucket") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('GlassBucketShow');
                //}
                //else if (AnswerToBind.Answer == "Cardboard Box") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('CardboardShow');
                //}
                //else if (AnswerToBind.Answer == "Cartridge Re-Cycling Box") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('CartridgeReCyclingBoxShow');
                //}    

                if (AnswerToBind.Answer == 1414) {
                    EditShowHidePreAcceptanceCompositionAnalysis('SharpsBinShow');
                }
                else if (AnswerToBind.Answer == 1415) {
                    EditShowHidePreAcceptanceCompositionAnalysis('RigidPlasticShow');
                }
                else if (AnswerToBind.Answer == 1416) {
                    EditShowHidePreAcceptanceCompositionAnalysis('RigidCardShow');
                }
                else if (AnswerToBind.Answer == 1417) {
                    EditShowHidePreAcceptanceCompositionAnalysis('BagShow');
                }
                else if (AnswerToBind.Answer == 1418) {
                    EditShowHidePreAcceptanceCompositionAnalysis('GlassBucketShow');
                }
                else if (AnswerToBind.Answer == 1419) {
                    EditShowHidePreAcceptanceCompositionAnalysis('CardboardShow');
                }
                else if (AnswerToBind.Answer == 1420) {
                    EditShowHidePreAcceptanceCompositionAnalysis('CartridgeReCyclingBoxShow');
                }
            }

            else if (AnswerModeObject.ControlId == "AddlSharpsBinColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.SharpsBinOthersShow = true;                    
                }
            }

            else if (AnswerModeObject.ControlId == "AddlRigidPlasticColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.RigidPlasticOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlRigidCardColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.RigidCardOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlBagColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.BagOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlGlassBucketColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.GlassBucketOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlCardboardBoxColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.CardboardBoxOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlCartridgeReCyclingBoxColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.CartridgeReCyclingBoxOthersShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkSharpsBinScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.SharpsBinContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkRigidPlasticScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.RigidPlasticContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkRigidCardScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.RigidCardContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkBagScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.BagContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkGlassBucketScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.GlassBucketContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkCardboardBoxScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.CardboardBoxContaminatesShow = true;
                }
            }
            if(AnswerModeObject.ControlId == "chkCartridgeReCyclingBoxScoreContainerControlId"){
                if (AnswerToBind.AnswerValue == "F") {
                    scope.CartridgeReCyclingBoxContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkSharpsBinContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.SharpsBinDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidPlasticContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.RigidPlasticDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidCardContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.RigidCardDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkBagContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.BagDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkGlassBucketContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.GlassBucketDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCardboardBoxContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.CardboardBoxDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCartridgeReCyclingBoxContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.CartridgeReCyclingBoxDetailsShow = true;
                }
            }

        }
        catch (Excep) {
           // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis 11" + Excep);
           // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis 22" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForPreAcceptanceLocalWasteStorage_OLD = function (AnswerModeObject, AnswerToBind) {
        try {          
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteSegregationType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    //Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    //Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    //Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    //Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
            }
            //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkIsIswastetypesegregated_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;                    
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
            //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {          
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForPreAcceptanceLocalWasteStorage", Excep);
        }
        finally {
        }
    }
    
    var SetEditValuesForSingleDepartmentQuestionnaire = function (AnswerModeObject, AnswerToBind) {
        try {

            if (AnswerModeObject.ControlId == "chkLocalWasteProcedureControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_AwareofProcedure = true;
                }
                else {
                    scope.Div_AwareofProcedure = false;
                    scope["chkAwareofProcedureControlId"].Clear();
                    scope.NewDCModel.txtAwareofProcedureCommentControlId = "";
                }
            }
            if (AnswerModeObject.ControlId == "chkSegregationChartControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_Location = true;

                }
                else {
                    scope.Div_Location = false;
                    scope.NewDCModel.txtLocationControlId = "";
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSingleDepartmentQuestionnaire", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSingleDepartmentCompositionAnalysis = function (AnswerModeObject, AnswerToBind) {
        try {

            ////alert('AnswerModeObject : ' + JSON.stringify(AnswerModeObject) + "             AnswerToBind        : " +JSON.stringify(AnswerToBind));

            if (AnswerModeObject.ControlId == "ChkContainerTypeDummyBandControlId") {
                //if (AnswerToBind.Answer == "Sharps Bin") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('SharpsBinShow');
                //}
                //else if (AnswerToBind.Answer == "Rigid container Plastic") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('RigidPlasticShow');
                //}
                //else if (AnswerToBind.Answer == "Rigid Container Card") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('RigidCardShow');
                //}
                //else if (AnswerToBind.Answer == "Bag") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('BagShow');
                //}
                //else if (AnswerToBind.Answer == "Glass Bucket") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('GlassBucketShow');
                //}
                //else if (AnswerToBind.Answer == "Cardboard Box") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('CardboardShow');
                //}
                //else if (AnswerToBind.Answer == "Cartridge Re-Cycling Box") {
                //    EditShowHidePreAcceptanceCompositionAnalysis('CartridgeReCyclingBoxShow');
                //}    

                if (AnswerToBind.Answer == 1414) {
                    EditShowHidePreAcceptanceCompositionAnalysis('SharpsBinShow');
                }
                else if (AnswerToBind.Answer == 1415) {
                    EditShowHidePreAcceptanceCompositionAnalysis('RigidPlasticShow');
                }
                else if (AnswerToBind.Answer == 1416) {
                    EditShowHidePreAcceptanceCompositionAnalysis('RigidCardShow');
                }
                else if (AnswerToBind.Answer == 1417) {
                    EditShowHidePreAcceptanceCompositionAnalysis('BagShow');
                }
                else if (AnswerToBind.Answer == 1418) {
                    EditShowHidePreAcceptanceCompositionAnalysis('GlassBucketShow');
                }
                else if (AnswerToBind.Answer == 1419) {
                    EditShowHidePreAcceptanceCompositionAnalysis('CardboardShow');
                }
                else if (AnswerToBind.Answer == 1420) {
                    EditShowHidePreAcceptanceCompositionAnalysis('CartridgeReCyclingBoxShow');
                }
            }

            else if (AnswerModeObject.ControlId == "AddlSharpsBinColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.SharpsBinOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlRigidPlasticColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.RigidPlasticOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlRigidCardColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.RigidCardOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlBagColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.BagOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlGlassBucketColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.GlassBucketOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlCardboardBoxColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.CardboardBoxOthersShow = true;
                }
            }

            else if (AnswerModeObject.ControlId == "AddlCartridgeReCyclingBoxColourCodeControlId") {
                if (AnswerToBind.Answer == "Other (please specify)") {
                    scope.CartridgeReCyclingBoxOthersShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkSharpsBinScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.SharpsBinContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidPlasticScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.RigidPlasticContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidCardScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.RigidCardContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkBagScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.BagContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkGlassBucketScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.GlassBucketContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCardboardBoxScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.CardboardBoxContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCartridgeReCyclingBoxScoreContainerControlId") {
                if (AnswerToBind.AnswerValue == "F") {
                    scope.CartridgeReCyclingBoxContaminatesShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkSharpsBinContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.SharpsBinDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidPlasticContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.RigidPlasticDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkRigidCardContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.RigidCardDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkBagContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.BagDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkGlassBucketContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.GlassBucketDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCardboardBoxContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.CardboardBoxDetailsShow = true;
                }
            }
            if (AnswerModeObject.ControlId == "chkCartridgeReCyclingBoxContainerTypeControlId") {
                if (AnswerToBind.AnswerValue == "YES") {
                    scope.CartridgeReCyclingBoxDetailsShow = true;
                }
            }

        }
        catch (Excep) {
            // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis 11" + Excep);
            // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis 22" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSingleDepartmentCompositionAnalysis", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSingleDepartmentLocalWasteStorage = function (AnswerModeObject, AnswerToBind) {
        try {
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteSegregationType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
            }
                //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkIsIswastetypesegregated_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
                //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSingleDepartmentLocalWasteStorage", Excep);
        }
        finally {
        }
    }

    var EditShowHidePreAcceptanceCompositionAnalysis = function (ShowParameter) {
        try {
            scope.SharpsBinShow = false;
            scope.RigidPlasticShow = false;
            scope.RigidCardShow = false;
            scope.BagShow = false;
            scope.GlassBucketShow = false;
            scope.CardboardShow = false;
            scope.CartridgeReCyclingBoxShow = false;


            scope[ShowParameter] = true;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.EditShowHidePreAcceptanceCompositionAnalysis", Excep);
        }
    }

    var SetEditValuesForIncidentInvestigationElementsQuestionnaire = function (AnswerModeObject, AnswerToBind) {
        try {

            if (AnswerModeObject.ControlId == "chkLocalWasteProcedureControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_AwareofProcedure = true;
                }
                else {
                    scope.Div_AwareofProcedure = false;
                    scope["chkAwareofProcedureControlId"].Clear();
                    scope.NewDCModel.txtAwareofProcedureCommentControlId = "";
                }
            }
            if (AnswerModeObject.ControlId == "chkSegregationChartControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_Location = true;

                }
                else {
                    scope.Div_Location = false;
                    scope.NewDCModel.txtLocationControlId = "";
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForIncidentInvestigationElementsQuestionnaire", Excep);
        }
        finally {
        }
    }
    
    var SetEditValuesForIncidentInvestigationElementsLocalWasteStorage = function (AnswerModeObject, AnswerToBind) {
        try {
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteSegregationType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
            }
                //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkIsIswastetypesegregated_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
                //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForIncidentInvestigationElementsLocalWasteStorage", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForLWSEQuestionnaire = function (AnswerModeObject, AnswerToBind) {
        try {

            if (AnswerModeObject.ControlId == "chkLocalWasteProcedureControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_AwareofProcedure = true;
                }
                else {
                    scope.Div_AwareofProcedure = false;
                    scope["chkAwareofProcedureControlId"].Clear();
                    scope.NewDCModel.txtAwareofProcedureCommentControlId = "";
                }
            }
            if (AnswerModeObject.ControlId == "chkSegregationChartControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_Location = true;

                }
                else {
                    scope.Div_Location = false;
                    scope.NewDCModel.txtLocationControlId = "";
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForIncidentInvestigationElementsQuestionnaire", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSWSPAEQuestionnaire = function (AnswerModeObject, AnswerToBind) {
        try {

            if (AnswerModeObject.ControlId == "chkLocalWasteProcedureControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_AwareofProcedure = true;
                }
                else {
                    scope.Div_AwareofProcedure = false;
                    scope["chkAwareofProcedureControlId"].Clear();
                    scope.NewDCModel.txtAwareofProcedureCommentControlId = "";
                }
            }
            if (AnswerModeObject.ControlId == "chkSegregationChartControlId") {
                if (AnswerToBind.Answer == 1) {
                    scope.Div_Location = true;

                }
                else {
                    scope.Div_Location = false;
                    scope.NewDCModel.txtLocationControlId = "";
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSWSPAEQuestionnaire", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForLWSELocalWasteStorage = function (AnswerModeObject, AnswerToBind) {
        try {
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteSegregationType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
            }
                //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkIsIswastetypesegregated_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
                //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForLWSELocalWasteStorage", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForSingleWasteLocalWasteStorage = function (AnswerModeObject, AnswerToBind) {
        try {
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteSegregationType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                }
            }
                //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkIsIswastetypesegregated_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
                //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForSingleWasteLocalWasteStorage", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForPreAcceptanceCompositionAnalysis_3271_OLD = function (AnswerModeObject, AnswerToBind) {
        try {

            //alert('AnswerModeObject : ' + JSON.stringify(AnswerModeObject) + "             AnswerToBind        : " +JSON.stringify(AnswerToBind));

            ////////////////*********************************** Sharps Bin Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkSharpsBinContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["SharpsBinDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlSharpsBinColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["SharpsBinOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkSharpsBinScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["SharpsBinContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** Sharps Bin End *****************************//////////////////////






            ////////////////*********************************** RigidPlastic Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkRigidPlasticContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["RigidPlasticDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlRigidPlasticColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["RigidPlasticOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkRigidPlasticScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["RigidPlasticContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** RigidPlastic End *****************************//////////////////////






            ////////////////*********************************** RigidCard Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkRigidCardContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["RigidCardDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlRigidCardColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["RigidCardOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkRigidCardScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["RigidCardContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** RigidCard End *****************************//////////////////////





            ////////////////*********************************** Bag Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkBagContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["BagDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlBagColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["BagOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkBagScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["BagContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** Bag End *****************************//////////////////////





            ////////////////*********************************** GlassBucket Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkGlassBucketContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["GlassBucketDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlGlassBucketColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["GlassBucketOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkGlassBucketScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["GlassBucketContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** GlassBucket End *****************************//////////////////////





            ////////////////*********************************** CardboardBox Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkCardboardBoxContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["CardboardBoxDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlCardboardBoxColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["CardboardBoxOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkCardboardBoxScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["CardboardBoxContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** CardboardBox End *****************************//////////////////////





            ////////////////*********************************** CartridgeReCyclingBox Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkCartridgeReCyclingBoxContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["CartridgeReCyclingBoxDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlCartridgeReCyclingBoxColourCodeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["CartridgeReCyclingBoxOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkCartridgeReCyclingBoxScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["CartridgeReCyclingBoxContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** CartridgeReCyclingBox End *****************************//////////////////////

            ////////////////*********************************** Controlled drugs destruction kit  Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkControlleddrugsdestructionkitContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["ControlleddrugsdestructionkitDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlControlleddrugsdestructionkitSizeControlId_1") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["ControlleddrugsdestructionkitSizeOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkControlleddrugsdestructionkitScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["ControlleddrugsdestructionkitContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** Controlled drugs destruction kit  End *****************************//////////////////////


            ////////////////*********************************** Mercury amalgam container  Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkMercuryamalgamcontainerContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["MercuryamalgamcontainerDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlMercuryamalgamcontainerSizeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["MercuryamalgamcontainerSizeOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkMercuryamalgamcontainerScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["MercuryamalgamcontainerContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** Mercury amalgam container End *****************************//////////////////////

            ////////////////*********************************** Waste Hand gel container Start *****************************//////////////////////

            if (AnswerModeObject.ControlId.indexOf("chkWasteHandgelcontainerContainerTypeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {
                    scope["WasteHandgelcontainerDetailsShow_" + ContainerNo] = true;
                }
            }

            else if (AnswerModeObject.ControlId.indexOf("AddlWasteHandgelcontainerSizeControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Other (please specify)") {
                    scope["WasteHandgelcontainerSizeOthersShow_" + ContainerNo] = true;
                }
            }
            else if (AnswerModeObject.ControlId.indexOf("chkWasteHandgelcontainerScoreContainerControlId_") != -1) {
                var ContainerNo = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "Fail") {
                    scope["WasteHandgelcontainerContaminatesShow_" + ContainerNo] = true;
                }
            }

            ////////////////*********************************** Waste Hand gel container End *****************************//////////////////////
        }
        catch (Excep) {
            // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis_3271 11" + Excep);
            // alert("DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis_3271 22" + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForPreAcceptanceCompositionAnalysis_3271", Excep);
        }
        finally {
        }
    }


    var SetEditValuesForBulkWasteElements = function (AnswerModeObject, AnswerToBind) {
        try {
            //if (AnswerModeObject.ControlId == "chkWasteSegregationType_" + WasteType) {
            if (AnswerModeObject.ControlId.indexOf("chkWasteStoredatYardType_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                if (AnswerToBind.AnswerValue == "Dedicated wheelie bin") {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = true;
                    scope["Compactorskip_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIsskipsecured_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIscompactorskiplockoff_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Compactor skip") {
                    scope["Compactorskip_" + WasteType] = true;
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });

                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIsskipsecured_" + WasteType });
                }
                else if (AnswerToBind.AnswerValue == "Other") {
                    scope["Others_" + WasteType] = true;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIscompactorskiplockoff_" + WasteType });
                }
                else {
                    scope["Others_" + WasteType] = false;
                    scope["DedicatedWhellieBin_" + WasteType] = false;
                    Clear({ Type: "TEXTBOX", ControlId: "txtOthers_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIsskipsecured_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkCorrectlyColurCoded_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenclosed_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkHaswheeliebinbeenLocked_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebinlockfunctional_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIswheeliebindamaged_" + WasteType });
                    Clear({ Type: "Band", ControlId: "chkIscompactorskiplockoff_" + WasteType });
                }
            }
                //else if (AnswerModeObject.ControlId == "chkIsIswastetypesegregated_" + WasteType) {
            else if (AnswerModeObject.ControlId.indexOf("chkContainerStatus_") != -1) {

                var WasteType = AnswerModeObject.ControlId.split('_')[1];

                //if (AnswerToBind.AnswerValue == "E" || AnswerToBind.AnswerValue == "P") {
                if (AnswerToBind.Answer == 580 || AnswerToBind.Answer == 578) {
                    scope["Contaminants_" + WasteType] = false;
                }
                //else if (AnswerToBind.AnswerValue == "F") {
                else if (AnswerToBind.Answer == 579) {
                    scope["Contaminants_" + WasteType] = true;
                }
            }
            if (AnswerModeObject.ControlId.indexOf("txtWasteType_") != -1) {
                //if (AnswerModeObject.ControlId == "txtWasteType_" + WasteType) {
                //var WasteType = AnswerModeObject.ControlId.split('_')[1];
                if (AnswerToBind.AnswerValue == "YES") {//YES
                    scope["Div_" + AnswerModeObject.ControlId] = true;
                }
                else {
                    scope["Div_" + AnswerModeObject.ControlId] = false;
                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForLWSELocalWasteStorage", Excep);
        }
        finally {
        }
    }

    /////////////////////////////**************************TCFM Start*****************************//////////////////////////////////
    var SetEditValuesForTescoTraning = function (AnswerModeObject, AnswerToBind) {
        try {

           
            if (AnswerModeObject.ControlId == "chkTraningTypeControlId") {
                if (AnswerToBind.Answer == "Induction" ) {
                    scope.DivInduction = true;
                    scope.DivTask = false;
                    scope.DivEquipment = false;

                }
                else if (AnswerToBind.Answer == "Task") {
                    scope.DivInduction = false;
                    scope.DivTask = true;
                    scope.DivEquipment = false;

                }
                else if (AnswerToBind.Answer == "Equipment" ) {
                    scope.DivInduction = false;
                    scope.DivTask = false;
                    scope.DivEquipment = true;
                }
                else {
                    scope.DivInduction = false;
                    scope.DivTask = false;
                    scope.DivEquipment = false;

                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForPreAcceptanceQuestionnaire", Excep);
        }
        finally {
        }
    }

    var SetEditValuesForTravisPerkinsTraningModule = function (AnswerModeObject, AnswerToBind) {
        try {

           
            if (AnswerModeObject.ControlId == "chkTraningTypeControlId") {
                if (AnswerToBind.Answer == "Induction" ) {
                    scope.DivInduction = true;
                    scope.DivTask = false;
                    scope.DivEquipment = false;

                }
                else if (AnswerToBind.Answer == "Task") {
                    scope.DivInduction = false;
                    scope.DivTask = true;
                    scope.DivEquipment = false;

                }
                else if (AnswerToBind.Answer == "Equipment" ) {
                    scope.DivInduction = false;
                    scope.DivTask = false;
                    scope.DivEquipment = true;
                }
                else {
                    scope.DivInduction = false;
                    scope.DivTask = false;
                    scope.DivEquipment = false;

                }
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetEditValuesForTravisPerkinsTraningModule", Excep);
        }
        finally {
        }
    }

    /*Custom Validation for CMFT Start*/
    var PreAcceptanceQuestionnaireValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var GeneralDomesticStatus = true;

            var CommonMessage = "MN-RQ-PFQ-001 :: Please complete the following categories to submit for approval : ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var PermanentStaff = "";
            var AgencyStaff = "";
            var WasteManagePolicy = "";
            var LocalWasteProcedure = "";
            var Numberofstaff = "";
            var SegregationChart = "";
            var Location = "";

            var GeneralDomestic = "";
            var GeneralDomesticglass = "";
            var ConfidentialWaste = "";
            var Printercartridges = "";
            var Cytotoxiccytostaticsharps = "";
            var Nonsharpcytotoxiccytostaticwaste = "";
            var Cytotoxiccytostaticincontinencewaste = "";
            var Medicinallycontaminatedsharps = "";
            var NonsharpsMedicinalwaste = "";
            var Controlleddrugs = "";
            var SharpsWaste = "";
            var NonSharpsWaste = "";
            var NonCytotoxic = "";
            var NonMedicinalSharps = "";
            var InfectiousWaste = "";
            var OffensiveWaste = "";
            var AutoclavedWaste = "";
            var AnatomicalWaste = "";
            var Amalgam = "";
            var Gypsum = "";
            var HandGelPouches = "";
            var WasteChemicals = "";
            var CatAdiagnostics = "";

            var GeneralDomesticContainer = "";
            var GeneralDomesticglassContainer = "";
            var ConfidentialWasteContainer = "";
            var PrintercartridgesContainer = "";
            var CytotoxiccytostaticsharpsContainer = "";
            var NonsharpcytotoxiccytostaticwasteContainer = "";
            var CytotoxiccytostaticincontinencewasteContainer = "";
            var MedicinallycontaminatedsharpsContainer = "";
            var NonsharpsMedicinalwasteContainer = "";
            var ControlleddrugsContainer = "";
            var SharpsWasteContainer = "";
            var NonSharpsWasteContainer = "";
            var NonCytotoxicContainer = "";
            var NonMedicinalSharpsContainer = "";
            var InfectiousWasteContainer = "";
            var OffensiveWasteContainer = "";
            var AutoclavedWasteContainer = "";
            var AnatomicalWasteContainer = "";
            var AmalgamContainer = "";
            var GypsumContainer = "";
            var HandGelPouchesContainer = "";
            var WasteChemicalsContainer = "";
            var CatAdiagnosticsContainer = "";

            //  if (AryDcResultDetails == undefined) {
            //alert('scope.NewDCModel' + scope.NewDCModel);
            PermanentStaff = oScope.NewDCModel["txtPermanentStaffControlId"];
            AgencyStaff = oScope.NewDCModel["txtAgencyStaffControlId"];
            WasteManagePolicy = oScope["chkWasteManagePolicyControlId"].GetSelectedValue();
            LocalWasteProcedure = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            Numberofstaff = oScope.NewDCModel["txtNumberofstaffControlId"];
            SegregationChart = oScope["chkSegregationChartControlId"].GetSelectedValue();
            Location = oScope.NewDCModel["txtLocationControlId"];

            GeneralDomestic = oScope["chkGeneralDomesticControlId"].GetSelectedValue();
            GeneralDomesticglass = oScope["chkGeneralDomesticglassControlId"].GetSelectedValue();
            ConfidentialWaste = oScope["chkConfidentialWasteControlId"].GetSelectedValue();
            Printercartridges = oScope["chkPrinterCartridgesControlId"].GetSelectedValue();
            Cytotoxiccytostaticsharps = oScope["chkCytotoxicSharpsControlId"].GetSelectedValue();
            Nonsharpcytotoxiccytostaticwaste = oScope["chkNonsharpwasteControlId"].GetSelectedValue();
            Cytotoxiccytostaticincontinencewaste = oScope["chkCytotoxicIncontinenceWasteControlId"].GetSelectedValue();
            Medicinallycontaminatedsharps = oScope["chkMedicinallysharpsControlId"].GetSelectedValue();
            NonsharpsMedicinalwaste = oScope["chkNonsharpsMedicinalControlId"].GetSelectedValue();
            Controlleddrugs = oScope["chkControlledDrugsControlId"].GetSelectedValue();
            SharpsWaste = oScope["chkSharpsWasteControlId"].GetSelectedValue();
            NonSharpsWaste = oScope["chkNonSharpsWasteControlId"].GetSelectedValue();
            NonCytotoxic = oScope["chkNonCytotoxicControlId"].GetSelectedValue();
            NonMedicinalSharps = oScope["chkNonMedicinalSharpsControlId"].GetSelectedValue();
            InfectiousWaste = oScope["chkInfectiousWasteControlId"].GetSelectedValue();
            OffensiveWaste = oScope["chkOffensiveWasteControlId"].GetSelectedValue();
            AutoclavedWaste = oScope["chkAutoclavedWasteControlId"].GetSelectedValue();
            AnatomicalWaste = oScope["chkAnatomicalWasteControlId"].GetSelectedValue();
            Amalgam = oScope["chkAmalgamControlId"].GetSelectedValue();
            Gypsum = oScope["chkGypsumControlId"].GetSelectedValue();
            HandGelPouches = oScope["chkHandGelPouchesControlId"].GetSelectedValue();
            WasteChemicals = oScope["chkWasteChemicalsControlId"].GetSelectedValue();
            CatAdiagnostics = oScope["chkCatAdiagnosticsControlId"].GetSelectedValue();

            GeneralDomesticContainer = oScope["chkGDContainerTypeControlId"].GetSelectedValue().length;
            GeneralDomesticglassContainer = oScope["chkGDGlassContainerTypeControlId"].GetSelectedValue().length;
            ConfidentialWasteContainer = oScope["chkConfidentialWasteContainerTypeControlId"].GetSelectedValue().length;
            PrintercartridgesContainer = oScope["chkPrintercartridgesContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticsharpsContainer = oScope["chkCytotoxicSharpsContainerTypeControlId"].GetSelectedValue().length;
            NonsharpcytotoxiccytostaticwasteContainer = oScope["chkNonsharpwasteContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticincontinencewasteContainer = oScope["chkCytotoxicIncontinenceWasteContainerTypeControlId"].GetSelectedValue().length;
            MedicinallycontaminatedsharpsContainer = oScope["chkMedicinallyContainerTypeControlId"].GetSelectedValue().length;
            NonsharpsMedicinalwasteContainer = oScope["chkNonsharpsMedicinalContainerTypeControlId"].GetSelectedValue().length;
            ControlleddrugsContainer = oScope["chkControlledDrugsContainerTypeControlId"].GetSelectedValue().length;
            SharpsWasteContainer = oScope["chkSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonSharpsWasteContainer = oScope["chkNonSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonCytotoxicContainer = oScope["chkNonCytotoxicContainerTypeControlId"].GetSelectedValue().length;
            NonMedicinalSharpsContainer = oScope["chkNonMedicinalSharpsContainerTypeControlId"].GetSelectedValue().length;
            InfectiousWasteContainer = oScope["chkInfectiousWasteContainerTypeControlId"].GetSelectedValue().length;
            OffensiveWasteContainer = oScope["chkOffensiveWasteContainerTypeControlId"].GetSelectedValue().length;
            AutoclavedWasteContainer = oScope["chkAutoclavedWasteContainerTypeControlId"].GetSelectedValue().length;
            AnatomicalWasteContainer = oScope["chkAnatomicalWasteContainerTypeControlId"].GetSelectedValue().length;
            AmalgamContainer = oScope["chkAmalgamContainerTypeControlId"].GetSelectedValue().length;
            GypsumContainer = oScope["chkGypsumContainerTypeControlId"].GetSelectedValue().length;
            HandGelPouchesContainer = oScope["chkHandGelPouchesContainerTypeControlId"].GetSelectedValue().length;
            WasteChemicalsContainer = oScope["chkWasteChemicalsContainerTypeControlId"].GetSelectedValue().length;
            CatAdiagnosticsContainer = oScope["chkCatAdiagnosticsContainerTypeControlId"].GetSelectedValue().length;
            //}

            if (PermanentStaff == "" || AgencyStaff == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Staff Information ";
                IsSuccess = false;
            }
            if (WasteManagePolicy == "" || LocalWasteProcedure == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Policy and Procedure ";
                IsSuccess = false;
            }
            if (Numberofstaff == "" || SegregationChart == "" || (SegregationChart != "" && (SegregationChart == 1 && Location == ""))) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Reference and training ";
                IsSuccess = false;
            }

            if (GeneralDomestic == "" || GeneralDomesticglass == "" || ConfidentialWaste == "" || Printercartridges == "" || Cytotoxiccytostaticsharps == "" || Nonsharpcytotoxiccytostaticwaste == "" || Cytotoxiccytostaticincontinencewaste==""||
                Medicinallycontaminatedsharps == "" || NonsharpsMedicinalwaste == "" || Controlleddrugs == "" || SharpsWaste == "" || NonSharpsWaste == "" || NonCytotoxic == "" || NonMedicinalSharps == "" || InfectiousWaste == "" || OffensiveWaste==""||
                AutoclavedWaste == "" || AnatomicalWaste == "" || Amalgam == "" || Gypsum == "" || HandGelPouches == "" || WasteChemicals == "" || CatAdiagnostics == "") {
                WasteStreamSuccess = false;
            }
           

            if (WasteStreamSuccess == true) {

                if ((GeneralDomestic != "" && (GeneralDomestic == 1 && GeneralDomesticContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((GeneralDomesticglass != "" && (GeneralDomesticglass == 1 && GeneralDomesticglassContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((ConfidentialWaste != "" && (ConfidentialWaste == 1 && ConfidentialWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Printercartridges != "" && (Printercartridges == 1 && PrintercartridgesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticsharps != "" && (Cytotoxiccytostaticsharps == 1 && CytotoxiccytostaticsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Nonsharpcytotoxiccytostaticwaste != "" && (Nonsharpcytotoxiccytostaticwaste == 1 && NonsharpcytotoxiccytostaticwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticincontinencewaste != "" && (Cytotoxiccytostaticincontinencewaste == 1 && CytotoxiccytostaticincontinencewasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Medicinallycontaminatedsharps != "" && (Medicinallycontaminatedsharps == 1 && MedicinallycontaminatedsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonsharpsMedicinalwaste != "" && (NonsharpsMedicinalwaste == 1 && NonsharpsMedicinalwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Controlleddrugs != "" && (Controlleddrugs == 1 && ControlleddrugsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((SharpsWaste != "" && (SharpsWaste == 1 && SharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonSharpsWaste != "" && (NonSharpsWaste == 1 && NonSharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonCytotoxic != "" && (NonCytotoxic == 1 && NonCytotoxicContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonMedicinalSharps != "" && (NonMedicinalSharps == 1 && NonMedicinalSharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((InfectiousWaste != "" && (InfectiousWaste == 1 && InfectiousWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((OffensiveWaste != "" && (OffensiveWaste == 1 && OffensiveWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AutoclavedWaste != "" && (AutoclavedWaste == 1 && AutoclavedWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AnatomicalWaste != "" && (AnatomicalWaste == 1 && AnatomicalWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Amalgam != "" && (Amalgam == 1 && AmalgamContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Gypsum != "" && (Gypsum == 1 && GypsumContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((HandGelPouches != "" && (HandGelPouches == 1 && HandGelPouchesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((WasteChemicals != "" && (WasteChemicals == 1 && WasteChemicalsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((CatAdiagnostics != "" && (CatAdiagnostics == 1 && CatAdiagnosticsContainer == 0))) {
                    WasteStreamSuccess = false;
                }

            }

            if (WasteStreamSuccess == false) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Waste Streams ";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PreAcceptanceQuestionnaireValidation", Excep);
        }
    }

    var PreAcceptanceCompositionAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var CommonMessage = "MN-RQ-PCA-003 :: Please complete the following categories to submit for approval : ";
            
            var AddlRoomTypeText = "";
            var chkLocalWasteProcedureControlId = "";
            //var ChkContainerTypeDummyBandControlId = "";

            //Sharps Bin
            var chkSharpsBinContainerTypeControlId = "";
            //var AddlSharpsBinSizeControlId = "";
            var AddlSharpsBinSizeText = "";
            //var AddlSharpsBinColourCodeControlId = "";
            var AddlSharpsBinColourCodeText = "";
            var txtSharpsBinOthersControlId = "";
            var chkSharpsBinLabelUsefulControlId = "";
            var chkSharpsBinLidMatchLabelControlId = "";
            var chkBinProperlyAssembledControlId = "";
            var chkAssembledByLabelCompletedControlId = "";
            var chkClosureMechanismInUseControlId = "";
            var chkSharpsBinOverfilledControlId = "";
            var chkBinLabelUsefulControlId = "";
            var chkSharpsBinScoreContainerControlId = "";
            var chkSharpsAmberFailContaminatesControlId = "";
            var chkSharpsRedFailContaminatesControlId = "";


            //Rigid Container Plastic
            var chkRigidPlasticContainerTypeControlId = "";
            //var AddlRigidPlasticSizeControlId = "";
            var AddlRigidPlasticSizeText = "";
            //var AddlRigidPlasticColourCodeControlId = "";
            var AddlRigidPlasticColourCodeText = "";
            var txtRigidPlasticOthersControlId = "";
            var chkRigidPlasticWasteTypesBinLabelControlId = "";
            var chkRigidPlasticBinLabelUsefulControlId = "";
            var chkRigidPlasticBinLidMatchLabelControlId = "";
            var chkRigidPlasticScoreContainerControlId = "";
            var chkRigidPlasticAmberFailContaminatesControlId = "";
            var chkRigidPlasticRedFailContaminatesControlId = "";



            //Rigid Container Card
            var chkRigidCardContainerTypeControlId = "";
            //var AddlRigidCardSizeControlId = "";
            var AddlRigidCardSizeText = "";
            //var AddlRigidCardColourCodeControlId = "";
            var AddlRigidCardColourCodeText = "";
            var txtRigidCardOthersControlId = "";
            var chkRigidCardWasteTypesBinLabelControlId = "";
            var chkRigidCardBinLabelUsefulControlId = "";
            var chkRigidCardBinLidMatchLabelControlId = "";
            var chkRigidCardScoreContainerControlId = "";
            var chkRigidCardAmberFailContaminatesControlId = "";
            var chkRigidCardRedFailContaminatesControlId = "";



            //Bag
            var chkBagContainerTypeControlId = "";
            //var AddlBagSizeControlId = "";
            var AddlBagSizeText = "";
            //var AddlBagColourCodeControlId = "";
            var AddlBagColourCodeText = "";
            var txtBagOthersControlId = "";
            var chkPedalBinLabelledControlId = "";
            var chkPedalBinLabelMatchControlId = "";
            var chkBagOverfilledControlId = "";
            var chkBinDamagedControlId = "";
            var chkBinAppropriateForBagControlId = "";
            var chkBagScoreContainerControlId = "";
            var chkBagAmberFailContaminatesControlId = "";
            var chkBagRedFailContaminatesControlId = "";


            //GlassBucket
            var chkGlassBucketContainerTypeControlId = "";
            //var AddlGlassBucketSizeControlId = "";
            var AddlGlassBucketSizeText = "";
            //var AddlGlassBucketColourCodeControlId = "";
            var AddlGlassBucketColourCodeText = "";
            var txtGlassBucketOthersControlId = "";
            var chkGlassBucketScoreContainerControlId = "";
            var chkGlassBucketAmberFailContaminatesControlId = "";
            var chkGlassBucketRedFailContaminatesControlId = "";

            //CardboardBox
            var chkCardboardBoxContainerTypeControlId = "";
            //var AddlCardboardBoxSizeControlId = "";
            var AddlCardboardBoxSizeText = "";
            //var AddlCardboardBoxColourCodeControlId = "";
            var AddlCardboardBoxColourCodeText = "";
            var txtCardboardBoxOthersControlId = "";
            var chkCardboardBoxScoreContainerControlId = "";
            var chkCardboardBoxAmberFailContaminatesControlId = "";
            var chkCardboardBoxRedFailContaminatesControlId = "";


            //CartridgeReCyclingBox
            var chkCartridgeReCyclingBoxContainerTypeControlId = "";
            //var AddlCartridgeReCyclingBoxSizeControlId = "";
            var AddlCartridgeReCyclingBoxSizeText = "";
            //var AddlCartridgeReCyclingBoxColourCodeControlId = "";
            var AddlCartridgeReCyclingBoxColourCodeText = "";
            var txtCartridgeReCyclingBoxOthersControlId = "";
            var chkCartridgeReCyclingBoxScoreContainerControlId = "";
            var chkCartridgeReCyclingBoxAmberFailContaminatesControlId = "";
            var chkCartridgeReCyclingBoxRedFailContaminatesControlId = "";


            

            AddlRoomTypeText = oScope["AddlRoomTypeControlId"].GetSelectedText();
            chkLocalWasteProcedureControlId = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            //ChkContainerTypeDummyBandControlId = oScope["ChkContainerTypeDummyBandControlId"].GetSelectedValue();

            //Sharps Bin
            chkSharpsBinContainerTypeControlId = oScope["chkSharpsBinContainerTypeControlId"].GetSelectedValue();
            //AddlSharpsBinSizeControlId = oScope["AddlSharpsBinSizeControlId"].GetSelectedValue();
            AddlSharpsBinSizeText = oScope["AddlSharpsBinSizeControlId"].GetSelectedText();
            //AddlSharpsBinColourCodeControlId = oScope["AddlSharpsBinColourCodeControlId"].GetSelectedValue();
            AddlSharpsBinColourCodeText = oScope["AddlSharpsBinColourCodeControlId"].GetSelectedText();
            txtSharpsBinOthersControlId = oScope.NewDCModel["txtSharpsBinOthersControlId"];
            chkSharpsBinLabelUsefulControlId = oScope["chkSharpsBinLabelUsefulControlId"].GetSelectedValue();
            chkSharpsBinLidMatchLabelControlId = oScope["chkSharpsBinLidMatchLabelControlId"].GetSelectedValue();
            chkBinProperlyAssembledControlId = oScope["chkBinProperlyAssembledControlId"].GetSelectedValue();
            chkAssembledByLabelCompletedControlId = oScope["chkAssembledByLabelCompletedControlId"].GetSelectedValue();
            chkClosureMechanismInUseControlId = oScope["chkClosureMechanismInUseControlId"].GetSelectedValue();
            chkSharpsBinOverfilledControlId = oScope["chkSharpsBinOverfilledControlId"].GetSelectedValue();
            chkBinLabelUsefulControlId = oScope["chkBinLabelUsefulControlId"].GetSelectedValue();
            chkSharpsBinScoreContainerControlId = oScope["chkSharpsBinScoreContainerControlId"].GetSelectedText();
            chkSharpsAmberFailContaminatesControlId = oScope["chkSharpsAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkSharpsRedFailContaminatesControlId = oScope["chkSharpsRedFailContaminatesControlId"].GetSelectedValue().length;;



            //Rigid Container Plastic
            chkRigidPlasticContainerTypeControlId = oScope["chkRigidPlasticContainerTypeControlId"].GetSelectedValue();
            //AddlRigidPlasticSizeControlId = oScope["AddlRigidPlasticSizeControlId"].GetSelectedValue();
            AddlRigidPlasticSizeText = oScope["AddlRigidPlasticSizeControlId"].GetSelectedText();
            //AddlRigidPlasticColourCodeControlId = oScope["AddlRigidPlasticColourCodeControlId"].GetSelectedValue();
            AddlRigidPlasticColourCodeText = oScope["AddlRigidPlasticColourCodeControlId"].GetSelectedText();
            txtRigidPlasticOthersControlId = oScope.NewDCModel["txtRigidPlasticOthersControlId"];
            chkRigidPlasticWasteTypesBinLabelControlId = oScope["chkRigidPlasticWasteTypesBinLabelControlId"].GetSelectedValue();
            chkRigidPlasticBinLabelUsefulControlId = oScope["chkRigidPlasticBinLabelUsefulControlId"].GetSelectedValue();
            chkRigidPlasticBinLidMatchLabelControlId = oScope["chkRigidPlasticBinLidMatchLabelControlId"].GetSelectedValue();
            chkRigidPlasticScoreContainerControlId = oScope["chkRigidPlasticScoreContainerControlId"].GetSelectedText();
            chkRigidPlasticAmberFailContaminatesControlId = oScope["chkRigidPlasticAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkRigidPlasticRedFailContaminatesControlId = oScope["chkRigidPlasticRedFailContaminatesControlId"].GetSelectedValue().length;;
           


            //Rigid Container Card
            chkRigidCardContainerTypeControlId = oScope["chkRigidCardContainerTypeControlId"].GetSelectedValue();
            //AddlRigidCardSizeControlId = oScope["AddlRigidCardSizeControlId"].GetSelectedValue();
            AddlRigidCardSizeText = oScope["AddlRigidCardSizeControlId"].GetSelectedText();
            //AddlRigidCardColourCodeControlId = oScope["AddlRigidCardColourCodeControlId"].GetSelectedValue();
            AddlRigidCardColourCodeText = oScope["AddlRigidCardColourCodeControlId"].GetSelectedText();
            txtRigidCardOthersControlId = oScope.NewDCModel["txtRigidCardOthersControlId"];
            chkRigidCardWasteTypesBinLabelControlId = oScope["chkRigidCardWasteTypesBinLabelControlId"].GetSelectedValue();
            chkRigidCardBinLabelUsefulControlId = oScope["chkRigidCardBinLabelUsefulControlId"].GetSelectedValue();
            chkRigidCardBinLidMatchLabelControlId = oScope["chkRigidCardBinLidMatchLabelControlId"].GetSelectedValue();
            chkRigidCardScoreContainerControlId = oScope["chkRigidCardScoreContainerControlId"].GetSelectedText();
            chkRigidCardAmberFailContaminatesControlId = oScope["chkRigidCardAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkRigidCardRedFailContaminatesControlId = oScope["chkRigidCardRedFailContaminatesControlId"].GetSelectedValue().length;;


            //Bag
            chkBagContainerTypeControlId = oScope["chkBagContainerTypeControlId"].GetSelectedValue();
            AddlBagSizeControlId = oScope["AddlBagSizeControlId"].GetSelectedValue();
            AddlBagSizeText = oScope["AddlBagSizeControlId"].GetSelectedText();
            //AddlBagColourCodeControlId = oScope["AddlBagColourCodeControlId"].GetSelectedValue();
            AddlBagColourCodeText = oScope["AddlBagColourCodeControlId"].GetSelectedText();
            txtBagOthersControlId = oScope.NewDCModel["txtBagOthersControlId"];
            chkPedalBinLabelledControlId = oScope["chkPedalBinLabelledControlId"].GetSelectedValue();
            chkPedalBinLabelMatchControlId = oScope["chkPedalBinLabelMatchControlId"].GetSelectedValue();
            chkBagOverfilledControlId = oScope["chkBagOverfilledControlId"].GetSelectedValue();
            chkBinDamagedControlId = oScope["chkBinDamagedControlId"].GetSelectedValue();
            chkBinAppropriateForBagControlId = oScope["chkBinAppropriateForBagControlId"].GetSelectedValue();
            chkBagScoreContainerControlId = oScope["chkBagScoreContainerControlId"].GetSelectedText();
            chkBagAmberFailContaminatesControlId = oScope["chkBagAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkBagRedFailContaminatesControlId = oScope["chkBagRedFailContaminatesControlId"].GetSelectedValue().length;;


            //GlassBucket
            chkGlassBucketContainerTypeControlId = oScope["chkGlassBucketContainerTypeControlId"].GetSelectedValue();
            AddlGlassBucketSizeControlId = oScope["AddlGlassBucketSizeControlId"].GetSelectedValue();
            AddlGlassBucketSizeText = oScope["AddlGlassBucketSizeControlId"].GetSelectedText();
            //AddlGlassBucketColourCodeControlId = oScope["AddlGlassBucketColourCodeControlId"].GetSelectedValue();
            AddlGlassBucketColourCodeText = oScope["AddlGlassBucketColourCodeControlId"].GetSelectedText();
            txtGlassBucketOthersControlId = oScope.NewDCModel["txtGlassBucketOthersControlId"];
            chkGlassBucketScoreContainerControlId = oScope["chkGlassBucketScoreContainerControlId"].GetSelectedText();
            chkGlassBucketAmberFailContaminatesControlId = oScope["chkGlassBucketAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkGlassBucketRedFailContaminatesControlId = oScope["chkGlassBucketRedFailContaminatesControlId"].GetSelectedValue().length;;



            //CardboardBox
            chkCardboardBoxContainerTypeControlId = oScope["chkCardboardBoxContainerTypeControlId"].GetSelectedValue();
            //AddlCardboardBoxSizeControlId = oScope["AddlCardboardBoxSizeControlId"].GetSelectedValue();
            AddlCardboardBoxSizeText = oScope["AddlCardboardBoxSizeControlId"].GetSelectedText();
            //AddlCardboardBoxColourCodeControlId = oScope["AddlCardboardBoxColourCodeControlId"].GetSelectedValue();
            AddlCardboardBoxColourCodeText = oScope["AddlCardboardBoxColourCodeControlId"].GetSelectedText();
            txtCardboardBoxOthersControlId = oScope.NewDCModel["txtCardboardBoxOthersControlId"];
            chkCardboardBoxScoreContainerControlId = oScope["chkCardboardBoxScoreContainerControlId"].GetSelectedText();
            chkCardboardBoxAmberFailContaminatesControlId = oScope["chkCardboardBoxAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkCardboardBoxRedFailContaminatesControlId = oScope["chkCardboardBoxRedFailContaminatesControlId"].GetSelectedValue().length;;



            //CartridgeReCyclingBox
            chkCartridgeReCyclingBoxContainerTypeControlId = oScope["chkCartridgeReCyclingBoxContainerTypeControlId"].GetSelectedValue();
            //AddlCartridgeReCyclingBoxSizeControlId = oScope["AddlCartridgeReCyclingBoxSizeControlId"].GetSelectedValue();
            AddlCartridgeReCyclingBoxSizeText = oScope["AddlCartridgeReCyclingBoxSizeControlId"].GetSelectedText();
            //AddlCartridgeReCyclingBoxColourCodeControlId = oScope["AddlCartridgeReCyclingBoxColourCodeControlId"].GetSelectedValue();
            AddlCartridgeReCyclingBoxColourCodeText = oScope["AddlCartridgeReCyclingBoxColourCodeControlId"].GetSelectedText();
            txtCartridgeReCyclingBoxOthersControlId = oScope.NewDCModel["txtCartridgeReCyclingBoxOthersControlId"];
            chkCartridgeReCyclingBoxScoreContainerControlId = oScope["chkCartridgeReCyclingBoxScoreContainerControlId"].GetSelectedText();
            chkCartridgeReCyclingBoxAmberFailContaminatesControlId = oScope["chkCartridgeReCyclingBoxAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkCartridgeReCyclingBoxRedFailContaminatesControlId = oScope["chkCartridgeReCyclingBoxRedFailContaminatesControlId"].GetSelectedValue().length;;
            
            if (AddlRoomTypeText == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Room Type ";
                IsSuccess = false;
            }
            if (chkLocalWasteProcedureControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Local Waste Procedure ";
                IsSuccess = false;
            }
            //if (ChkContainerTypeDummyBandControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Container Type ";
            //    IsSuccess = false;
            //}

            if (chkSharpsBinContainerTypeControlId == "" && chkRigidPlasticContainerTypeControlId == ""
                && chkRigidCardContainerTypeControlId == "" && chkBagContainerTypeControlId == ""
                && chkGlassBucketContainerTypeControlId == "" && chkCardboardBoxContainerTypeControlId == ""
                && chkCartridgeReCyclingBoxContainerTypeControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "atleast one container details";
                IsSuccess = false;
            }

            else {
                //SharpsBin
                if (chkSharpsBinContainerTypeControlId == 1) {
                    if (AddlSharpsBinSizeText == "" || (AddlSharpsBinColourCodeText == "" || (AddlSharpsBinColourCodeText == "Other (please specify)" && txtSharpsBinOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkSharpsBinLabelUsefulControlId == "" || chkSharpsBinLidMatchLabelControlId == "" || chkBinProperlyAssembledControlId == "" || chkAssembledByLabelCompletedControlId == ""
                        || chkClosureMechanismInUseControlId == "" || chkSharpsBinOverfilledControlId == "" || chkBinLabelUsefulControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Questions";
                        IsSuccess = false;
                    }
                    if (chkSharpsBinScoreContainerControlId == "" ||  (chkSharpsBinScoreContainerControlId == "Fail" && (chkSharpsAmberFailContaminatesControlId == 0 && chkSharpsRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Cont. Status";
                        IsSuccess = false;
                    }
                }

                //RigidPlastic
                if (chkRigidPlasticContainerTypeControlId == 1) {
                    if (AddlRigidPlasticSizeText == "" || (AddlRigidPlasticColourCodeText == "" || (AddlRigidPlasticColourCodeText == "Other (please specify)" && txtRigidPlasticOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkRigidPlasticWasteTypesBinLabelControlId == "" || chkRigidPlasticBinLabelUsefulControlId == "" || chkRigidPlasticBinLidMatchLabelControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Questions";
                        IsSuccess = false;
                    }
                    if (chkRigidPlasticScoreContainerControlId == "" || (chkRigidPlasticScoreContainerControlId == "Fail" && (chkRigidPlasticAmberFailContaminatesControlId == 0 && chkRigidPlasticRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Cont. Status";
                        IsSuccess = false;
                    }
                }

                //RigidCard
                if (chkRigidCardContainerTypeControlId == 1) {
                    if (AddlRigidCardSizeText == "" || (AddlRigidCardColourCodeText == "" || (AddlRigidCardColourCodeText == "Other (please specify)" && txtRigidCardOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkRigidCardWasteTypesBinLabelControlId == "" || chkRigidCardBinLabelUsefulControlId == "" || chkRigidCardBinLidMatchLabelControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Questions";
                        IsSuccess = false;
                    }
                    if (chkRigidCardScoreContainerControlId == "" || (chkRigidCardScoreContainerControlId == "Fail" && (chkRigidCardRedFailContaminatesControlId == 0 && chkRigidPlasticRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Cont. Status";
                        IsSuccess = false;
                    }
                }


                //Bag
                if (chkBagContainerTypeControlId == 1) {
                    if (AddlBagSizeText == "" || (AddlBagColourCodeText == "" || (AddlBagColourCodeText == "Other (please specify)" && txtBagOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkPedalBinLabelledControlId == "" || chkPedalBinLabelMatchControlId == "" || chkBagOverfilledControlId == ""
                        || chkBinDamagedControlId == "" || chkBinDamagedControlId == "" || chkBinAppropriateForBagControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Questions";
                        IsSuccess = false;
                    }
                    if (chkBagScoreContainerControlId == "" || (chkBagScoreContainerControlId == "Fail" && (chkBagAmberFailContaminatesControlId == 0 && chkBagRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Cont. Status";
                        IsSuccess = false;
                    }
                }


                //GlassBucket
                if (chkGlassBucketContainerTypeControlId == 1) {
                    if (AddlGlassBucketSizeText == "" || (AddlGlassBucketColourCodeText == "" || (AddlGlassBucketColourCodeText == "Other (please specify)" && txtGlassBucketOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Glass Bucket Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkGlassBucketScoreContainerControlId == "" || (chkGlassBucketScoreContainerControlId == "Fail" && (chkGlassBucketAmberFailContaminatesControlId == 0 && chkGlassBucketRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Glass Bucket Cont. Status";
                        IsSuccess = false;
                    }
                }


                //CardboardBox
                if (chkCardboardBoxContainerTypeControlId == 1) {
                    if (AddlCardboardBoxSizeText == "" || (AddlCardboardBoxColourCodeText == "" || (AddlCardboardBoxColourCodeText == "Other (please specify)" && txtCardboardBoxOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cardboard Box Cont. Info";
                        IsSuccess = false;
                    }                    
                    if (chkCardboardBoxScoreContainerControlId == "" || (chkCardboardBoxScoreContainerControlId == "Fail" && (chkCardboardBoxAmberFailContaminatesControlId == 0 && chkCardboardBoxRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cardboard Box Cont. Status";
                        IsSuccess = false;
                    }
                }

                //CartridgeReCyclingBox
                if (chkCartridgeReCyclingBoxContainerTypeControlId == 1) {
                    if (AddlCartridgeReCyclingBoxSizeText == "" || (AddlCartridgeReCyclingBoxColourCodeText == "" || (AddlCartridgeReCyclingBoxColourCodeText == "Other (please specify)" && txtCartridgeReCyclingBoxOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cartridge Re-cycling Box Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkCartridgeReCyclingBoxScoreContainerControlId == "" || (chkCartridgeReCyclingBoxScoreContainerControlId == "Fail" && (chkCartridgeReCyclingBoxAmberFailContaminatesControlId == 0 && chkCartridgeReCyclingBoxRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cartridge Re-cycling Box Cont. Status";
                        IsSuccess = false;
                    }
                }

            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PreAcceptanceCompositionAnalysisValidation", Excep);
        }
    }

    var PreAcceptanceLocalWasteStorageValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-SPA-003 :: Please enter ";
          
            var ErrorMessage = "";
           
            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

                for (var i = 1; i <= 23; i++) {
                    if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                        IsSuccess = true;
                        break;
                    }
                    else {
                        WasteTypeIsSuccess = false;
                    }
                }

                if (IsSuccess == true) {
                    //CommonMessage = "MN-RQ-SPA-003 :: Please complete the following waste types to submit for approval : ";
                    for (var itrWasteType in WasteTypeMandatoryStatus) {
                        if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                            IsSuccess = false;
                            WasteTypeIsSuccess = false;
                            WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                        }
                    }
                }
            //}
                if (scope["chkLocalWasteStorageType_253"].GetSelectedValue().length <=0) {
                   
                    if (ErrorMessage == "") {
                        ErrorMessage = "Local Waste Storage Type, ";
                       
                    }
                    else {
                      
                        ErrorMessage = "Local Waste Storage Type, " + ErrorMessage;
                    }
                    IsSuccess = false;
                }

                if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

                    if (ErrorMessage == "") {
                        ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                    }
                    else {
                        CommonMessage = "MN-RQ-SPA-003 :: Please enter ";
                        ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                    }
                    IsSuccess = false;
                }

                if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {
                    
                    if (ErrorMessage == "") {
                        ErrorMessage = "Is there evidence of leakage from any waste streams, ";
                    }                    
                    else {
                        CommonMessage = "MN-RQ-SPA-003 :: Please enter ";
                        ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
                    }
                    IsSuccess = false;
                }
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
                    }
                if (WasteTypeIsSuccess == false) {
                    if (WasteTypeMessage == "") {
                        WasteTypeMessage = "complete atleast one waste type details, ";
                    }
                    else {
                        WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                    }

                    if (WasteTypeMessage != "") {
                        WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                    }
                    if (ErrorMessage == "") {
                        CommonMessage = "MN-RQ-SPA-003 :: Please ";
                        ErrorMessage = WasteTypeMessage;
                    }
                    else {
                      
                        ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                    }
                }

            

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;
              
                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PreAcceptanceCompositionAnalysisValidation", Excep);
        }
    }

    var  SingleDepartmentQuestionnaireValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var GeneralDomesticStatus = true;

            var CommonMessage = "MN-RQ-SDQ-001 :: Please complete the following categories to submit for approval : ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var PermanentStaff = "";
            var AgencyStaff = "";
            var WasteManagePolicy = "";
            var LocalWasteProcedure = "";
            var Numberofstaff = "";
            var SegregationChart = "";
            var Location = "";

            var GeneralDomestic = "";
            var GeneralDomesticglass = "";
            var ConfidentialWaste = "";
            var Printercartridges = "";
            var Cytotoxiccytostaticsharps = "";
            var Nonsharpcytotoxiccytostaticwaste = "";
            var Cytotoxiccytostaticincontinencewaste = "";
            var Medicinallycontaminatedsharps = "";
            var NonsharpsMedicinalwaste = "";
            var Controlleddrugs = "";
            var SharpsWaste = "";
            var NonSharpsWaste = "";
            var NonCytotoxic = "";
            var NonMedicinalSharps = "";
            var InfectiousWaste = "";
            var OffensiveWaste = "";
            var AutoclavedWaste = "";
            var AnatomicalWaste = "";
            var Amalgam = "";
            var Gypsum = "";
            var HandGelPouches = "";
            var WasteChemicals = "";
            var CatAdiagnostics = "";

            var GeneralDomesticContainer = "";
            var GeneralDomesticglassContainer = "";
            var ConfidentialWasteContainer = "";
            var PrintercartridgesContainer = "";
            var CytotoxiccytostaticsharpsContainer = "";
            var NonsharpcytotoxiccytostaticwasteContainer = "";
            var CytotoxiccytostaticincontinencewasteContainer = "";
            var MedicinallycontaminatedsharpsContainer = "";
            var NonsharpsMedicinalwasteContainer = "";
            var ControlleddrugsContainer = "";
            var SharpsWasteContainer = "";
            var NonSharpsWasteContainer = "";
            var NonCytotoxicContainer = "";
            var NonMedicinalSharpsContainer = "";
            var InfectiousWasteContainer = "";
            var OffensiveWasteContainer = "";
            var AutoclavedWasteContainer = "";
            var AnatomicalWasteContainer = "";
            var AmalgamContainer = "";
            var GypsumContainer = "";
            var HandGelPouchesContainer = "";
            var WasteChemicalsContainer = "";
            var CatAdiagnosticsContainer = "";

            //  if (AryDcResultDetails == undefined) {
            //alert('scope.NewDCModel' + scope.NewDCModel);
            PermanentStaff = oScope.NewDCModel["txtPermanentStaffControlId"];
            AgencyStaff = oScope.NewDCModel["txtAgencyStaffControlId"];
            WasteManagePolicy = oScope["chkWasteManagePolicyControlId"].GetSelectedValue();
            LocalWasteProcedure = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            Numberofstaff = oScope.NewDCModel["txtNumberofstaffControlId"];
            SegregationChart = oScope["chkSegregationChartControlId"].GetSelectedValue();
            Location = oScope.NewDCModel["txtLocationControlId"];

            GeneralDomestic = oScope["chkGeneralDomesticControlId"].GetSelectedValue();
            GeneralDomesticglass = oScope["chkGeneralDomesticglassControlId"].GetSelectedValue();
            ConfidentialWaste = oScope["chkConfidentialWasteControlId"].GetSelectedValue();
            Printercartridges = oScope["chkPrinterCartridgesControlId"].GetSelectedValue();
            Cytotoxiccytostaticsharps = oScope["chkCytotoxicSharpsControlId"].GetSelectedValue();
            Nonsharpcytotoxiccytostaticwaste = oScope["chkNonsharpwasteControlId"].GetSelectedValue();
            Cytotoxiccytostaticincontinencewaste = oScope["chkCytotoxicIncontinenceWasteControlId"].GetSelectedValue();
            Medicinallycontaminatedsharps = oScope["chkMedicinallysharpsControlId"].GetSelectedValue();
            NonsharpsMedicinalwaste = oScope["chkNonsharpsMedicinalControlId"].GetSelectedValue();
            Controlleddrugs = oScope["chkControlledDrugsControlId"].GetSelectedValue();
            SharpsWaste = oScope["chkSharpsWasteControlId"].GetSelectedValue();
            NonSharpsWaste = oScope["chkNonSharpsWasteControlId"].GetSelectedValue();
            NonCytotoxic = oScope["chkNonCytotoxicControlId"].GetSelectedValue();
            NonMedicinalSharps = oScope["chkNonMedicinalSharpsControlId"].GetSelectedValue();
            InfectiousWaste = oScope["chkInfectiousWasteControlId"].GetSelectedValue();
            OffensiveWaste = oScope["chkOffensiveWasteControlId"].GetSelectedValue();
            AutoclavedWaste = oScope["chkAutoclavedWasteControlId"].GetSelectedValue();
            AnatomicalWaste = oScope["chkAnatomicalWasteControlId"].GetSelectedValue();
            Amalgam = oScope["chkAmalgamControlId"].GetSelectedValue();
            Gypsum = oScope["chkGypsumControlId"].GetSelectedValue();
            HandGelPouches = oScope["chkHandGelPouchesControlId"].GetSelectedValue();
            WasteChemicals = oScope["chkWasteChemicalsControlId"].GetSelectedValue();
            CatAdiagnostics = oScope["chkCatAdiagnosticsControlId"].GetSelectedValue();

            GeneralDomesticContainer = oScope["chkGDContainerTypeControlId"].GetSelectedValue().length;
            GeneralDomesticglassContainer = oScope["chkGDGlassContainerTypeControlId"].GetSelectedValue().length;
            ConfidentialWasteContainer = oScope["chkConfidentialWasteContainerTypeControlId"].GetSelectedValue().length;
            PrintercartridgesContainer = oScope["chkPrintercartridgesContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticsharpsContainer = oScope["chkCytotoxicSharpsContainerTypeControlId"].GetSelectedValue().length;
            NonsharpcytotoxiccytostaticwasteContainer = oScope["chkNonsharpwasteContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticincontinencewasteContainer = oScope["chkCytotoxicIncontinenceWasteContainerTypeControlId"].GetSelectedValue().length;
            MedicinallycontaminatedsharpsContainer = oScope["chkMedicinallyContainerTypeControlId"].GetSelectedValue().length;
            NonsharpsMedicinalwasteContainer = oScope["chkNonsharpsMedicinalContainerTypeControlId"].GetSelectedValue().length;
            ControlleddrugsContainer = oScope["chkControlledDrugsContainerTypeControlId"].GetSelectedValue().length;
            SharpsWasteContainer = oScope["chkSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonSharpsWasteContainer = oScope["chkNonSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonCytotoxicContainer = oScope["chkNonCytotoxicContainerTypeControlId"].GetSelectedValue().length;
            NonMedicinalSharpsContainer = oScope["chkNonMedicinalSharpsContainerTypeControlId"].GetSelectedValue().length;
            InfectiousWasteContainer = oScope["chkInfectiousWasteContainerTypeControlId"].GetSelectedValue().length;
            OffensiveWasteContainer = oScope["chkOffensiveWasteContainerTypeControlId"].GetSelectedValue().length;
            AutoclavedWasteContainer = oScope["chkAutoclavedWasteContainerTypeControlId"].GetSelectedValue().length;
            AnatomicalWasteContainer = oScope["chkAnatomicalWasteContainerTypeControlId"].GetSelectedValue().length;
            AmalgamContainer = oScope["chkAmalgamContainerTypeControlId"].GetSelectedValue().length;
            GypsumContainer = oScope["chkGypsumContainerTypeControlId"].GetSelectedValue().length;
            HandGelPouchesContainer = oScope["chkHandGelPouchesContainerTypeControlId"].GetSelectedValue().length;
            WasteChemicalsContainer = oScope["chkWasteChemicalsContainerTypeControlId"].GetSelectedValue().length;
            CatAdiagnosticsContainer = oScope["chkCatAdiagnosticsContainerTypeControlId"].GetSelectedValue().length;
            //}

            if (PermanentStaff == "" || AgencyStaff == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Staff Information ";
                IsSuccess = false;
            }
            if (WasteManagePolicy == "" || LocalWasteProcedure == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Policy and Procedure ";
                IsSuccess = false;
            }
            if (Numberofstaff == "" || SegregationChart == "" || (SegregationChart != "" && (SegregationChart == 1 && Location == ""))) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Reference and training ";
                IsSuccess = false;
            }

            if (GeneralDomestic == "" || GeneralDomesticglass == "" || ConfidentialWaste == "" || Printercartridges == "" || Cytotoxiccytostaticsharps == "" || Nonsharpcytotoxiccytostaticwaste == "" || Cytotoxiccytostaticincontinencewaste == "" ||
                Medicinallycontaminatedsharps == "" || NonsharpsMedicinalwaste == "" || Controlleddrugs == "" || SharpsWaste == "" || NonSharpsWaste == "" || NonCytotoxic == "" || NonMedicinalSharps == "" || InfectiousWaste == "" || OffensiveWaste == "" ||
                AutoclavedWaste == "" || AnatomicalWaste == "" || Amalgam == "" || Gypsum == "" || HandGelPouches == "" || WasteChemicals == "" || CatAdiagnostics == "") {
                WasteStreamSuccess = false;
            }

            if (WasteStreamSuccess == true) {


                if ((GeneralDomestic != "" && (GeneralDomestic == 1 && GeneralDomesticContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((GeneralDomesticglass != "" && (GeneralDomesticglass == 1 && GeneralDomesticglassContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((ConfidentialWaste != "" && (ConfidentialWaste == 1 && ConfidentialWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Printercartridges != "" && (Printercartridges == 1 && PrintercartridgesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticsharps != "" && (Cytotoxiccytostaticsharps == 1 && CytotoxiccytostaticsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Nonsharpcytotoxiccytostaticwaste != "" && (Nonsharpcytotoxiccytostaticwaste == 1 && NonsharpcytotoxiccytostaticwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticincontinencewaste != "" && (Cytotoxiccytostaticincontinencewaste == 1 && CytotoxiccytostaticincontinencewasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Medicinallycontaminatedsharps != "" && (Medicinallycontaminatedsharps == 1 && MedicinallycontaminatedsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonsharpsMedicinalwaste != "" && (NonsharpsMedicinalwaste == 1 && NonsharpsMedicinalwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Controlleddrugs != "" && (Controlleddrugs == 1 && ControlleddrugsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((SharpsWaste != "" && (SharpsWaste == 1 && SharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonSharpsWaste != "" && (NonSharpsWaste == 1 && NonSharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonCytotoxic != "" && (NonCytotoxic == 1 && NonCytotoxicContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonMedicinalSharps != "" && (NonMedicinalSharps == 1 && NonMedicinalSharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((InfectiousWaste != "" && (InfectiousWaste == 1 && InfectiousWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((OffensiveWaste != "" && (OffensiveWaste == 1 && OffensiveWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AutoclavedWaste != "" && (AutoclavedWaste == 1 && AutoclavedWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AnatomicalWaste != "" && (AnatomicalWaste == 1 && AnatomicalWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Amalgam != "" && (Amalgam == 1 && AmalgamContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Gypsum != "" && (Gypsum == 1 && GypsumContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((HandGelPouches != "" && (HandGelPouches == 1 && HandGelPouchesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((WasteChemicals != "" && (WasteChemicals == 1 && WasteChemicalsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((CatAdiagnostics != "" && (CatAdiagnostics == 1 && CatAdiagnosticsContainer == 0))) {
                    WasteStreamSuccess = false;
                }

            }

            if (WasteStreamSuccess == false) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Waste Streams ";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SingleDepartmentQuestionnaireValidation", Excep);
        }
    }

    var SingleDepartmentCompositionAnalysisValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var CommonMessage = "MN-RQ-SCA-003 :: Please complete the following categories to submit for approval : ";

            var AddlRoomTypeText = "";
            var chkLocalWasteProcedureControlId = "";
            //var ChkContainerTypeDummyBandControlId = "";

            //Sharps Bin
            var chkSharpsBinContainerTypeControlId = "";
            //var AddlSharpsBinSizeControlId = "";
            var AddlSharpsBinSizeText = "";
            //var AddlSharpsBinColourCodeControlId = "";
            var AddlSharpsBinColourCodeText = "";
            var txtSharpsBinOthersControlId = "";
            var chkSharpsBinLabelUsefulControlId = "";
            var chkSharpsBinLidMatchLabelControlId = "";
            var chkBinProperlyAssembledControlId = "";
            var chkAssembledByLabelCompletedControlId = "";
            var chkClosureMechanismInUseControlId = "";
            var chkSharpsBinOverfilledControlId = "";
            var chkBinLabelUsefulControlId = "";
            var chkSharpsBinScoreContainerControlId = "";
            var chkSharpsAmberFailContaminatesControlId = "";
            var chkSharpsRedFailContaminatesControlId = "";


            //Rigid Container Plastic
            var chkRigidPlasticContainerTypeControlId = "";
            //var AddlRigidPlasticSizeControlId = "";
            var AddlRigidPlasticSizeText = "";
            //var AddlRigidPlasticColourCodeControlId = "";
            var AddlRigidPlasticColourCodeText = "";
            var txtRigidPlasticOthersControlId = "";
            var chkRigidPlasticWasteTypesBinLabelControlId = "";
            var chkRigidPlasticBinLabelUsefulControlId = "";
            var chkRigidPlasticBinLidMatchLabelControlId = "";
            var chkRigidPlasticScoreContainerControlId = "";
            var chkRigidPlasticAmberFailContaminatesControlId = "";
            var chkRigidPlasticRedFailContaminatesControlId = "";



            //Rigid Container Card
            var chkRigidCardContainerTypeControlId = "";
            //var AddlRigidCardSizeControlId = "";
            var AddlRigidCardSizeText = "";
            //var AddlRigidCardColourCodeControlId = "";
            var AddlRigidCardColourCodeText = "";
            var txtRigidCardOthersControlId = "";
            var chkRigidCardWasteTypesBinLabelControlId = "";
            var chkRigidCardBinLabelUsefulControlId = "";
            var chkRigidCardBinLidMatchLabelControlId = "";
            var chkRigidCardScoreContainerControlId = "";
            var chkRigidCardAmberFailContaminatesControlId = "";
            var chkRigidCardRedFailContaminatesControlId = "";



            //Bag
            var chkBagContainerTypeControlId = "";
            //var AddlBagSizeControlId = "";
            var AddlBagSizeText = "";
            //var AddlBagColourCodeControlId = "";
            var AddlBagColourCodeText = "";
            var txtBagOthersControlId = "";
            var chkPedalBinLabelledControlId = "";
            var chkPedalBinLabelMatchControlId = "";
            var chkBagOverfilledControlId = "";
            var chkBinDamagedControlId = "";
            var chkBinAppropriateForBagControlId = "";
            var chkBagScoreContainerControlId = "";
            var chkBagAmberFailContaminatesControlId = "";
            var chkBagRedFailContaminatesControlId = "";


            //GlassBucket
            var chkGlassBucketContainerTypeControlId = "";
            //var AddlGlassBucketSizeControlId = "";
            var AddlGlassBucketSizeText = "";
            //var AddlGlassBucketColourCodeControlId = "";
            var AddlGlassBucketColourCodeText = "";
            var txtGlassBucketOthersControlId = "";
            var chkGlassBucketScoreContainerControlId = "";
            var chkGlassBucketAmberFailContaminatesControlId = "";
            var chkGlassBucketRedFailContaminatesControlId = "";

            //CardboardBox
            var chkCardboardBoxContainerTypeControlId = "";
            //var AddlCardboardBoxSizeControlId = "";
            var AddlCardboardBoxSizeText = "";
            //var AddlCardboardBoxColourCodeControlId = "";
            var AddlCardboardBoxColourCodeText = "";
            var txtCardboardBoxOthersControlId = "";
            var chkCardboardBoxScoreContainerControlId = "";
            var chkCardboardBoxAmberFailContaminatesControlId = "";
            var chkCardboardBoxRedFailContaminatesControlId = "";


            //CartridgeReCyclingBox
            var chkCartridgeReCyclingBoxContainerTypeControlId = "";
            //var AddlCartridgeReCyclingBoxSizeControlId = "";
            var AddlCartridgeReCyclingBoxSizeText = "";
            //var AddlCartridgeReCyclingBoxColourCodeControlId = "";
            var AddlCartridgeReCyclingBoxColourCodeText = "";
            var txtCartridgeReCyclingBoxOthersControlId = "";
            var chkCartridgeReCyclingBoxScoreContainerControlId = "";
            var chkCartridgeReCyclingBoxAmberFailContaminatesControlId = "";
            var chkCartridgeReCyclingBoxRedFailContaminatesControlId = "";




            AddlRoomTypeText = oScope["AddlRoomTypeControlId"].GetSelectedText();
            chkLocalWasteProcedureControlId = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            //ChkContainerTypeDummyBandControlId = oScope["ChkContainerTypeDummyBandControlId"].GetSelectedValue();

            //Sharps Bin
            chkSharpsBinContainerTypeControlId = oScope["chkSharpsBinContainerTypeControlId"].GetSelectedValue();
            //AddlSharpsBinSizeControlId = oScope["AddlSharpsBinSizeControlId"].GetSelectedValue();
            AddlSharpsBinSizeText = oScope["AddlSharpsBinSizeControlId"].GetSelectedText();
            //AddlSharpsBinColourCodeControlId = oScope["AddlSharpsBinColourCodeControlId"].GetSelectedValue();
            AddlSharpsBinColourCodeText = oScope["AddlSharpsBinColourCodeControlId"].GetSelectedText();
            txtSharpsBinOthersControlId = oScope.NewDCModel["txtSharpsBinOthersControlId"];
            chkSharpsBinLabelUsefulControlId = oScope["chkSharpsBinLabelUsefulControlId"].GetSelectedValue();
            chkSharpsBinLidMatchLabelControlId = oScope["chkSharpsBinLidMatchLabelControlId"].GetSelectedValue();
            chkBinProperlyAssembledControlId = oScope["chkBinProperlyAssembledControlId"].GetSelectedValue();
            chkAssembledByLabelCompletedControlId = oScope["chkAssembledByLabelCompletedControlId"].GetSelectedValue();
            chkClosureMechanismInUseControlId = oScope["chkClosureMechanismInUseControlId"].GetSelectedValue();
            chkSharpsBinOverfilledControlId = oScope["chkSharpsBinOverfilledControlId"].GetSelectedValue();
            chkBinLabelUsefulControlId = oScope["chkBinLabelUsefulControlId"].GetSelectedValue();
            chkSharpsBinScoreContainerControlId = oScope["chkSharpsBinScoreContainerControlId"].GetSelectedText();
            chkSharpsAmberFailContaminatesControlId = oScope["chkSharpsAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkSharpsRedFailContaminatesControlId = oScope["chkSharpsRedFailContaminatesControlId"].GetSelectedValue().length;;



            //Rigid Container Plastic
            chkRigidPlasticContainerTypeControlId = oScope["chkRigidPlasticContainerTypeControlId"].GetSelectedValue();
            //AddlRigidPlasticSizeControlId = oScope["AddlRigidPlasticSizeControlId"].GetSelectedValue();
            AddlRigidPlasticSizeText = oScope["AddlRigidPlasticSizeControlId"].GetSelectedText();
            //AddlRigidPlasticColourCodeControlId = oScope["AddlRigidPlasticColourCodeControlId"].GetSelectedValue();
            AddlRigidPlasticColourCodeText = oScope["AddlRigidPlasticColourCodeControlId"].GetSelectedText();
            txtRigidPlasticOthersControlId = oScope.NewDCModel["txtRigidPlasticOthersControlId"];
            chkRigidPlasticWasteTypesBinLabelControlId = oScope["chkRigidPlasticWasteTypesBinLabelControlId"].GetSelectedValue();
            chkRigidPlasticBinLabelUsefulControlId = oScope["chkRigidPlasticBinLabelUsefulControlId"].GetSelectedValue();
            chkRigidPlasticBinLidMatchLabelControlId = oScope["chkRigidPlasticBinLidMatchLabelControlId"].GetSelectedValue();
            chkRigidPlasticScoreContainerControlId = oScope["chkRigidPlasticScoreContainerControlId"].GetSelectedText();
            chkRigidPlasticAmberFailContaminatesControlId = oScope["chkRigidPlasticAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkRigidPlasticRedFailContaminatesControlId = oScope["chkRigidPlasticRedFailContaminatesControlId"].GetSelectedValue().length;;



            //Rigid Container Card
            chkRigidCardContainerTypeControlId = oScope["chkRigidCardContainerTypeControlId"].GetSelectedValue();
            //AddlRigidCardSizeControlId = oScope["AddlRigidCardSizeControlId"].GetSelectedValue();
            AddlRigidCardSizeText = oScope["AddlRigidCardSizeControlId"].GetSelectedText();
            //AddlRigidCardColourCodeControlId = oScope["AddlRigidCardColourCodeControlId"].GetSelectedValue();
            AddlRigidCardColourCodeText = oScope["AddlRigidCardColourCodeControlId"].GetSelectedText();
            txtRigidCardOthersControlId = oScope.NewDCModel["txtRigidCardOthersControlId"];
            chkRigidCardWasteTypesBinLabelControlId = oScope["chkRigidCardWasteTypesBinLabelControlId"].GetSelectedValue();
            chkRigidCardBinLabelUsefulControlId = oScope["chkRigidCardBinLabelUsefulControlId"].GetSelectedValue();
            chkRigidCardBinLidMatchLabelControlId = oScope["chkRigidCardBinLidMatchLabelControlId"].GetSelectedValue();
            chkRigidCardScoreContainerControlId = oScope["chkRigidCardScoreContainerControlId"].GetSelectedText();
            chkRigidCardAmberFailContaminatesControlId = oScope["chkRigidCardAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkRigidCardRedFailContaminatesControlId = oScope["chkRigidCardRedFailContaminatesControlId"].GetSelectedValue().length;;


            //Bag
            chkBagContainerTypeControlId = oScope["chkBagContainerTypeControlId"].GetSelectedValue();
            AddlBagSizeControlId = oScope["AddlBagSizeControlId"].GetSelectedValue();
            AddlBagSizeText = oScope["AddlBagSizeControlId"].GetSelectedText();
            //AddlBagColourCodeControlId = oScope["AddlBagColourCodeControlId"].GetSelectedValue();
            AddlBagColourCodeText = oScope["AddlBagColourCodeControlId"].GetSelectedText();
            txtBagOthersControlId = oScope.NewDCModel["txtBagOthersControlId"];
            chkPedalBinLabelledControlId = oScope["chkPedalBinLabelledControlId"].GetSelectedValue();
            chkPedalBinLabelMatchControlId = oScope["chkPedalBinLabelMatchControlId"].GetSelectedValue();
            chkBagOverfilledControlId = oScope["chkBagOverfilledControlId"].GetSelectedValue();
            chkBinDamagedControlId = oScope["chkBinDamagedControlId"].GetSelectedValue();
            chkBinAppropriateForBagControlId = oScope["chkBinAppropriateForBagControlId"].GetSelectedValue();
            chkBagScoreContainerControlId = oScope["chkBagScoreContainerControlId"].GetSelectedText();
            chkBagAmberFailContaminatesControlId = oScope["chkBagAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkBagRedFailContaminatesControlId = oScope["chkBagRedFailContaminatesControlId"].GetSelectedValue().length;;


            //GlassBucket
            chkGlassBucketContainerTypeControlId = oScope["chkGlassBucketContainerTypeControlId"].GetSelectedValue();
            AddlGlassBucketSizeControlId = oScope["AddlGlassBucketSizeControlId"].GetSelectedValue();
            AddlGlassBucketSizeText = oScope["AddlGlassBucketSizeControlId"].GetSelectedText();
            //AddlGlassBucketColourCodeControlId = oScope["AddlGlassBucketColourCodeControlId"].GetSelectedValue();
            AddlGlassBucketColourCodeText = oScope["AddlGlassBucketColourCodeControlId"].GetSelectedText();
            txtGlassBucketOthersControlId = oScope.NewDCModel["txtGlassBucketOthersControlId"];
            chkGlassBucketScoreContainerControlId = oScope["chkGlassBucketScoreContainerControlId"].GetSelectedText();
            chkGlassBucketAmberFailContaminatesControlId = oScope["chkGlassBucketAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkGlassBucketRedFailContaminatesControlId = oScope["chkGlassBucketRedFailContaminatesControlId"].GetSelectedValue().length;;



            //CardboardBox
            chkCardboardBoxContainerTypeControlId = oScope["chkCardboardBoxContainerTypeControlId"].GetSelectedValue();
            //AddlCardboardBoxSizeControlId = oScope["AddlCardboardBoxSizeControlId"].GetSelectedValue();
            AddlCardboardBoxSizeText = oScope["AddlCardboardBoxSizeControlId"].GetSelectedText();
            //AddlCardboardBoxColourCodeControlId = oScope["AddlCardboardBoxColourCodeControlId"].GetSelectedValue();
            AddlCardboardBoxColourCodeText = oScope["AddlCardboardBoxColourCodeControlId"].GetSelectedText();
            txtCardboardBoxOthersControlId = oScope.NewDCModel["txtCardboardBoxOthersControlId"];
            chkCardboardBoxScoreContainerControlId = oScope["chkCardboardBoxScoreContainerControlId"].GetSelectedText();
            chkCardboardBoxAmberFailContaminatesControlId = oScope["chkCardboardBoxAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkCardboardBoxRedFailContaminatesControlId = oScope["chkCardboardBoxRedFailContaminatesControlId"].GetSelectedValue().length;;



            //CartridgeReCyclingBox
            chkCartridgeReCyclingBoxContainerTypeControlId = oScope["chkCartridgeReCyclingBoxContainerTypeControlId"].GetSelectedValue();
            //AddlCartridgeReCyclingBoxSizeControlId = oScope["AddlCartridgeReCyclingBoxSizeControlId"].GetSelectedValue();
            AddlCartridgeReCyclingBoxSizeText = oScope["AddlCartridgeReCyclingBoxSizeControlId"].GetSelectedText();
            //AddlCartridgeReCyclingBoxColourCodeControlId = oScope["AddlCartridgeReCyclingBoxColourCodeControlId"].GetSelectedValue();
            AddlCartridgeReCyclingBoxColourCodeText = oScope["AddlCartridgeReCyclingBoxColourCodeControlId"].GetSelectedText();
            txtCartridgeReCyclingBoxOthersControlId = oScope.NewDCModel["txtCartridgeReCyclingBoxOthersControlId"];
            chkCartridgeReCyclingBoxScoreContainerControlId = oScope["chkCartridgeReCyclingBoxScoreContainerControlId"].GetSelectedText();
            chkCartridgeReCyclingBoxAmberFailContaminatesControlId = oScope["chkCartridgeReCyclingBoxAmberFailContaminatesControlId"].GetSelectedValue().length;;
            chkCartridgeReCyclingBoxRedFailContaminatesControlId = oScope["chkCartridgeReCyclingBoxRedFailContaminatesControlId"].GetSelectedValue().length;;

            if (AddlRoomTypeText == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Room Type ";
                IsSuccess = false;
            }
            if (chkLocalWasteProcedureControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Local Waste Procedure ";
                IsSuccess = false;
            }
            //if (ChkContainerTypeDummyBandControlId == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Container Type ";
            //    IsSuccess = false;
            //}

            if (chkSharpsBinContainerTypeControlId == "" && chkRigidPlasticContainerTypeControlId == ""
                && chkRigidCardContainerTypeControlId == "" && chkBagContainerTypeControlId == ""
                && chkGlassBucketContainerTypeControlId == "" && chkCardboardBoxContainerTypeControlId == ""
                && chkCartridgeReCyclingBoxContainerTypeControlId == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "atleast one container details";
                IsSuccess = false;
            }

            else {
                //SharpsBin
                if (chkSharpsBinContainerTypeControlId == 1) {
                    if (AddlSharpsBinSizeText == "" || (AddlSharpsBinColourCodeText == "" || (AddlSharpsBinColourCodeText == "Other (please specify)" && txtSharpsBinOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkSharpsBinLabelUsefulControlId == "" || chkSharpsBinLidMatchLabelControlId == "" || chkBinProperlyAssembledControlId == "" || chkAssembledByLabelCompletedControlId == ""
                        || chkClosureMechanismInUseControlId == "" || chkSharpsBinOverfilledControlId == "" || chkBinLabelUsefulControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Questions";
                        IsSuccess = false;
                    }
                    if (chkSharpsBinScoreContainerControlId == "" || (chkSharpsBinScoreContainerControlId == "F" && (chkSharpsAmberFailContaminatesControlId == 0 && chkSharpsRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Sharps Bin Cont. Status";
                        IsSuccess = false;
                    }
                }

                //RigidPlastic
                if (chkRigidPlasticContainerTypeControlId == 1) {
                    if (AddlRigidPlasticSizeText == "" || (AddlRigidPlasticColourCodeText == "" || (AddlRigidPlasticColourCodeText == "Other (please specify)" && txtRigidPlasticOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkRigidPlasticWasteTypesBinLabelControlId == "" || chkRigidPlasticBinLabelUsefulControlId == "" || chkRigidPlasticBinLidMatchLabelControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Questions";
                        IsSuccess = false;
                    }
                    if (chkRigidPlasticScoreContainerControlId == "" || (chkRigidPlasticScoreContainerControlId == "F" && (chkRigidPlasticAmberFailContaminatesControlId == 0 && chkRigidPlasticRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Plastic Cont. Status";
                        IsSuccess = false;
                    }
                }

                //RigidCard
                if (chkRigidCardContainerTypeControlId == 1) {
                    if (AddlRigidCardSizeText == "" || (AddlRigidCardColourCodeText == "" || (AddlRigidCardColourCodeText == "Other (please specify)" && txtRigidCardOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkRigidCardWasteTypesBinLabelControlId == "" || chkRigidCardBinLabelUsefulControlId == "" || chkRigidCardBinLidMatchLabelControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Questions";
                        IsSuccess = false;
                    }
                    if (chkRigidCardScoreContainerControlId == "" || (chkRigidCardScoreContainerControlId == "F" && (chkRigidCardRedFailContaminatesControlId == 0 && chkRigidPlasticRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Rigid Card Cont. Status";
                        IsSuccess = false;
                    }
                }


                //Bag
                if (chkBagContainerTypeControlId == 1) {
                    if (AddlBagSizeText == "" || (AddlBagColourCodeText == "" || (AddlBagColourCodeText == "Other (please specify)" && txtBagOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkPedalBinLabelledControlId == "" || chkPedalBinLabelMatchControlId == "" || chkBagOverfilledControlId == ""
                        || chkBinDamagedControlId == "" || chkBinDamagedControlId == "" || chkBinAppropriateForBagControlId == "") {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Questions";
                        IsSuccess = false;
                    }
                    if (chkBagScoreContainerControlId == "" || (chkBagScoreContainerControlId == "F" && (chkBagAmberFailContaminatesControlId == 0 && chkBagRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Bag Cont. Status";
                        IsSuccess = false;
                    }
                }


                //GlassBucket
                if (chkGlassBucketContainerTypeControlId == 1) {
                    if (AddlGlassBucketSizeText == "" || (AddlGlassBucketColourCodeText == "" || (AddlGlassBucketColourCodeText == "Other (please specify)" && txtGlassBucketOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Glass Bucket Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkGlassBucketScoreContainerControlId == "" || (chkGlassBucketScoreContainerControlId == "F" && (chkGlassBucketAmberFailContaminatesControlId == 0 && chkGlassBucketRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Glass Bucket Cont. Status";
                        IsSuccess = false;
                    }
                }


                //CardboardBox
                if (chkCardboardBoxContainerTypeControlId == 1) {
                    if (AddlCardboardBoxSizeText == "" || (AddlCardboardBoxColourCodeText == "" || (AddlCardboardBoxColourCodeText == "Other (please specify)" && txtCardboardBoxOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cardboard Box Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkCardboardBoxScoreContainerControlId == "" || (chkCardboardBoxScoreContainerControlId == "F" && (chkCardboardBoxAmberFailContaminatesControlId == 0 && chkCardboardBoxRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cardboard Box Cont. Status";
                        IsSuccess = false;
                    }
                }

                //CartridgeReCyclingBox
                if (chkCartridgeReCyclingBoxContainerTypeControlId == 1) {
                    if (AddlCartridgeReCyclingBoxSizeText == "" || (AddlCartridgeReCyclingBoxColourCodeText == "" || (AddlCartridgeReCyclingBoxColourCodeText == "Other (please specify)" && txtCartridgeReCyclingBoxOthersControlId == ""))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cartridge Re-cycling Box Cont. Info";
                        IsSuccess = false;
                    }
                    if (chkCartridgeReCyclingBoxScoreContainerControlId == "" || (chkCartridgeReCyclingBoxScoreContainerControlId == "F" && (chkCartridgeReCyclingBoxAmberFailContaminatesControlId == 0 && chkCartridgeReCyclingBoxRedFailContaminatesControlId == 0))) {
                        if (ErrorMessage != "") {
                            ErrorMessage = ErrorMessage + ",";
                        }
                        ErrorMessage = ErrorMessage + "Cartridge Re-cycling Box Cont. Status";
                        IsSuccess = false;
                    }
                }

            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SingleDepartmentCompositionAnalysisValidation", Excep);
        }
    }

    var SingleDepartmentLocalWasteStorageValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-SDL-003 :: Please enter ";

            var ErrorMessage = "";

            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

            for (var i = 1; i <= 23; i++) {
                if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                    IsSuccess = true;
                    break;
                }
                else {
                    WasteTypeIsSuccess = false;
                }
            }

            if (IsSuccess == true) {
                //CommonMessage = "MN-RQ-SDL-003 :: Please complete the following waste types to submit for approval : ";
                for (var itrWasteType in WasteTypeMandatoryStatus) {
                    if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                        IsSuccess = false;
                        WasteTypeIsSuccess = false;
                        WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                    }
                }
            }
            //}
            if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Local Waste Storage Type, ";

                }
                else {

                    ErrorMessage = "Local Waste Storage Type, " + ErrorMessage;
                }
                IsSuccess = false;
            }

            if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                else {
                    CommonMessage = "MN-RQ-SDL-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                IsSuccess = false;
            }

            if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Is there evidence of leakage from any waste streams, ";
                }
                else {
                    CommonMessage = "MN-RQ-SDL-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
                }
                IsSuccess = false;
            }
            if (ErrorMessage != "") {
                ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
            }
            if (WasteTypeIsSuccess == false) {
                if (WasteTypeMessage == "") {
                    WasteTypeMessage = "complete atleast one waste type details, ";
                }
                else {
                    WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                }

                if (WasteTypeMessage != "") {
                    WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                }
                if (ErrorMessage == "") {
                    CommonMessage = "MN-RQ-SDL-003 :: Please ";
                    ErrorMessage = WasteTypeMessage;
                }
                else {

                    ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                }
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;

                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SingleDepartmentLocalWasteStorageValidation", Excep);
        }
    }

    var IncidentInvestigationElementsQuestionnaireValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var CommonMessage = "MN-RQ-IEQ-001 :: Please complete the following categories to submit for approval : ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var PermanentStaff = "";
            var AgencyStaff = "";
            var WasteManagePolicy = "";
            var LocalWasteProcedure = "";
            var Numberofstaff = "";
            var SegregationChart = "";
            var Location = "";

            var GeneralDomestic = "";
            var GeneralDomesticglass = "";
            var ConfidentialWaste = "";
            var Printercartridges = "";
            var Cytotoxiccytostaticsharps = "";
            var Nonsharpcytotoxiccytostaticwaste = "";
            var Cytotoxiccytostaticincontinencewaste = "";
            var Medicinallycontaminatedsharps = "";
            var NonsharpsMedicinalwaste = "";
            var Controlleddrugs = "";
            var SharpsWaste = "";
            var NonSharpsWaste = "";
            var NonCytotoxic = "";
            var NonMedicinalSharps = "";
            var InfectiousWaste = "";
            var OffensiveWaste = "";
            var AutoclavedWaste = "";
            var AnatomicalWaste = "";
            var Amalgam = "";
            var Gypsum = "";
            var HandGelPouches = "";
            var WasteChemicals = "";
            var CatAdiagnostics = "";

            var GeneralDomesticContainer = "";
            var GeneralDomesticglassContainer = "";
            var ConfidentialWasteContainer = "";
            var PrintercartridgesContainer = "";
            var CytotoxiccytostaticsharpsContainer = "";
            var NonsharpcytotoxiccytostaticwasteContainer = "";
            var CytotoxiccytostaticincontinencewasteContainer = "";
            var MedicinallycontaminatedsharpsContainer = "";
            var NonsharpsMedicinalwasteContainer = "";
            var ControlleddrugsContainer = "";
            var SharpsWasteContainer = "";
            var NonSharpsWasteContainer = "";
            var NonCytotoxicContainer = "";
            var NonMedicinalSharpsContainer = "";
            var InfectiousWasteContainer = "";
            var OffensiveWasteContainer = "";
            var AutoclavedWasteContainer = "";
            var AnatomicalWasteContainer = "";
            var AmalgamContainer = "";
            var GypsumContainer = "";
            var HandGelPouchesContainer = "";
            var WasteChemicalsContainer = "";
            var CatAdiagnosticsContainer = "";

            //  if (AryDcResultDetails == undefined) {
            //alert('scope.NewDCModel' + scope.NewDCModel);
            //PermanentStaff = oScope.NewDCModel["txtPermanentStaffControlId"];
            //AgencyStaff = oScope.NewDCModel["txtAgencyStaffControlId"];
            WasteManagePolicy = oScope["chkWasteManagePolicyControlId"].GetSelectedValue();
            LocalWasteProcedure = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            Numberofstaff = oScope.NewDCModel["txtNumberofstaffControlId"];
            SegregationChart = oScope["chkSegregationChartControlId"].GetSelectedValue();
            Location = oScope.NewDCModel["txtLocationControlId"];

            GeneralDomestic = oScope["chkGeneralDomesticControlId"].GetSelectedValue();
            GeneralDomesticglass = oScope["chkGeneralDomesticglassControlId"].GetSelectedValue();
            ConfidentialWaste = oScope["chkConfidentialWasteControlId"].GetSelectedValue();
            Printercartridges = oScope["chkPrinterCartridgesControlId"].GetSelectedValue();
            Cytotoxiccytostaticsharps = oScope["chkCytotoxicSharpsControlId"].GetSelectedValue();
            Nonsharpcytotoxiccytostaticwaste = oScope["chkNonsharpwasteControlId"].GetSelectedValue();
            Cytotoxiccytostaticincontinencewaste = oScope["chkCytotoxicIncontinenceWasteControlId"].GetSelectedValue();
            Medicinallycontaminatedsharps = oScope["chkMedicinallysharpsControlId"].GetSelectedValue();
            NonsharpsMedicinalwaste = oScope["chkNonsharpsMedicinalControlId"].GetSelectedValue();
            Controlleddrugs = oScope["chkControlledDrugsControlId"].GetSelectedValue();
            SharpsWaste = oScope["chkSharpsWasteControlId"].GetSelectedValue();
            NonSharpsWaste = oScope["chkNonSharpsWasteControlId"].GetSelectedValue();
            NonCytotoxic = oScope["chkNonCytotoxicControlId"].GetSelectedValue();
            NonMedicinalSharps = oScope["chkNonMedicinalSharpsControlId"].GetSelectedValue();
            InfectiousWaste = oScope["chkInfectiousWasteControlId"].GetSelectedValue();
            OffensiveWaste = oScope["chkOffensiveWasteControlId"].GetSelectedValue();
            AutoclavedWaste = oScope["chkAutoclavedWasteControlId"].GetSelectedValue();
            AnatomicalWaste = oScope["chkAnatomicalWasteControlId"].GetSelectedValue();
            Amalgam = oScope["chkAmalgamControlId"].GetSelectedValue();
            Gypsum = oScope["chkGypsumControlId"].GetSelectedValue();
            HandGelPouches = oScope["chkHandGelPouchesControlId"].GetSelectedValue();
            WasteChemicals = oScope["chkWasteChemicalsControlId"].GetSelectedValue();
            CatAdiagnostics = oScope["chkCatAdiagnosticsControlId"].GetSelectedValue();

            GeneralDomesticContainer = oScope["chkGDContainerTypeControlId"].GetSelectedValue().length;
            GeneralDomesticglassContainer = oScope["chkGDGlassContainerTypeControlId"].GetSelectedValue().length;
            ConfidentialWasteContainer = oScope["chkConfidentialWasteContainerTypeControlId"].GetSelectedValue().length;
            PrintercartridgesContainer = oScope["chkPrintercartridgesContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticsharpsContainer = oScope["chkCytotoxicSharpsContainerTypeControlId"].GetSelectedValue().length;
            NonsharpcytotoxiccytostaticwasteContainer = oScope["chkNonsharpwasteContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticincontinencewasteContainer = oScope["chkCytotoxicIncontinenceWasteContainerTypeControlId"].GetSelectedValue().length;
            MedicinallycontaminatedsharpsContainer = oScope["chkMedicinallyContainerTypeControlId"].GetSelectedValue().length;
            NonsharpsMedicinalwasteContainer = oScope["chkNonsharpsMedicinalContainerTypeControlId"].GetSelectedValue().length;
            ControlleddrugsContainer = oScope["chkControlledDrugsContainerTypeControlId"].GetSelectedValue().length;
            SharpsWasteContainer = oScope["chkSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonSharpsWasteContainer = oScope["chkNonSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonCytotoxicContainer = oScope["chkNonCytotoxicContainerTypeControlId"].GetSelectedValue().length;
            NonMedicinalSharpsContainer = oScope["chkNonMedicinalSharpsContainerTypeControlId"].GetSelectedValue().length;
            InfectiousWasteContainer = oScope["chkInfectiousWasteContainerTypeControlId"].GetSelectedValue().length;
            OffensiveWasteContainer = oScope["chkOffensiveWasteContainerTypeControlId"].GetSelectedValue().length;
            AutoclavedWasteContainer = oScope["chkAutoclavedWasteContainerTypeControlId"].GetSelectedValue().length;
            AnatomicalWasteContainer = oScope["chkAnatomicalWasteContainerTypeControlId"].GetSelectedValue().length;
            AmalgamContainer = oScope["chkAmalgamContainerTypeControlId"].GetSelectedValue().length;
            GypsumContainer = oScope["chkGypsumContainerTypeControlId"].GetSelectedValue().length;
            HandGelPouchesContainer = oScope["chkHandGelPouchesContainerTypeControlId"].GetSelectedValue().length;
            WasteChemicalsContainer = oScope["chkWasteChemicalsContainerTypeControlId"].GetSelectedValue().length;
            CatAdiagnosticsContainer = oScope["chkCatAdiagnosticsContainerTypeControlId"].GetSelectedValue().length;
            //}

            //if (PermanentStaff == "" || AgencyStaff == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Staff Information ";
            //    IsSuccess = false;
            //}
            if (WasteManagePolicy == "" || LocalWasteProcedure == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Policy and Procedure ";
                IsSuccess = false;
            }
            if (Numberofstaff == "" || SegregationChart == "" || (SegregationChart != "" && (SegregationChart == 1 && Location == ""))) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Reference and training ";
                IsSuccess = false;
            }

            if (GeneralDomestic == "" || GeneralDomesticglass == "" || ConfidentialWaste == "" || Printercartridges == "" || Cytotoxiccytostaticsharps == "" || Nonsharpcytotoxiccytostaticwaste == "" || Cytotoxiccytostaticincontinencewaste == "" ||
                Medicinallycontaminatedsharps == "" || NonsharpsMedicinalwaste == "" || Controlleddrugs == "" || SharpsWaste == "" || NonSharpsWaste == "" || NonCytotoxic == "" || NonMedicinalSharps == "" || InfectiousWaste == "" || OffensiveWaste == "" ||
                AutoclavedWaste == "" || AnatomicalWaste == "" || Amalgam == "" || Gypsum == "" || HandGelPouches == "" || WasteChemicals == "" || CatAdiagnostics == "") {
                WasteStreamSuccess = false;
            }

            if (WasteStreamSuccess == true) {

                if ((GeneralDomestic != "" && (GeneralDomestic == 1 && GeneralDomesticContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((GeneralDomesticglass != "" && (GeneralDomesticglass == 1 && GeneralDomesticglassContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((ConfidentialWaste != "" && (ConfidentialWaste == 1 && ConfidentialWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Printercartridges != "" && (Printercartridges == 1 && PrintercartridgesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticsharps != "" && (Cytotoxiccytostaticsharps == 1 && CytotoxiccytostaticsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Nonsharpcytotoxiccytostaticwaste != "" && (Nonsharpcytotoxiccytostaticwaste == 1 && NonsharpcytotoxiccytostaticwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticincontinencewaste != "" && (Cytotoxiccytostaticincontinencewaste == 1 && CytotoxiccytostaticincontinencewasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Medicinallycontaminatedsharps != "" && (Medicinallycontaminatedsharps == 1 && MedicinallycontaminatedsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonsharpsMedicinalwaste != "" && (NonsharpsMedicinalwaste == 1 && NonsharpsMedicinalwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Controlleddrugs != "" && (Controlleddrugs == 1 && ControlleddrugsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((SharpsWaste != "" && (SharpsWaste == 1 && SharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonSharpsWaste != "" && (NonSharpsWaste == 1 && NonSharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonCytotoxic != "" && (NonCytotoxic == 1 && NonCytotoxicContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonMedicinalSharps != "" && (NonMedicinalSharps == 1 && NonMedicinalSharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((InfectiousWaste != "" && (InfectiousWaste == 1 && InfectiousWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((OffensiveWaste != "" && (OffensiveWaste == 1 && OffensiveWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AutoclavedWaste != "" && (AutoclavedWaste == 1 && AutoclavedWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AnatomicalWaste != "" && (AnatomicalWaste == 1 && AnatomicalWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Amalgam != "" && (Amalgam == 1 && AmalgamContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Gypsum != "" && (Gypsum == 1 && GypsumContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((HandGelPouches != "" && (HandGelPouches == 1 && HandGelPouchesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((WasteChemicals != "" && (WasteChemicals == 1 && WasteChemicalsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((CatAdiagnostics != "" && (CatAdiagnostics == 1 && CatAdiagnosticsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
            }
            if (WasteStreamSuccess == false) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Waste Streams ";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IncidentInvestigationElementsQuestionnaireValidation", Excep);
        }
    }

    var IncidentInvestigationElementsLocalWasteStorageValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-ILW-003 :: Please enter ";

            var ErrorMessage = "";

            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

            for (var i = 1; i <= 23; i++) {
                if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                    IsSuccess = true;
                    break;
                }
                else {
                    WasteTypeIsSuccess = false;
                }
            }

            if (IsSuccess == true) {
                //CommonMessage = "MN-RQ-ILW-003 :: Please complete the following waste types to submit for approval : ";
                for (var itrWasteType in WasteTypeMandatoryStatus) {
                    if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                        IsSuccess = false;
                        WasteTypeIsSuccess = false;
                        WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                    }
                }
            }
            //}
            if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Local Waste Storage Type, ";

                }
                else {

                    ErrorMessage = "Local Waste Storage Type, " + ErrorMessage;
                }
                IsSuccess = false;
            }

            if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                else {
                    CommonMessage = "MN-RQ-ILW-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                IsSuccess = false;
            }

            if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Is there evidence of leakage from any waste streams, ";
                }
                else {
                    CommonMessage = "MN-RQ-ILW-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
                }
                IsSuccess = false;
            }
            if (ErrorMessage != "") {
                ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
            }
            if (WasteTypeIsSuccess == false) {
                if (WasteTypeMessage == "") {
                    WasteTypeMessage = "complete atleast one waste type details, ";
                }
                else {
                    WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                }

                if (WasteTypeMessage != "") {
                    WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                }
                if (ErrorMessage == "") {
                    CommonMessage = "MN-RQ-SPA-003 :: Please ";
                    ErrorMessage = WasteTypeMessage;
                }
                else {

                    ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                }
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;

                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.IncidentInvestigationElementsLocalWasteStorageValidation", Excep);
        }
    }

    var LWSEQuestionnaireValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var CommonMessage = "MN-RQ-LWQ-001 :: Please complete the following categories to submit for approval : ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var PermanentStaff = "";
            var AgencyStaff = "";
            var WasteManagePolicy = "";
            var LocalWasteProcedure = "";
            var Numberofstaff = "";
            var SegregationChart = "";
            var Location = "";

            var GeneralDomestic = "";
            var GeneralDomesticglass = "";
            var ConfidentialWaste = "";
            var Printercartridges = "";
            var Cytotoxiccytostaticsharps = "";
            var Nonsharpcytotoxiccytostaticwaste = "";
            var Cytotoxiccytostaticincontinencewaste = "";
            var Medicinallycontaminatedsharps = "";
            var NonsharpsMedicinalwaste = "";
            var Controlleddrugs = "";
            var SharpsWaste = "";
            var NonSharpsWaste = "";
            var NonCytotoxic = "";
            var NonMedicinalSharps = "";
            var InfectiousWaste = "";
            var OffensiveWaste = "";
            var AutoclavedWaste = "";
            var AnatomicalWaste = "";
            var Amalgam = "";
            var Gypsum = "";
            var HandGelPouches = "";
            var WasteChemicals = "";
            var CatAdiagnostics = "";

            var GeneralDomesticContainer = "";
            var GeneralDomesticglassContainer = "";
            var ConfidentialWasteContainer = "";
            var PrintercartridgesContainer = "";
            var CytotoxiccytostaticsharpsContainer = "";
            var NonsharpcytotoxiccytostaticwasteContainer = "";
            var CytotoxiccytostaticincontinencewasteContainer = "";
            var MedicinallycontaminatedsharpsContainer = "";
            var NonsharpsMedicinalwasteContainer = "";
            var ControlleddrugsContainer = "";
            var SharpsWasteContainer = "";
            var NonSharpsWasteContainer = "";
            var NonCytotoxicContainer = "";
            var NonMedicinalSharpsContainer = "";
            var InfectiousWasteContainer = "";
            var OffensiveWasteContainer = "";
            var AutoclavedWasteContainer = "";
            var AnatomicalWasteContainer = "";
            var AmalgamContainer = "";
            var GypsumContainer = "";
            var HandGelPouchesContainer = "";
            var WasteChemicalsContainer = "";
            var CatAdiagnosticsContainer = "";

            //  if (AryDcResultDetails == undefined) {
            //alert('scope.NewDCModel' + scope.NewDCModel);
            //PermanentStaff = oScope.NewDCModel["txtPermanentStaffControlId"];
            //AgencyStaff = oScope.NewDCModel["txtAgencyStaffControlId"];
            WasteManagePolicy = oScope["chkWasteManagePolicyControlId"].GetSelectedValue();
            LocalWasteProcedure = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            Numberofstaff = oScope.NewDCModel["txtNumberofstaffControlId"];
            SegregationChart = oScope["chkSegregationChartControlId"].GetSelectedValue();
            Location = oScope.NewDCModel["txtLocationControlId"];

            GeneralDomestic = oScope["chkGeneralDomesticControlId"].GetSelectedValue();
            GeneralDomesticglass = oScope["chkGeneralDomesticglassControlId"].GetSelectedValue();
            ConfidentialWaste = oScope["chkConfidentialWasteControlId"].GetSelectedValue();
            Printercartridges = oScope["chkPrinterCartridgesControlId"].GetSelectedValue();
            Cytotoxiccytostaticsharps = oScope["chkCytotoxicSharpsControlId"].GetSelectedValue();
            Nonsharpcytotoxiccytostaticwaste = oScope["chkNonsharpwasteControlId"].GetSelectedValue();
            Cytotoxiccytostaticincontinencewaste = oScope["chkCytotoxicIncontinenceWasteControlId"].GetSelectedValue();
            Medicinallycontaminatedsharps = oScope["chkMedicinallysharpsControlId"].GetSelectedValue();
            NonsharpsMedicinalwaste = oScope["chkNonsharpsMedicinalControlId"].GetSelectedValue();
            Controlleddrugs = oScope["chkControlledDrugsControlId"].GetSelectedValue();
            SharpsWaste = oScope["chkSharpsWasteControlId"].GetSelectedValue();
            NonSharpsWaste = oScope["chkNonSharpsWasteControlId"].GetSelectedValue();
            NonCytotoxic = oScope["chkNonCytotoxicControlId"].GetSelectedValue();
            NonMedicinalSharps = oScope["chkNonMedicinalSharpsControlId"].GetSelectedValue();
            InfectiousWaste = oScope["chkInfectiousWasteControlId"].GetSelectedValue();
            OffensiveWaste = oScope["chkOffensiveWasteControlId"].GetSelectedValue();
            AutoclavedWaste = oScope["chkAutoclavedWasteControlId"].GetSelectedValue();
            AnatomicalWaste = oScope["chkAnatomicalWasteControlId"].GetSelectedValue();
            Amalgam = oScope["chkAmalgamControlId"].GetSelectedValue();
            Gypsum = oScope["chkGypsumControlId"].GetSelectedValue();
            HandGelPouches = oScope["chkHandGelPouchesControlId"].GetSelectedValue();
            WasteChemicals = oScope["chkWasteChemicalsControlId"].GetSelectedValue();
            CatAdiagnostics = oScope["chkCatAdiagnosticsControlId"].GetSelectedValue();

            GeneralDomesticContainer = oScope["chkGDContainerTypeControlId"].GetSelectedValue().length;
            GeneralDomesticglassContainer = oScope["chkGDGlassContainerTypeControlId"].GetSelectedValue().length;
            ConfidentialWasteContainer = oScope["chkConfidentialWasteContainerTypeControlId"].GetSelectedValue().length;
            PrintercartridgesContainer = oScope["chkPrintercartridgesContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticsharpsContainer = oScope["chkCytotoxicSharpsContainerTypeControlId"].GetSelectedValue().length;
            NonsharpcytotoxiccytostaticwasteContainer = oScope["chkNonsharpwasteContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticincontinencewasteContainer = oScope["chkCytotoxicIncontinenceWasteContainerTypeControlId"].GetSelectedValue().length;
            MedicinallycontaminatedsharpsContainer = oScope["chkMedicinallyContainerTypeControlId"].GetSelectedValue().length;
            NonsharpsMedicinalwasteContainer = oScope["chkNonsharpsMedicinalContainerTypeControlId"].GetSelectedValue().length;
            ControlleddrugsContainer = oScope["chkControlledDrugsContainerTypeControlId"].GetSelectedValue().length;
            SharpsWasteContainer = oScope["chkSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonSharpsWasteContainer = oScope["chkNonSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonCytotoxicContainer = oScope["chkNonCytotoxicContainerTypeControlId"].GetSelectedValue().length;
            NonMedicinalSharpsContainer = oScope["chkNonMedicinalSharpsContainerTypeControlId"].GetSelectedValue().length;
            InfectiousWasteContainer = oScope["chkInfectiousWasteContainerTypeControlId"].GetSelectedValue().length;
            OffensiveWasteContainer = oScope["chkOffensiveWasteContainerTypeControlId"].GetSelectedValue().length;
            AutoclavedWasteContainer = oScope["chkAutoclavedWasteContainerTypeControlId"].GetSelectedValue().length;
            AnatomicalWasteContainer = oScope["chkAnatomicalWasteContainerTypeControlId"].GetSelectedValue().length;
            AmalgamContainer = oScope["chkAmalgamContainerTypeControlId"].GetSelectedValue().length;
            GypsumContainer = oScope["chkGypsumContainerTypeControlId"].GetSelectedValue().length;
            HandGelPouchesContainer = oScope["chkHandGelPouchesContainerTypeControlId"].GetSelectedValue().length;
            WasteChemicalsContainer = oScope["chkWasteChemicalsContainerTypeControlId"].GetSelectedValue().length;
            CatAdiagnosticsContainer = oScope["chkCatAdiagnosticsContainerTypeControlId"].GetSelectedValue().length;
            //}

            //if (PermanentStaff == "" || AgencyStaff == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Staff Information ";
            //    IsSuccess = false;
            //}
            if (WasteManagePolicy == "" || LocalWasteProcedure == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Policy and Procedure ";
                IsSuccess = false;
            }
            if (Numberofstaff == "" || SegregationChart == "" || (SegregationChart != "" && (SegregationChart == 1 && Location == ""))) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Reference and training ";
                IsSuccess = false;
            }

            if (GeneralDomestic == "" || GeneralDomesticglass == "" || ConfidentialWaste == "" || Printercartridges == "" || Cytotoxiccytostaticsharps == "" || Nonsharpcytotoxiccytostaticwaste == "" || Cytotoxiccytostaticincontinencewaste == "" ||
                Medicinallycontaminatedsharps == "" || NonsharpsMedicinalwaste == "" || Controlleddrugs == "" || SharpsWaste == "" || NonSharpsWaste == "" || NonCytotoxic == "" || NonMedicinalSharps == "" || InfectiousWaste == "" || OffensiveWaste == "" ||
                AutoclavedWaste == "" || AnatomicalWaste == "" || Amalgam == "" || Gypsum == "" || HandGelPouches == "" || WasteChemicals == "" || CatAdiagnostics == "") {
                WasteStreamSuccess = false;
            }

            if (WasteStreamSuccess == true) {

                if ((GeneralDomestic != "" && (GeneralDomestic == 1 && GeneralDomesticContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((GeneralDomesticglass != "" && (GeneralDomesticglass == 1 && GeneralDomesticglassContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((ConfidentialWaste != "" && (ConfidentialWaste == 1 && ConfidentialWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Printercartridges != "" && (Printercartridges == 1 && PrintercartridgesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticsharps != "" && (Cytotoxiccytostaticsharps == 1 && CytotoxiccytostaticsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Nonsharpcytotoxiccytostaticwaste != "" && (Nonsharpcytotoxiccytostaticwaste == 1 && NonsharpcytotoxiccytostaticwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticincontinencewaste != "" && (Cytotoxiccytostaticincontinencewaste == 1 && CytotoxiccytostaticincontinencewasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Medicinallycontaminatedsharps != "" && (Medicinallycontaminatedsharps == 1 && MedicinallycontaminatedsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonsharpsMedicinalwaste != "" && (NonsharpsMedicinalwaste == 1 && NonsharpsMedicinalwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Controlleddrugs != "" && (Controlleddrugs == 1 && ControlleddrugsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((SharpsWaste != "" && (SharpsWaste == 1 && SharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonSharpsWaste != "" && (NonSharpsWaste == 1 && NonSharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonCytotoxic != "" && (NonCytotoxic == 1 && NonCytotoxicContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonMedicinalSharps != "" && (NonMedicinalSharps == 1 && NonMedicinalSharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((InfectiousWaste != "" && (InfectiousWaste == 1 && InfectiousWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((OffensiveWaste != "" && (OffensiveWaste == 1 && OffensiveWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AutoclavedWaste != "" && (AutoclavedWaste == 1 && AutoclavedWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AnatomicalWaste != "" && (AnatomicalWaste == 1 && AnatomicalWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Amalgam != "" && (Amalgam == 1 && AmalgamContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Gypsum != "" && (Gypsum == 1 && GypsumContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((HandGelPouches != "" && (HandGelPouches == 1 && HandGelPouchesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((WasteChemicals != "" && (WasteChemicals == 1 && WasteChemicalsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((CatAdiagnostics != "" && (CatAdiagnostics == 1 && CatAdiagnosticsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
            }

            if (WasteStreamSuccess == false) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Waste Streams ";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PreAcceptanceQuestionnaireValidation", Excep);
        }
    }

    var SWSPAEQuestionnaireValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            //var oSourceofForeignObject = oScope["chkSourceofForeignObjectControlId"].GetSelectedValue();

            var IsSuccess = true;
            var ErrorMessage = "";
            var WasteStreamSuccess = true;

            var CommonMessage = "MN-RQ-SWQ-001 :: Please complete the following categories to submit for approval : ";
            //var EquipmentName=oScope.AddlEquipmentNameControlId.GetSelectedText()
            var PermanentStaff = "";
            var AgencyStaff = "";
            var WasteManagePolicy = "";
            var LocalWasteProcedure = "";
            var Numberofstaff = "";
            var SegregationChart = "";
            var Location = "";

            var GeneralDomestic = "";
            var GeneralDomesticglass = "";
            var ConfidentialWaste = "";
            var Printercartridges = "";
            var Cytotoxiccytostaticsharps = "";
            var Nonsharpcytotoxiccytostaticwaste = "";
            var Cytotoxiccytostaticincontinencewaste = "";
            var Medicinallycontaminatedsharps = "";
            var NonsharpsMedicinalwaste = "";
            var Controlleddrugs = "";
            var SharpsWaste = "";
            var NonSharpsWaste = "";
            var NonCytotoxic = "";
            var NonMedicinalSharps = "";
            var InfectiousWaste = "";
            var OffensiveWaste = "";
            var AutoclavedWaste = "";
            var AnatomicalWaste = "";
            var Amalgam = "";
            var Gypsum = "";
            var HandGelPouches = "";
            var WasteChemicals = "";
            var CatAdiagnostics = "";

            var GeneralDomesticContainer = "";
            var GeneralDomesticglassContainer = "";
            var ConfidentialWasteContainer = "";
            var PrintercartridgesContainer = "";
            var CytotoxiccytostaticsharpsContainer = "";
            var NonsharpcytotoxiccytostaticwasteContainer = "";
            var CytotoxiccytostaticincontinencewasteContainer = "";
            var MedicinallycontaminatedsharpsContainer = "";
            var NonsharpsMedicinalwasteContainer = "";
            var ControlleddrugsContainer = "";
            var SharpsWasteContainer = "";
            var NonSharpsWasteContainer = "";
            var NonCytotoxicContainer = "";
            var NonMedicinalSharpsContainer = "";
            var InfectiousWasteContainer = "";
            var OffensiveWasteContainer = "";
            var AutoclavedWasteContainer = "";
            var AnatomicalWasteContainer = "";
            var AmalgamContainer = "";
            var GypsumContainer = "";
            var HandGelPouchesContainer = "";
            var WasteChemicalsContainer = "";
            var CatAdiagnosticsContainer = "";

            //  if (AryDcResultDetails == undefined) {
            //alert('scope.NewDCModel' + scope.NewDCModel);
            //PermanentStaff = oScope.NewDCModel["txtPermanentStaffControlId"];
            //AgencyStaff = oScope.NewDCModel["txtAgencyStaffControlId"];
            WasteManagePolicy = oScope["chkWasteManagePolicyControlId"].GetSelectedValue();
            LocalWasteProcedure = oScope["chkLocalWasteProcedureControlId"].GetSelectedValue();
            Numberofstaff = oScope.NewDCModel["txtNumberofstaffControlId"];
            SegregationChart = oScope["chkSegregationChartControlId"].GetSelectedValue();
            Location = oScope.NewDCModel["txtLocationControlId"];

            GeneralDomestic = oScope["chkGeneralDomesticControlId"].GetSelectedValue();
            GeneralDomesticglass = oScope["chkGeneralDomesticglassControlId"].GetSelectedValue();
            ConfidentialWaste = oScope["chkConfidentialWasteControlId"].GetSelectedValue();
            Printercartridges = oScope["chkPrinterCartridgesControlId"].GetSelectedValue();
            Cytotoxiccytostaticsharps = oScope["chkCytotoxicSharpsControlId"].GetSelectedValue();
            Nonsharpcytotoxiccytostaticwaste = oScope["chkNonsharpwasteControlId"].GetSelectedValue();
            Cytotoxiccytostaticincontinencewaste = oScope["chkCytotoxicIncontinenceWasteControlId"].GetSelectedValue();
            Medicinallycontaminatedsharps = oScope["chkMedicinallysharpsControlId"].GetSelectedValue();
            NonsharpsMedicinalwaste = oScope["chkNonsharpsMedicinalControlId"].GetSelectedValue();
            Controlleddrugs = oScope["chkControlledDrugsControlId"].GetSelectedValue();
            SharpsWaste = oScope["chkSharpsWasteControlId"].GetSelectedValue();
            NonSharpsWaste = oScope["chkNonSharpsWasteControlId"].GetSelectedValue();
            NonCytotoxic = oScope["chkNonCytotoxicControlId"].GetSelectedValue();
            NonMedicinalSharps = oScope["chkNonMedicinalSharpsControlId"].GetSelectedValue();
            InfectiousWaste = oScope["chkInfectiousWasteControlId"].GetSelectedValue();
            OffensiveWaste = oScope["chkOffensiveWasteControlId"].GetSelectedValue();
            AutoclavedWaste = oScope["chkAutoclavedWasteControlId"].GetSelectedValue();
            AnatomicalWaste = oScope["chkAnatomicalWasteControlId"].GetSelectedValue();
            Amalgam = oScope["chkAmalgamControlId"].GetSelectedValue();
            Gypsum = oScope["chkGypsumControlId"].GetSelectedValue();
            HandGelPouches = oScope["chkHandGelPouchesControlId"].GetSelectedValue();
            WasteChemicals = oScope["chkWasteChemicalsControlId"].GetSelectedValue();
            CatAdiagnostics = oScope["chkCatAdiagnosticsControlId"].GetSelectedValue();

            GeneralDomesticContainer = oScope["chkGDContainerTypeControlId"].GetSelectedValue().length;
            GeneralDomesticglassContainer = oScope["chkGDGlassContainerTypeControlId"].GetSelectedValue().length;
            ConfidentialWasteContainer = oScope["chkConfidentialWasteContainerTypeControlId"].GetSelectedValue().length;
            PrintercartridgesContainer = oScope["chkPrintercartridgesContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticsharpsContainer = oScope["chkCytotoxicSharpsContainerTypeControlId"].GetSelectedValue().length;
            NonsharpcytotoxiccytostaticwasteContainer = oScope["chkNonsharpwasteContainerTypeControlId"].GetSelectedValue().length;
            CytotoxiccytostaticincontinencewasteContainer = oScope["chkCytotoxicIncontinenceWasteContainerTypeControlId"].GetSelectedValue().length;
            MedicinallycontaminatedsharpsContainer = oScope["chkMedicinallyContainerTypeControlId"].GetSelectedValue().length;
            NonsharpsMedicinalwasteContainer = oScope["chkNonsharpsMedicinalContainerTypeControlId"].GetSelectedValue().length;
            ControlleddrugsContainer = oScope["chkControlledDrugsContainerTypeControlId"].GetSelectedValue().length;
            SharpsWasteContainer = oScope["chkSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonSharpsWasteContainer = oScope["chkNonSharpsWasteContainerTypeControlId"].GetSelectedValue().length;
            NonCytotoxicContainer = oScope["chkNonCytotoxicContainerTypeControlId"].GetSelectedValue().length;
            NonMedicinalSharpsContainer = oScope["chkNonMedicinalSharpsContainerTypeControlId"].GetSelectedValue().length;
            InfectiousWasteContainer = oScope["chkInfectiousWasteContainerTypeControlId"].GetSelectedValue().length;
            OffensiveWasteContainer = oScope["chkOffensiveWasteContainerTypeControlId"].GetSelectedValue().length;
            AutoclavedWasteContainer = oScope["chkAutoclavedWasteContainerTypeControlId"].GetSelectedValue().length;
            AnatomicalWasteContainer = oScope["chkAnatomicalWasteContainerTypeControlId"].GetSelectedValue().length;
            AmalgamContainer = oScope["chkAmalgamContainerTypeControlId"].GetSelectedValue().length;
            GypsumContainer = oScope["chkGypsumContainerTypeControlId"].GetSelectedValue().length;
            HandGelPouchesContainer = oScope["chkHandGelPouchesContainerTypeControlId"].GetSelectedValue().length;
            WasteChemicalsContainer = oScope["chkWasteChemicalsContainerTypeControlId"].GetSelectedValue().length;
            CatAdiagnosticsContainer = oScope["chkCatAdiagnosticsContainerTypeControlId"].GetSelectedValue().length;
            //}

            //if (PermanentStaff == "" || AgencyStaff == "") {
            //    if (ErrorMessage != "") {
            //        ErrorMessage = ErrorMessage + ",";
            //    }
            //    ErrorMessage = ErrorMessage + "Staff Information ";
            //    IsSuccess = false;
            //}
            if (WasteManagePolicy == "" || LocalWasteProcedure == "") {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Policy and Procedure ";
                IsSuccess = false;
            }
            if (Numberofstaff == "" || SegregationChart == "" || (SegregationChart != "" && (SegregationChart == 1 && Location == ""))) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Reference and training ";
                IsSuccess = false;
            }

            if (GeneralDomestic == "" || GeneralDomesticglass == "" || ConfidentialWaste == "" || Printercartridges == "" || Cytotoxiccytostaticsharps == "" || Nonsharpcytotoxiccytostaticwaste == "" || Cytotoxiccytostaticincontinencewaste == "" ||
                Medicinallycontaminatedsharps == "" || NonsharpsMedicinalwaste == "" || Controlleddrugs == "" || SharpsWaste == "" || NonSharpsWaste == "" || NonCytotoxic == "" || NonMedicinalSharps == "" || InfectiousWaste == "" || OffensiveWaste == "" ||
                AutoclavedWaste == "" || AnatomicalWaste == "" || Amalgam == "" || Gypsum == "" || HandGelPouches == "" || WasteChemicals == "" || CatAdiagnostics == "") {
                WasteStreamSuccess = false;
            }

            if (WasteStreamSuccess == true) {
                if ((GeneralDomestic != "" && (GeneralDomestic == 1 && GeneralDomesticContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((GeneralDomesticglass != "" && (GeneralDomesticglass == 1 && GeneralDomesticglassContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((ConfidentialWaste != "" && (ConfidentialWaste == 1 && ConfidentialWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Printercartridges != "" && (Printercartridges == 1 && PrintercartridgesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticsharps != "" && (Cytotoxiccytostaticsharps == 1 && CytotoxiccytostaticsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Nonsharpcytotoxiccytostaticwaste != "" && (Nonsharpcytotoxiccytostaticwaste == 1 && NonsharpcytotoxiccytostaticwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Cytotoxiccytostaticincontinencewaste != "" && (Cytotoxiccytostaticincontinencewaste == 1 && CytotoxiccytostaticincontinencewasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Medicinallycontaminatedsharps != "" && (Medicinallycontaminatedsharps == 1 && MedicinallycontaminatedsharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonsharpsMedicinalwaste != "" && (NonsharpsMedicinalwaste == 1 && NonsharpsMedicinalwasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Controlleddrugs != "" && (Controlleddrugs == 1 && ControlleddrugsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((SharpsWaste != "" && (SharpsWaste == 1 && SharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonSharpsWaste != "" && (NonSharpsWaste == 1 && NonSharpsWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonCytotoxic != "" && (NonCytotoxic == 1 && NonCytotoxicContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((NonMedicinalSharps != "" && (NonMedicinalSharps == 1 && NonMedicinalSharpsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((InfectiousWaste != "" && (InfectiousWaste == 1 && InfectiousWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((OffensiveWaste != "" && (OffensiveWaste == 1 && OffensiveWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AutoclavedWaste != "" && (AutoclavedWaste == 1 && AutoclavedWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((AnatomicalWaste != "" && (AnatomicalWaste == 1 && AnatomicalWasteContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Amalgam != "" && (Amalgam == 1 && AmalgamContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((Gypsum != "" && (Gypsum == 1 && GypsumContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((HandGelPouches != "" && (HandGelPouches == 1 && HandGelPouchesContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((WasteChemicals != "" && (WasteChemicals == 1 && WasteChemicalsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
                if ((CatAdiagnostics != "" && (CatAdiagnostics == 1 && CatAdiagnosticsContainer == 0))) {
                    WasteStreamSuccess = false;
                }
            }

            if (WasteStreamSuccess == false) {
                if (ErrorMessage != "") {
                    ErrorMessage = ErrorMessage + ",";
                }
                ErrorMessage = ErrorMessage + "Waste Streams ";
                IsSuccess = false;
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                alert(CommonMessage + " " + ErrorMessage);
            }


            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SWSPAEQuestionnaireValidation", Excep);
        }
    }

    var LWSELocalWasteStorageValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-LLW-003 :: Please enter ";

            var ErrorMessage = "";

            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

            for (var i = 1; i <= 23; i++) {
                if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                    IsSuccess = true;
                    break;
                }
                else {
                    WasteTypeIsSuccess = false;
                }
            }

            if (IsSuccess == true) {
                //CommonMessage = "MN-RQ-LLW-003 :: Please complete the following waste types to submit for approval : ";
                for (var itrWasteType in WasteTypeMandatoryStatus) {
                    if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                        IsSuccess = false;
                        WasteTypeIsSuccess = false;
                        WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                    }
                }
            }
            //}
            if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Local Waste Storage Type, ";

                }
                else {

                    ErrorMessage = "Local Waste Storage Type, " + ErrorMessage;
                }
                IsSuccess = false;
            }

            //if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

            //    if (ErrorMessage == "") {
            //        ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
            //    }
            //    else {
            //        CommonMessage = "MN-RQ-LLW-003 :: Please enter ";
            //        ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
            //    }
            //    IsSuccess = false;
            //}

            if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Is there evidence of leakage from any waste streams, ";
                }
                else {
                    CommonMessage = "MN-RQ-LLW-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
                }
                IsSuccess = false;
            }
            if (ErrorMessage != "") {
                ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
            }
            if (WasteTypeIsSuccess == false) {
                if (WasteTypeMessage == "") {
                    WasteTypeMessage = "complete atleast one waste type details, ";
                }
                else {
                    WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                }

                if (WasteTypeMessage != "") {
                    WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                }
                if (ErrorMessage == "") {
                    CommonMessage = "MN-RQ-LLW-003 :: Please ";
                    ErrorMessage = WasteTypeMessage;
                }
                else {

                    ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                }
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;

                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LWSELocalWasteStorageValidation", Excep);
        }
    }

    var SingleWasteLocalWasteStorageValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {
         
            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-SLW-003 :: Please enter ";

            var ErrorMessage = "";

            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

            for (var i = 1; i <= 23; i++) {
                if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                    IsSuccess = true;
                    break;
                }
                else {
                    WasteTypeIsSuccess = false;
                }
            }

            if (IsSuccess == true) {
                //CommonMessage = "MN-RQ-SPA-003 :: Please complete the following waste types to submit for approval : ";
                for (var itrWasteType in WasteTypeMandatoryStatus) {
                    if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                        IsSuccess = false;
                        WasteTypeIsSuccess = false;
                        WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                    }
                }
            }
            //}
            if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Local Waste Storage Type, ";

                }
                else {

                    ErrorMessage = "Local Waste Storage Type, " + ErrorMessage;
                }
                IsSuccess = false;
            }

            if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                else {
                    CommonMessage = "MN-RQ-SLW-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
                }
                IsSuccess = false;
            }

            if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Is there evidence of leakage from any waste streams, ";
                }
                else {
                    CommonMessage = "MN-RQ-SLW-003 :: Please enter ";
                    ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
                }
                IsSuccess = false;
            }
            if (ErrorMessage != "") {
                ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
            }
            if (WasteTypeIsSuccess == false) {
                if (WasteTypeMessage == "") {
                    WasteTypeMessage = "complete atleast one waste type details, ";
                }
                else {
                    WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                }

                if (WasteTypeMessage != "") {
                    WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                }
                if (ErrorMessage == "") {
                    CommonMessage = "MN-RQ-SLW-003 :: Please ";
                    ErrorMessage = WasteTypeMessage;
                }
                else {

                    ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                }
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;

                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SingleWasteLocalWasteStorageValidation", Excep);
        }
    }

    this.CheckCompletedStatusForBand = function (IsAllCompletedStatus, BandDetailId) {

        try {
            OneViewConsole.Debug("CheckCompletedStatusForBand Start", "DataCaptureBO.CheckCompletedStatusForBand");

              
            if (IsAllCompletedStatus != undefined && BandDetailId != undefined) {
                UpdateCompledStatusForParameterTested(IsAllCompletedStatus, BandDetailId);
            }

            OneViewConsole.Debug("CheckCompletedStatusForBand End", "DataCaptureBO.CheckCompletedStatusForBand");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckCompletedStatusForBand", Excep);
        }
        finally {
        }
    }

    var PreAcceptanceCompositionAnalysisValidationNew = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {                       
            var IsSuccess = true;

            var CommonMessage = "";
            var ErrorMessage = "";


            if (oScope["AddlRoomTypeControlId"].GetSelectedText() == "") {
                CommonMessage = "MN-RQ-PCA-001 :: Please Select RoomType ";
                IsSuccess = false;
            }

            if (IsSuccess == true) {
                CommonMessage = "MN-RQ-PCA-001 :: Please complete following container type details for approval : ";
                for (var ConainerType = 1; ConainerType <= 10; ConainerType++) {
                    for (var ContainerNumber = 1; ContainerNumber <= 7; ContainerNumber++) {

                        if (CompositionAnalysisMandatoryStatus[ConainerType] != undefined &&
                            CompositionAnalysisMandatoryStatus[ConainerType][ContainerNumber] != undefined &&
                            CompositionAnalysisMandatoryStatus[ConainerType][ContainerNumber].IsValidationSuccess != undefined &&
                            CompositionAnalysisMandatoryStatus[ConainerType][ContainerNumber].IsValidationSuccess == false) {

                            IsSuccess = false;
                            ErrorMessage += CompositionAnalysisMandatoryStatus[ConainerType][ContainerNumber].Message + ", ";
                        }
                    }
                }
            }
           
            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;
                FinalMessage = FinalMessage.substring(0, FinalMessage.length - 2);
                alert(FinalMessage);
            }

            return IsSuccess;
        }
        catch (Excep) {

            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.PreAcceptanceCompositionAnalysisValidationNew", Excep);
        }
    }

    var BulkWasteElementValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {

        try {

            var IsSuccess = false;
            var WasteTypeIsSuccess = true;
            var WasteTypeMessage = "";
            var CommonMessage = "MN-RQ-BWE-003 :: Please enter ";

            var ErrorMessage = "";

            //if (scope["chkLocalWasteStorageType_253"].GetSelectedValue() == "") {
            //    ErrorMessage += ", Local Waste Storage Type";
            //}
            //else {
            //    IsSuccess = true;
            //}

            //if (IsSuccess == true) {

            for (var i = 1; i <= 23; i++) {
                if (scope["txtWasteType_" + i].GetSelectedValue() == 1) {
                    IsSuccess = true;
                    break;
                }
                else {
                    WasteTypeIsSuccess = false;
                }
            }

            if (IsSuccess == true) {
                //CommonMessage = "MN-RQ-LLW-003 :: Please complete the following waste types to submit for approval : ";
                for (var itrWasteType in WasteTypeMandatoryStatus) {
                    if (WasteTypeMandatoryStatus[itrWasteType].IsValidationSuccess == false) {
                        IsSuccess = false;
                        WasteTypeIsSuccess = false;
                        WasteTypeMessage += WasteTypeMandatoryStatus[itrWasteType].Message + ", ";
                    }
                }
            }
            //}
            if (scope["chkIsAuditPartofAnnualAusit_4252"].GetSelectedValue() == "") {

                if (ErrorMessage == "") {
                    ErrorMessage = "Is this audit part of the annual Pre-Acceptance audit?, ";

                }
                else {

                    ErrorMessage = "Is this audit part of the annual Pre-Acceptance audit?, " + ErrorMessage;
                }
                IsSuccess = false;
            }

            //if (scope["chkAreWasteSeg_252"].GetSelectedValue() == "") {

            //    if (ErrorMessage == "") {
            //        ErrorMessage = "Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
            //    }
            //    else {
            //        CommonMessage = "MN-RQ-LLW-003 :: Please enter ";
            //        ErrorMessage = ErrorMessage + ",Are wastes segregated on transport from point of production to disposal hold (e.g. no mixed bags on domestic waste trolley), ";
            //    }
            //    IsSuccess = false;
            //}

            //if (scope["chkLeakageEvidence_694"].GetSelectedValue() == "") {

            //    if (ErrorMessage == "") {
            //        ErrorMessage = "Is there evidence of leakage from any waste streams, ";
            //    }
            //    else {
            //        CommonMessage = "MN-RQ-BWE-003 :: Please enter ";
            //        ErrorMessage = ErrorMessage + "Is there evidence of leakage from any waste streams, ";
            //    }
            //    IsSuccess = false;
            //}
            if (ErrorMessage != "") {
                ErrorMessage = ErrorMessage.substring(0, ErrorMessage.length - 2);
            }
            if (WasteTypeIsSuccess == false) {
                if (WasteTypeMessage == "") {
                    WasteTypeMessage = "complete atleast one waste type details, ";
                }
                else {
                    WasteTypeMessage = "complete the following waste types to submit for approval :" + WasteTypeMessage;
                }

                if (WasteTypeMessage != "") {
                    WasteTypeMessage = WasteTypeMessage.substring(0, WasteTypeMessage.length - 2);
                }
                if (ErrorMessage == "") {
                    CommonMessage = "MN-RQ-BWE-003 :: Please ";
                    ErrorMessage = WasteTypeMessage;
                }
                else {

                    ErrorMessage = ErrorMessage + " and " + WasteTypeMessage;
                }
            }



            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;

                alert(FinalMessage);
            }
           
            return IsSuccess;
        }
        catch (Excep) {
            navigator.notification.alert(("Excep .." + Excep + "...." + JSON.stringify(Excep)), ['OK'], "");
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.BulkWasteElementValidation", Excep);
        }
    }
    
    /*Custom Validation for CMFT End*/
    /////////////////////////////**************************CMFT END*****************************//////////////////////////////////

    /**********************TCFM Validation Start *************************/

    var TescoTraningValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {
            OneViewConsole.Debug("TescoTraningValidation Start", "DataCaptureBO.TescoTraningValidation");
            var IsSuccess = true;
            var CommonMessage = "MN-RQ-TTM-003 :: Please complete ";
            var ErrorMessage = "";

            var IsInductionSuccess = true;
            var IsTaskSuccess = true;
            var IsEquipmentSuccess = true;



            //Validation for Induction Start
            for (var i = 1; i <= 12; i++) {
                if (scope["chkInductionCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsInductionSuccess = false;                  
                    break;
                }
            }
            if (IsInductionSuccess == true) {
                for (var i = 1; i <= 12; i++) {
                    if (scope["chkInductionCompletedStatus_" + i].GetSelectedValue() != 1 && (document.getElementById("DTInductionDATE_" + i).value == "" || document.getElementById("DTInductionDATE_" + i).value == null)) {
                        IsSuccess = false;
                        IsInductionSuccess = false;                       
                        break;
                    }
                }
            }

            //Validation for Induction End

            //Validation for Task Start
            for (var i = 1; i <= 15; i++) {
                if (scope["chkTaskCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsTaskSuccess = false;                    
                    break;
                }
            }
            if (IsTaskSuccess == true) {
                for (var i = 1; i <= 15; i++) {
                    if (scope["chkTaskCompletedStatus_" + i].GetSelectedValue() != 1 && (document.getElementById("DTTaskDATE_" + i).value == "" || document.getElementById("DTTaskDATE_" + i).value == null)) {
                        IsSuccess = false;
                        IsTaskSuccess = false;                       
                        break;
                    }
                }
            }

            //Validation for Task End

            //Validation for Equipment Start
            for (var i = 1; i <= 10; i++) {
                if (scope["chkEquipmentCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsEquipmentSuccess = false;                    
                    break;
                }
            }
            if (IsEquipmentSuccess == true) {
                for (var i = 1; i <= 10; i++) {
                    if (scope["chkEquipmentCompletedStatus_" + i].GetSelectedValue() != 1 && ((document.getElementById("DTEquipmentDATE_" + i).value == "" || document.getElementById("DTEquipmentDATE_" + i).value == null) || (oScope.NewDCModel["txtEquipment_" + i] == "" || oScope.NewDCModel["txtEquipment_" + i] == undefined))) {
                        IsSuccess = false;
                        IsEquipmentSuccess = false;                       
                        break;
                    }
                }
            }

            //Validation for Task End
            EmployeeName = oScope["AddlEmployeeNameControlId"].GetSelectedValue();
            if (EmployeeName == "" || EmployeeName == undefined) {
                IsSuccess = false;
                ErrorMessage = "Employee Details";
            }
           
            if (IsInductionSuccess == false) {
              
                if (ErrorMessage == "") {
                    ErrorMessage = "Induction Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Induction Details";
                }
            }
            if (IsTaskSuccess == false) {

                if (ErrorMessage == "") {
                    ErrorMessage = "Task Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Task Details";
                }
            }
            if (IsEquipmentSuccess == false) {
                if (ErrorMessage == "") {
                    ErrorMessage = "Equipment Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Equipment Details";
                }
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;                
                alert(FinalMessage);
            }
           
            return IsSuccess;
            OneViewConsole.Debug("TescoTraningValidation End", "DataCaptureBO.TescoTraningValidation");
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
            oProductCategory = null;
            oThawingComplete = null;
        }
    }

    var TravisPerkinsTraningModuleValidation = function (AryDcResultDetails, IsAlertMessageEnabled) {
        try {
            OneViewConsole.Debug("TravisPerkinsTraningModuleValidation Start", "DataCaptureBO.TravisPerkinsTraningModuleValidation");
            var IsSuccess = true;
            var CommonMessage = "MN-RQ-TPM-003 :: Please complete ";
            var ErrorMessage = "";

            var IsInductionSuccess = true;
            var IsTaskSuccess = true;
            var IsEquipmentSuccess = true;

            //Validation for Induction Start
            for (var i = 1; i <= 12; i++) {
                if (scope["chkInductionCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsInductionSuccess = false;
                    break;
                }
            }
            if (IsInductionSuccess == true) {
                for (var i = 1; i <= 12; i++) {
                    if (scope["chkInductionCompletedStatus_" + i].GetSelectedValue() != 1 && (document.getElementById("DTInductionDATE_" + i).value == "" || document.getElementById("DTInductionDATE_" + i).value == null)) {
                        IsSuccess = false;
                        IsInductionSuccess = false;
                        break;
                    }
                }
            }

            //Validation for Induction End

            //Validation for Task Start
            for (var i = 1; i <= 10; i++) {
                if (scope["chkTaskCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsTaskSuccess = false;
                    break;
                }
            }
            if (IsTaskSuccess == true) {
                for (var i = 1; i <= 10; i++) {
                    if (scope["chkTaskCompletedStatus_" + i].GetSelectedValue() != 1 && (document.getElementById("DTTaskDATE_" + i).value == "" || document.getElementById("DTTaskDATE_" + i).value == null)) {
                        IsSuccess = false;
                        IsTaskSuccess = false;
                        break;
                    }
                }
            }

            //Validation for Task End

            //Validation for Equipment Start
            for (var i = 1; i <= 10; i++) {
                if (scope["chkEquipmentCompletedStatus_" + i].GetSelectedValue() == "") {
                    IsSuccess = false;
                    IsEquipmentSuccess = false;
                    break;
                }
            }
            if (IsEquipmentSuccess == true) {
                for (var i = 1; i <= 10; i++) {
                    if (scope["chkEquipmentCompletedStatus_" + i].GetSelectedValue() != 1 && ((document.getElementById("DTEquipmentDATE_" + i).value == "" || document.getElementById("DTEquipmentDATE_" + i).value == null) || (oScope.NewDCModel["txtEquipment_" + i] == "" || oScope.NewDCModel["txtEquipment_" + i] == undefined))) {
                        IsSuccess = false;
                        IsEquipmentSuccess = false;
                        break;
                    }
                }
            }

            //Validation for Task End
            EmployeeName = oScope["AddlEmployeeNameControlId"].GetSelectedValue();
            if (EmployeeName == "" || EmployeeName == undefined) {
                IsSuccess = false;
                ErrorMessage = "Employee Details";
            }

            if (IsInductionSuccess == false) {

                if (ErrorMessage == "") {
                    ErrorMessage = "Induction Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Induction Details";
                }
            }
            
            if (IsTaskSuccess == false) {

                if (ErrorMessage == "") {
                    ErrorMessage = "Task Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Task Details";
                }
            }
            if (IsEquipmentSuccess == false) {
                if (ErrorMessage == "") {
                    ErrorMessage = "Equipment Details";
                }
                else {
                    ErrorMessage = ErrorMessage + ",Equipment Details";
                }
            }

            if (IsSuccess == false && IsAlertMessageEnabled == true) {
                var FinalMessage = CommonMessage + " " + ErrorMessage;
                alert(FinalMessage);
            }

            return IsSuccess;
            OneViewConsole.Debug("TravisPerkinsTraningModuleValidation End", "DataCaptureBO.TravisPerkinsTraningModuleValidation");
        }
        catch (Excep) {
            throw Excep;
        }
        finally {
            oProductCategory = null;
            oThawingComplete = null;
        }
    }
    /**********************TCFM Validation End *************************/

    this.HideButtonOnCompletedAndSynchronizedDcStatus = function (DcId, $scope) {

        try {
            OneViewConsole.Debug("HideButtonOnCompletedAndSynchronizedDcStatus Start", "DataCaptureBO.HideButtonOnCompletedAndSynchronizedDcStatus");

            $scope.HideAllButton = oDataCaptureDAO.GetCompletedAndSynchronizedDcStatus(DcId);
           
            OneViewConsole.Debug("HideButtonOnCompletedAndSynchronizedDcStatus End", "DataCaptureBO.HideButtonOnCompletedAndSynchronizedDcStatus");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.HideButtonOnCompletedAndSynchronizedDcStatus", Excep);
        }
        finally {
        }
    }




    this.SaveCheckBoxList = function (_oDcResultDetailsEntityList, $scope, DCId, DcResultId, itrAttrId, _oAttributeInfo, _oPrimarayAnswerModeInfo) {

        try {
                      
            
            OneViewConsole.Debug("SaveCheckBoxList Start", "DataCaptureBO.SaveCheckBoxList");
            

            var AttributeNodeId = itrAttrId;
            var AttributeNodeName = _oAttributeInfo.Name;
            var Answer = '';
            //if answer mode is ddl,value will save here, for text box and other make it null
            var AnswerValue = '';
            var AnswerFKType = ''
            var AnswerMode = '';
            //IsDynamicElement=true => if answer mode is ddl and enter new element which is not in the drop dowen list
            var IsDynamicAnswer = 'false';



            var DataList = $scope[_oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId + "DataSource"];
            //alert('DataList : ' + JSON.stringify(DataList));
            if (DataList != null && DataList != undefined && DataList != "") {
                var Index = 0;
           
                for (var i = 0; i < DataList.length; i++) {
                    var Data = DataList[i];
                    if (Data.Selected == true) {
                        var _DcResultDetailsEntity = MyInstance.GetDcResultDetailEntityForCheckBoxList(AttributeNodeId, _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId, Data.Answer, Data.AnswerValue, DATEntityType.BandDetailsMaster, false, _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType, AttributeNodeName, Index);
                        
                        /*
                        var _DcResultDetailsEntity = new DcResultDetailsEntity();
                        _DcResultDetailsEntity.IndexId = Index;
                        _DcResultDetailsEntity.IsMulti = "true";
                        _DcResultDetailsEntity.IsNA = "false";
                        _DcResultDetailsEntity.IsBlocker = "false";
                        _DcResultDetailsEntity.IsManualESTEnabled = "false";
                        _DcResultDetailsEntity.IsMultiMediaAttached = "false";

                        _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();


                        Answer = Data.Answer;
                        AnswerValue = Data.AnswerValue;

                        AnswerFKType = DATEntityType.BandDetailsMaster;


                        _DcResultDetailsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

                        if (DCId != undefined && DCId != '')
                            _DcResultDetailsEntity.DataCaptureId = DCId;


                        if (DcResultId != undefined && DcResultId != '')
                            _DcResultDetailsEntity.DataResultsId = DcResultId;

                        //_DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
                        _DcResultDetailsEntity.MobileVersionId = 1;

                        _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

                        _DcResultDetailsEntity.AttributeNodeId = AttributeNodeId;

                        _DcResultDetailsEntity.ControlId = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].ControlId;

                        _DcResultDetailsEntity.AttributeNodeName = AttributeNodeName;

                        _DcResultDetailsEntity.Answer = Answer;
                        _DcResultDetailsEntity.AnswerValue = AnswerValue;

                        _DcResultDetailsEntity.AnswerFKType = AnswerFKType;
                        _DcResultDetailsEntity.AnswerMode = AnswerMode;
                                               

                        _DcResultDetailsEntity.IsManual = "true";
                        _DcResultDetailsEntity.IsSynchronized = "false";
                        _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;

                        //_DcResultDetailsEntity.Comments = "";
                        ///_DcResultDetailsEntity.AnswerDataType = _oPrimarayAnswerModeInfo.DataType;
                        _DcResultDetailsEntity.AnswerDataType = _oAttributeInfo.AnswerMode[_oPrimarayAnswerModeInfo].DataType;
                        _DcResultDetailsEntity.IsDynamicAnswer = IsDynamicAnswer;
                        _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;
                        _DcResultDetailsEntity.Latitude = Latitude;
                        _DcResultDetailsEntity.Longitude = Longitude;
                        */
                        //alert('_DcResultDetailsEntity : ' + JSON.stringify(_DcResultDetailsEntity));
                        _oDcResultDetailsEntityList.push(_DcResultDetailsEntity);
                        Index++;
                    }
                }
            }


            OneViewConsole.Debug("SaveCheckBoxList End", "DataCaptureBO.SaveCheckBoxList");
        }
        catch (Excep) {
            //alert("DataCaptureBO.SaveCheckBoxList" + Excep);
            //alert("DataCaptureBO.SaveCheckBoxList 22 " + JSON.stringify( Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SaveCheckBoxList", Excep);
        }
        finally {
        }
    }

    this.GetDcResultDetailEntityForCheckBoxList = function (AttributeNodeId, ControlId, Answer, AnswerValue, AnswerFKType, IsDynamicAnswer, DataType, AttributeNodeName, Index, DCId, DcResultId) {

        try {

            OneViewConsole.Debug("GetDcResultDetailEntityForCheckBoxList Start", "DataCaptureBO.GetDcResultDetailEntityForCheckBoxList");
            
            var oDateTime = new DateTime();
            var CurrenntDateAndTime = oDateTime.GetDateAndTime();


            var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
            var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
            var Latitude = "";
            var Longitude = "";

            if (IsSuccess == true) {
                var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                Latitude = result.Latitude;
                Longitude = result.Longitude;
            }
            
            var _DcResultDetailsEntity = new DcResultDetailsEntity();
            _DcResultDetailsEntity.IndexId = Index;
            _DcResultDetailsEntity.IsMulti = "true";
            _DcResultDetailsEntity.IsNA = "false";
            _DcResultDetailsEntity.IsBlocker = "false";
            _DcResultDetailsEntity.IsManualESTEnabled = "false";
            _DcResultDetailsEntity.IsMultiMediaAttached = "false";

            _DcResultDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
            

            _DcResultDetailsEntity.ServiceId = OneViewSessionStorage.Get("ServiceId");

            if (DCId != undefined && DCId != '')
                _DcResultDetailsEntity.DataCaptureId = DCId;


            if (DcResultId != undefined && DcResultId != '')
                _DcResultDetailsEntity.DataResultsId = DcResultId;


            _DcResultDetailsEntity.MobileVersionId = 1;

            _DcResultDetailsEntity.StartDate = CurrenntDateAndTime;

            _DcResultDetailsEntity.AttributeNodeId = AttributeNodeId;

            _DcResultDetailsEntity.ControlId = ControlId;

            _DcResultDetailsEntity.AttributeNodeName = AttributeNodeName;

            _DcResultDetailsEntity.Answer = Answer;
            _DcResultDetailsEntity.AnswerValue = AnswerValue;

            _DcResultDetailsEntity.AnswerFKType = AnswerFKType;
            _DcResultDetailsEntity.AnswerMode = "";

            _DcResultDetailsEntity.IsManual = "true";


            _DcResultDetailsEntity.IsSynchronized = "false";
            _DcResultDetailsEntity.CreatedDate = CurrenntDateAndTime;

            _DcResultDetailsEntity.AnswerDataType = DataType;
            _DcResultDetailsEntity.IsDynamicAnswer = IsDynamicAnswer;
            _DcResultDetailsEntity.LastUpdatedDate = CurrenntDateAndTime;
            _DcResultDetailsEntity.Latitude = Latitude;
            _DcResultDetailsEntity.Longitude = Longitude;
            _DcResultDetailsEntity.IsDisable = "false";

            OneViewConsole.Debug("GetDcResultDetailEntityForCheckBoxList End", "DataCaptureBO.GetDcResultDetailEntityForCheckBoxList");

           // alert('_DcResultDetailsEntity : ' + JSON.stringify(_DcResultDetailsEntity));
            return _DcResultDetailsEntity;
        }
        catch (Excep) {          
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetDcResultDetailEntityForCheckBoxList", Excep);
        }
        finally {
        }
    }

    this.GetLastUpdatedAnswerList = function (AnswerList) {

        try {
            
            OneViewConsole.Debug("GetLastUpdatedAnswerList Start", "DataCaptureBO.GetLastUpdatedAnswerList");

            var LastUpdatedAnswerList = [];

            var UniqueAnswerList = [];
            for (var i = 0 ; i < AnswerList.length ; i++) {
                if (UniqueAnswerList.length > 0) {
                    var IsExists = false;
                    for (var j = 0 ; j < UniqueAnswerList.length ; j++) {
                        if (UniqueAnswerList[j].Answer == AnswerList[i].Answer) {
                            IsExists = true;
                            break;
                        }
                    }

                    if (IsExists == false) {
                        UniqueAnswerList.push(AnswerList[i]);
                    }
                }
                else {
                    UniqueAnswerList.push(AnswerList[i]);
                }

            }
            //alert('UniqueAnswerList : ' + JSON.stringify(UniqueAnswerList));
            //alert('AnswerList : ' + JSON.stringify(AnswerList));

            var _DateTime = new DateTime();
            for (var i = 0 ; i < UniqueAnswerList.length ; i++) {
                var Details = UniqueAnswerList[i];
                var AnswerObj = null;
                var LastUpdatedDate = "";
                
                for (var j = 0 ; j < AnswerList.length ; j++) {
                    if (Details.Answer == AnswerList[j].Answer) {
                       
                        if (AnswerObj == null) {
                            AnswerObj = AnswerList[j];
                            LastUpdatedDate = _DateTime.GetDateByString(AnswerObj.LastUpdatedDate);
                        }

                        else if (LastUpdatedDate < _DateTime.GetDateByString(AnswerList[j].LastUpdatedDate)) {
                            LastUpdatedDate = _DateTime.GetDateByString(AnswerList[j].LastUpdatedDate);
                            AnswerObj = AnswerList[j];
                        }
                    }
                }
                if (AnswerObj != null) {
                    LastUpdatedAnswerList.push(AnswerObj);
                }
            }


            OneViewConsole.Debug("GetLastUpdatedAnswerList End", "DataCaptureBO.GetLastUpdatedAnswerList");

            return LastUpdatedAnswerList;
        }
        catch (Excep) {
          //  alert("DataCaptureBO.GetLastUpdatedAnswerList" + Excep);
          //  alert("DataCaptureBO.GetLastUpdatedAnswerList 22 " + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetLastUpdatedAnswerList", Excep);
        }
        finally {
        }
    }

    this.CheckIsMultiSelectCheckBox = function (AttributeNodeId, ControlId, TemplateNodes) {

        try {
            OneViewConsole.Debug("CheckIsMultiSelectCheckBox Start", "DataCaptureBO.CheckIsMultiSelectCheckBox");

            var IsCheckBoxList = false;
            if (TemplateNodes != undefined) {
                var TemplateNodeObject = TemplateNodes[AttributeNodeId];
                if (TemplateNodeObject.AnswerMode[0].ControlId == ControlId) {
                    if (TemplateNodeObject.AnswerMode[0].Type == "DCListViewControlConfig" 
                                           && ((TemplateNodeObject.AnswerMode[0].ListViewDisplay == 2 && TemplateNodeObject.AnswerMode[0].SelectionType == 1) || TemplateNodeObject.AnswerMode[0].ListViewDisplay == 1)) {
                        IsCheckBoxList = true;
                    }
                }
            }
            else {
                alert('DataCaptureBO.CheckIsMultiSelectCheckBox : TemplateNodes is undefined ');
            }
            OneViewConsole.Debug("CheckIsMultiSelectCheckBox End", "DataCaptureBO.CheckIsMultiSelectCheckBox");

            return IsCheckBoxList;

        }
        catch (Excep) {
            //alert("DataCaptureBO.CheckIsMultiSelectCheckBox" + Excep);
           // alert(AttributeNodeId + " ," + ControlId);
            //alert("DataCaptureBO.CheckIsMultiSelectCheckBox 22 " + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.CheckIsMultiSelectCheckBox", Excep);
        }
        finally {
        }
    }

    this.GetCheckboxListForUpdate = function (DCResultDetailEntityLstToUpdate, DCResultId) {

        try {
            OneViewConsole.Debug("GetCheckboxListForUpdate Start", "DataCaptureBO.GetCheckboxListForUpdate");


            if (TemplateNodes != undefined) {
                for (var AttributeNodeId in TemplateNodes) {
                    var TemplateNodeObject = TemplateNodes[AttributeNodeId];
                    if (TemplateNodeObject.AnswerMode[0].Type == "DCListViewControlConfig" 
                                           && ((TemplateNodeObject.AnswerMode[0].ListViewDisplay == 2 && TemplateNodeObject.AnswerMode[0].SelectionType == 1) || TemplateNodeObject.AnswerMode[0].ListViewDisplay == 1)) {

                        var ControlId = TemplateNodeObject.AnswerMode[0].ControlId;
                        var DataSourceModelName = ControlId + "DataSource";
                        var OldAnswerList = oScope[DataSourceModelName + "_OLD"];
                        //alert(DataSourceModelName + ', OldAnswerList : ' + JSON.stringify(OldAnswerList));
                        var NewAnswerList = oScope[DataSourceModelName];
                       // alert('NewAnswerList : ' + JSON.stringify(NewAnswerList));

                        var SelectedNewAnswerList = [];
                        if (NewAnswerList != undefined) {
                            for (var i = 0 ; i < NewAnswerList.length ; i++) {
                                NewAnswerList[i].AttributeNodeId = AttributeNodeId;
                                NewAnswerList[i].ControlId = ControlId;
                                if (NewAnswerList[i].Selected == true) {
                                    NewAnswerList[i].IsDisable = false;
                                    SelectedNewAnswerList.push(NewAnswerList[i]);
                                }
                            }
                        }

                        var FinalList = [];
                        var Index = 0;
                        var NewIndex = 0;
                        //Index to create forming
                        if (OldAnswerList != undefined  && OldAnswerList.length > 0) {
                            for (var i = 0 ; i < OldAnswerList.length ; i++) {
                                var OldAnswerData = OldAnswerList[i];
                                if (OldAnswerData.IndexId > Index) {
                                    Index = OldAnswerData.IndexId;
                                }
                            }

                            NewIndex = Index + 1;
                        }
                        else {
                            NewIndex = 0;
                        }

                        if (OldAnswerList != undefined) {
                            for (var i = 0 ; i < OldAnswerList.length ; i++) {
                                var OldAnswerData = OldAnswerList[i];
                                var IsExists = false;
                                var position = null;
                                for (var j = 0 ; j < SelectedNewAnswerList.length ; j++) {
                                    var NewAnswerData = SelectedNewAnswerList[j];
                                    if (OldAnswerData.Answer == NewAnswerData.Answer) {
                                        IsExists = true;
                                        position = j;
                                        break;
                                    }
                                }

                                if (IsExists == true) {
                                    SelectedNewAnswerList.splice(position, 1);
                                }
                                else {
                                    OldAnswerData.IsDisable = true;
                                    FinalList.push(OldAnswerData);
                                }
                            }
                        }

                        if (SelectedNewAnswerList.length > 0) {
                            for (var i = 0; i < SelectedNewAnswerList.length ; i++) {
                                var Data = SelectedNewAnswerList[i];
                                var DcId = OneViewSessionStorage.Get("DcId");
                                var _DcResultDetailsEntity = MyInstance.GetDcResultDetailEntityForCheckBoxList(AttributeNodeId, ControlId, Data.Answer, Data.AnswerValue, DATEntityType.BandDetailsMaster, false, TemplateNodeObject.AnswerMode[0].DataType, TemplateNodeObject.Name, NewIndex, DcId, DCResultId);
                                if (_DcResultDetailsEntity != undefined) {                                   
                                    FinalList.push(_DcResultDetailsEntity);
                                    NewIndex++;
                                }
                              
                            }
                        }
                        if (FinalList.length > 0) {
                            //alert('FinalList : ' + JSON.stringify(FinalList));
                            DCResultDetailEntityLstToUpdate = DCResultDetailEntityLstToUpdate.concat(FinalList);
                        }
                    }
                }
            }

            return DCResultDetailEntityLstToUpdate;

            /*
            var UniqueAnswerList = [];
            var AllAnswerList = OldAnswerList;
            AllAnswerList = AllAnswerList.concat(NewAnswerList);
            
            //Remove Duplicates from array
            for (var i = 0 ; i < AllAnswerList.length ; i++) {
                if (UniqueAnswerList.length > 0) {
                    var IsExists = false;
                    for (var j = 0 ; j < UniqueAnswerList.length ; j++) {
                        if (UniqueAnswerList[j].Answer == AllAnswerList[i].Answer) {
                            IsExists = true;
                            break;
                        }
                    }

                    if (IsExists == false) {
                        UniqueAnswerList.push(AllAnswerList[i]);
                    }
                }
                else {
                    UniqueAnswerList.push(AllAnswerList[i]);
                }

            }

          
            for (var i = 0 ; i < UniqueAnswerList.length ; i++) {
                var UniqueAnswerDetails = UniqueAnswerList[i];
                var IsExists = false;
                for (var j = 0 ; j < NewAnswerList.length ; j++) {
                    if (UniqueAnswerList[i].Answer == NewAnswerList[j].Answer) {
                        IsExists = true;
                        break;
                    }
                }
                if (IsExists == false) {
                    UniqueAnswerDetails.Isdisable = true;
                    FinalList.push(UniqueAnswerDetails);
                }
            }
        }
    }
    */

            OneViewConsole.Debug("GetCheckboxListForUpdate End", "DataCaptureBO.GetCheckboxListForUpdate");

        }
        catch (Excep) {
            //alert("DataCaptureBO.GetCheckboxListForUpdate" + Excep);
            //alert("DataCaptureBO.GetCheckboxListForUpdate 22 " + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.GetCheckboxListForUpdate", Excep);
        }
        finally {
        }
    }


    var UpdateScoreAndPercentage = function (ScoreDetails) {

        try {

            var _OneViewSqlitePlugin = new OneViewSqlitePlugin();

            var Query = "UPDATE DataCaptureEntity SET Score = " + ScoreDetails.Score +
                                    ", MaxScore = " + ScoreDetails.MaxScore + ", Percentage = " + ScoreDetails.Percentage +
                                    " WHERE DataCaptureId = " + DcId;

            _OneViewSqlitePlugin.ExcecuteSql(Query);
            
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateScoreAndPercentage", Excep);
        }
    }


    this.LoadNCActionsHtml = function ($compile, IsSaveNCCrossValidation, AttributeId) {

        try {
            
            oScope.MultiMediaSubElements = [];
           // oScope.CustomActions = [];

            var _oOneViewSidePanel = new OneViewSidePanel();
            _oOneViewSidePanel.Clear();


            var CommentsActionsInnerHtml = MyInstance.LoadCommentsActionsInnerHtml(ActionRightPanelTab.Action, AttributeId);
            var Html = '<div class="bar bar-header no-padding">' +
                                   '<div class="button-bar my-audit">' +
                                        '<a class="button button-clear" id="Tab_1" ng-click="RightPanelTabClick(' + ActionRightPanelTab.Comments + ',' + AttributeId + ')"><i class="icon icon-comments"></i> {{"Comments" | xlat}}</a>' +
                                        '<a class="button button-clear" id="Tab_2" ng-click="RightPanelTabClick(' + ActionRightPanelTab.Action + ' , ' + AttributeId + ')"><i class="icon icon-edit"></i> {{"Action" | xlat}}</a>' +

                                   '</div>' +
                               '</div>' +
                               '<div class="scroll-content has-header has-footer action" style="background: #eef3f5;">' +
                                   '<div class="full-height scrollable" id="RightPanelContent">' +
                                   CommentsActionsInnerHtml +
                                   '</div>' +
                                '</div>' +
                                '<div class="bar bar-footer no-padding">' +
                                    '<div class="row">' +
                                        '<div class="col"><a class="button button-block button-clear" ng-click="CloseRightPanel()"><i class="icon icon-cancel-circle"></i> {{"Close" | xlat}}</a></div>' +
                                        //'<div class="col"><a class="button button-block button-clear" ng-click="RightPanelSave()"><i class="icon ion-close-round"></i>Save</a></div>' +
                                    '</div>' +
                                '</div>';



           // alert('Html : ' + Html);       


            var _oOneViewCompiler = new OneViewCompiler();
            _oOneViewCompiler.CompileAndApeend(oScope, $compile, Html, "divAutocomplatePopUp");

            if (IsSaveNCCrossValidation != true) {
                DeActivateAllTabs(2);
                ActivateCurrentTab(ActionRightPanelTab.Action);
                _oOneViewSidePanel.Toggle(oSnapRemote);
            }

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadNCCommentsHtml", Excep);
        }
    }


    this.LoadCommentsActionsInnerHtml = function (HeaderId, AttributeId) {

        try {

            var Html = '';

            // Comments Tab Html
            if (HeaderId == 1) {
                Html += '<div class="list comment-box">' +
                                     '<div class="item item-divider item-icon-left"><i class="icon icon-comment-o"></i> {{"Comments" | xlat}}</div>' +
                                     '<div class="item item-button-right">' +
                                         '<textarea rows="6" ng-model="CommentsRightPanel" ng-change="UpdateRightPanelComments(CommentsRightPanel,' + AttributeId + ')"></textarea>' +
                                         '<a class="button button-calm" ng-click="ClearCustomActionComments(' + AttributeId + ')">{{"Clear" | xlat}}</a>' +
                                     '</div>' +
                                '</div>';
            }
            else if (HeaderId == 2) {

                //if (ActionNCConfigList.length > 1) {
                //    alert("DataCaptureBO.GetHtml actions for multiple rules : Not implemented exception");
                //}
                //else {
             
                
                // var TemplateNodeIds = "'" + ActionNCConfigList[0].TemplateNodeIds + "'";
                var TemplateNodeIds = "'0'";
                //alert(AttributeActionNCConfig.RuleId + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsNC + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsObservation + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsManual + ',' + TemplateNodeIds);
                    var CustomHtml = '<div class="list">' +
                                      '<div class="item item-divider item-icon-left">' +
                                          '<i class="icon icon-edit"></i> {{"Custom Actions" | xlat}}' +
                                      '</div>' +
                                      '<div class="item no-padding">' +
                                          '<div class="cus-action">' +
                                            '<div class="list no-margin">' +
                                              '<div class="item item-button-right" ng-repeat="CustomAction in CustomActions" style="text-overflow: inherit;white-space: normal;overflow: inherit;">' +
                                                '{{CustomAction.label}}' +
                                                '<a class="button button-clear hide" ng-click="DeleteCustomAction(CustomAction)"><i class="icon icon-minus-circle"></i></a>' +
                                              '</div>' +
                                            '</div>' +
                                            '<div class="item item-input-inset">' +
                                              '<label class="item-input-wrapper"><textarea msd-elastic="/n/n" ng-model="CustomAction"></textarea></label>' +
                                              '<a class="button button-calm" ng-click="AddCustomAction(CustomAction,' + AttributeActionNCConfig.RuleId + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsNC + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsObservation + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsManual + ',' + TemplateNodeIds + ')"><i class="icon icon-plus"></i> {{"Add" | xlat}}</a>' +                                             
                                              // '<a class="button button-calm" ng-click="AddCustomAction(CustomAction)"><i class="icon icon-plus"></i> {{"Add" | xlat}}</a>' +
                                            '</div>' +
                                          '</div>' +
                                      '</div>' +
                                    '</div>';

                    Html += CustomHtml;
                // }
                   
                //oScope.ActionMultiMediaSubElements
                    var MediaHtml = '<div class="list">' +
                                               '<div class="item item-divider item-icon-left">' +
                                                   '<i class="icon icon-photo"></i> {{"Add Media" | xlat}}' +
                                               '</div>' +
                                               '<div class="item">' +
                                                   '<a class="button button-block button-calm no-margin" ng-click="AttachPictureToAction(' + AttributeActionNCConfig.RuleId + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsNC + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsObservation + ',' + AttributeActionNCConfig.ActionNCConfigSetting.IsManual + ')"><i class="icon icon-camera"></i> {{"Camera" | xlat}}</a>' +
                                                   '<div class="cam-photo">' +
                                                       '<div ng-repeat="MultiMediaSubElement in ActionMultiMediaSubElements">' +
                                                           //'<a href="{{MultiMediaSubElement.LocalURL}}" class="angularbox" rel="1" id="' + AttributeActionNCConfig.RuleId + '"><img src="{{MultiMediaSubElement.LocalURL}}" alt="{{MultiMediaSubElement.AlternateName}}"></a>' +
                                                           '<a href="{{MultiMediaSubElement.LocalURL}}" class="angularbox" rel="' + Math.random() + '" id="' + AttributeActionNCConfig.RuleId + '"><img src="{{MultiMediaSubElement.LocalURL}}" alt="{{MultiMediaSubElement.AlternateName}}"></a>' +
                                                       '</div>' +
                                                   '</div>' +
                                               '</div>' +
                                           '</div>';

                    Html += MediaHtml;
            }

            return Html;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.LoadCommentsActionsInnerHtml", Excep);
        }
    }

    this.RightPanelTabClick = function (HeaderId, AttributeId) {

        try {
            var RightPanelContentId = "RightPanelContent";
            ClearInnerContent(RightPanelContentId)
            var Html = MyInstance.LoadCommentsActionsInnerHtml(HeaderId, AttributeId);

            DeActivateAllTabs(2);
            ActivateCurrentTab(HeaderId);

            var _oOneViewCompiler = new OneViewCompiler();
            _oOneViewCompiler.CompileAndApeend(oScope, ocompile, Html, RightPanelContentId);


        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.RightPanelTabClick", Excep);
        }
    }

    var ClearInnerContent = function (RightPanelContentId) {
        try {
            OneViewConsole.Debug("ClearInnerContent Start", "DataCaptureBO.ClearInnerContent");

            var _oDOM = new DOM();
            _oDOM.RemoveInnerHtml(RightPanelContentId);

            OneViewConsole.Debug("ClearInnerContent End", "DataCaptureBO.ClearInnerContent");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.CloseRightPanel", Excep);
        }
    }

    this.AddCustomAction = function (CustomAction, RuleId, IsNC, IsObservation, IsManualRule, TemplateNodeIds) {

        try {
            OneViewConsole.Debug("AddCustomAction Start", "DataCaptureBO.AddCustomAction");

            var IsValid = true;

            if (CustomAction != "" && CustomAction != null && CustomAction != undefined) {

                var _oLVDataCaptureBO = new LVDataCaptureBO();
                var GeoLocationResponse = _oLVDataCaptureBO.GetLatitudeAndLongitude();

                var _oLVSpecialCharacterValidationComponent = new LVSpecialCharacterValidationComponent();
                CustomAction = _oLVSpecialCharacterValidationComponent.RemoveSpecialCharacters(CustomAction);

                if (CPActionResult[RuleId] == undefined) {
                    CPActionResult[RuleId] = {
                        "IsDisable": false,
                        "IsNC": IsNC,
                        "IsObservation": IsObservation,
                        "IsManualRule": IsManualRule,
                        "ActionClientId": "",
                        "ActionClientGuid": "",
                        "DCNCMappingClientId": "",
                        "DNNCMappimgServerId": 0,
                        "TemplateNodeIds": TemplateNodeIds,
                        "Actions": [
                            {
                                "PreDefinedActionId": 0,
                                "Name": CustomAction,
                                "ActionDetailsClientId": "",
                                "IsDisable": false,
                                "ActionType": CPActionType.CustomAction,
                                "ActionDetailsServerId": 0,
                                "Latitude": GeoLocationResponse.Latitude,
                                "Longitude": GeoLocationResponse.Longitude
                            }
                        ],
                        "MultimediaSubElements": []
                    };
                }
                else {
                    var IsExist = false;
                    for (var i = 0; i < CPActionResult[RuleId].Actions.length; i++) {
                        if (CPActionResult[RuleId].Actions[i].Name == CustomAction && CPActionResult[RuleId].Actions[i].IsDisable == false) {
                            IsExist = true;
                            break;
                        }
                    }
                    if (IsExist == false) {
                        CPActionResult[RuleId].Actions.push(
                             {
                                 "PreDefinedActionId": 0,
                                 "Name": CustomAction,
                                 "ActionDetailsClientId": "",
                                 "IsDisable": false,
                                 "ActionType": CPActionType.CustomAction,
                                 "ActionDetailsServerId": 0,
                                 "Latitude": GeoLocationResponse.Latitude,
                                 "Longitude": GeoLocationResponse.Longitude
                             }
                       );
                        CPActionResult[RuleId].IsDisable = false;
                    }
                    else {
                        IsValid = false;
                       

                        navigator.notification.alert(xlatService.xlat("IN-MG-LVI-001 :: The action already exists, Please enter new action"), ['OK'], "");
                    }
                }

                if (IsValid == true) {
                    oScope.CustomActions.push({ "RuleId": RuleId, "label": CustomAction });
                    oScope.CustomAction = "";
                }
            }
            else {
                
                navigator.notification.alert(xlatService.xlat("MN-RQ-LVI-002 :: Please enter valid action"), ['OK'], "");
            }

            //alert(JSON.stringify(CPActionResult[RuleId]));
           // alert(JSON.stringify(CPActionResult));
          //  alert('oScope.CustomActions  : ' + JSON.stringify(oScope.CustomActions));
            OneViewConsole.Debug("AddCustomAction End", "DataCaptureBO.AddCustomAction");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.AddCustomAction", Excep);
        }
    }

    this.DeleteCustomAction = function (CustomAction) {

        try {
            OneViewConsole.Debug("DeleteCustomAction Start", "DataCaptureBO.DeleteCustomAction");

            //alert('oScope.CustomActions : ' + JSON.stringify(oScope.CustomActions));
            for (var i = 0; i < oScope.CustomActions.length; i++) {
                if (oScope.CustomActions[i].label == CustomAction.label) {
                    oScope.CustomActions.splice(i, 1);
                    break;
                }
            }

            var IsRuleDisabled = true;

            //alert(JSON.stringify(CPActionResult[CustomAction.RuleId]));
           

            if (CPActionResult != null && Object.keys(CPActionResult).length > 0) {
                for (var i = 0; i < CPActionResult[CustomAction.RuleId].Actions.length; i++) {

                    if (CPActionResult[CustomAction.RuleId].Actions[i].Name == CustomAction.label) {

                        if (CPActionResult[CustomAction.RuleId].Actions[i].ActionDetailsClientId == "") { //if (LVIsEdit == false) {                              
                            CPActionResult[CustomAction.RuleId].Actions.splice(i, 1);
                        }
                        else {
                            CPActionResult[CustomAction.RuleId].Actions[i].IsDisable = true;
                        }
                    }
                    else if (CPActionResult[CustomAction.RuleId].Actions[i].IsDisable == false) {
                        IsRuleDisabled = false;
                    }
                }
            }
            
            /*

            if (MyInstance.DCNCMappingList.length > 0 && oScope.CustomActions.length < 1) {

                for (var i = 0; i < MyInstance.DCNCMappingList.length ; i++) {
                    alert('DCNCMappingList :  ' + MyInstance.DCNCMappingList[i].NCRuleId);
                    alert('CustomAction : ' + JSON.stringify(CustomAction));

                    if (MyInstance.DCNCMappingList[i].NCRuleId == CustomAction.RuleId) {
                        MyInstance.DCNCMappingList[i].IsNC = false;
                        break;
                    }

                }

            }
            */

            if (IsRuleDisabled == true) {
                if (CPActionResult != null && Object.keys(CPActionResult).length > 0) {
                    if (CPActionResult[CustomAction.RuleId].DCNCMappingClientId == "") { //if (LVIsEdit == false) {
                        delete CPActionResult[CustomAction.RuleId];
                    }
                    else {
                        CPActionResult[CustomAction.RuleId].IsDisable = true;
                        CPActionResult[CustomAction.RuleId].IsNC = false;
                    }
                }
                oScope.ActionMultiMediaSubElements = [];
            }

           // alert(JSON.stringify(CPActionResult[CustomAction.RuleId]));
            //alert('DeleteCustomAction CPActionResult : ' + JSON.stringify(CPActionResult));
            //alert('DeleteCustomAction  oScope.CustomActions : ' + JSON.stringify(oScope.CustomActions));
            OneViewConsole.Debug("DeleteCustomAction End", "DataCaptureBO.DeleteCustomAction");

        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.DeleteCustomAction", Excep);
        }
    }

    this.InsertCustomActionInDb = function (oDataCaptureEntity) {

        try {
            OneViewConsole.Debug("InsertCustomActionInDb Start", "DataCaptureBO.InsertCustomActionInDb");

            var DcStartDate = new DateTime().GetDateAndTime();
            var DataCaptureRequest = MakeGetCompleteDataCaptureRequest(DcStartDate);
            var IsNC = false;
            var Actions = {};
            var IsActionSaveSuccess = true;

            for (var itrCPActionResult in CPActionResult) {
                var oAction = GetAction(DataCaptureRequest, oDataCaptureEntity.ClientGuid, oDataCaptureEntity.DcResultsEntitylist[0].ClientGuid, itrCPActionResult, "", CPActionResult[itrCPActionResult]);
                Actions[itrCPActionResult] = oAction;
                //alert(JSON.stringify(oAction));
                if (CPActionResult[itrCPActionResult].IsNC == true) {
                    IsNC = true;
                }
            }

            var AttributeActionInfo = null;
            if (JSON.stringify(Actions) != '{}') {
                var _oActionDAO = new ActionDAO();
                AttributeActionInfo = _oActionDAO.CreateActions(Actions);
                IsActionSaveSuccess = (AttributeActionInfo != null) ? true : false;
            }

            var Res = { 'IsActionSaveSuccess': IsActionSaveSuccess, 'AttributeActionInfo': AttributeActionInfo };
            OneViewConsole.Debug("InsertCustomActionInDb End", "DataCaptureBO.InsertCustomActionInDb");

            return Res;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.InsertCustomActionInDb", Excep);
        }
    }

    var MakeGetCompleteDataCaptureRequest = function (DcStartDate) {

        try {
            OneViewConsole.Debug("MakeGetCompleteDataCaptureRequest Start", "DataCaptureBO.MakeGetCompleteDataCaptureRequest");

            var _oLVDataCaptureBO = new LVDataCaptureBO();
            var GeoLocationResponse = _oLVDataCaptureBO.GetLatitudeAndLongitude();

            var DataCaptureRequest = {

                CurrenntDateAndTime: new DateTime().GetDateAndTime(),

                ServiceId: OneViewSessionStorage.Get("ServiceId"),
                ServiceName: OneViewSessionStorage.Get("ServiceName"),

                TemplateNodeId: OneViewSessionStorage.Get("TemplateId"),
                TemplateNodeName: OneViewSessionStorage.Get("TemplateName"),

                DcPlaceId: OneViewSessionStorage.Get("DcPlaceId"),
                DcPlaceName: OneViewSessionStorage.Get("DcPlaceName"),

                ShiftId: OneViewSessionStorage.Get("CurrentShiftId"),
                ShiftName: OneViewSessionStorage.Get("CurrentShiftName"),

                SystemUserId: OneViewSessionStorage.Get("LoginUserId"),
                UserName: OneViewSessionStorage.Get("LoginUserName"),

                DcProfileId: OneViewSessionStorage.Get("DcProfileId"),

                DcPlaceDimension: (OneViewSessionStorage.Get("DcPlaceId") > 0) ? DATEntityType.OrganizationAssestsNode : 0, // Need to access from session

                DcStartDate: DcStartDate,

                Latitude: GeoLocationResponse.Latitude,
                Longitude: GeoLocationResponse.Longitude
            }

            OneViewConsole.Debug("MakeGetCompleteDataCaptureRequest End", "DataCaptureBO.MakeGetCompleteDataCaptureRequest");

            return DataCaptureRequest;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.MakeGetCompleteDataCaptureRequest", Excep);
        }
    }


    var GetAction = function (DataCaptureRequest, DataCaptureClientGuid, DcResultsClientGuid, NCRuleId, DcResultDetailsClientGuid, ActionResultItem) {

        try {
            OneViewConsole.Debug("GetAction Start", "LVDataCaptureBO.GetAction");

            var _oActionEntity = new ActionEntity();
            _oActionEntity = GetActionEntity(DataCaptureRequest);
           // alert('_oActionEntity : ' + JSON.stringify(_oActionEntity));
            var ActionDetailsCount = 0;

            for (var i = 0; i < ActionResultItem.Actions.length; i++) {
                _oActionEntity.ActionDetailsEntityList[ActionDetailsCount] = GetActionDetailsEntity(DataCaptureRequest, _oActionEntity.ClientGuid, "", ActionResultItem.Actions[i]);
                ActionDetailsCount += 1;
            }

            UpdateActionIdInDcNCMapping(_oActionEntity.ClientGuid, NCRuleId, DataCaptureClientGuid);
            /*
            var _oDCNCMapping = GetDCNCMapping(DataCaptureRequest, DataCaptureClientGuid, DcResultsClientGuid, NCRuleId, DcResultDetailsClientGuid, _oActionEntity.ClientGuid, ActionResultItem);
            */
            var MultiMediaSubElements = new Array();
            for (var i = 0; i < ActionResultItem.MultimediaSubElements.length; i++) {
                ActionResultItem.MultimediaSubElements[i].MappedEntityClientGuid = _oActionEntity.ClientGuid;
                MultiMediaSubElements[i] = GetMultiMediaSubElement(DataCaptureRequest, ActionResultItem.MultimediaSubElements[i]);
            }
          
            OneViewConsole.Debug("GetAction End", "LVDataCaptureBO.GetAction");

            return { "ActionEntity": _oActionEntity, "DCNCMapping": null, "MultiMediaSubElements": MultiMediaSubElements };
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "LVDataCaptureBO.GetAction", Excep);
        }
        finally {

        }
    }

    var GetActionEntity = function (DataCaptureRequest) {

        try {
            OneViewConsole.Debug("GetActionEntity Start", "LVDataCaptureBO.GetActionEntity");

            var _oActionEntity = new ActionEntity();

            _oActionEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
            _oActionEntity.MobileVersionId = 1;

            _oActionEntity.ServiceId = DataCaptureRequest.ServiceId;

            _oActionEntity.ActionRaisedBySystemUserId = DataCaptureRequest.SystemUserId;
            _oActionEntity.ActionRaisedByUserName = DataCaptureRequest.UserName;

            _oActionEntity.IsApproved = "false";
            _oActionEntity.ActionContext = DATActionContext.DataCapture;

            _oActionEntity.IsSubmited = "true";
            _oActionEntity.SubmitedDate = DataCaptureRequest.CurrenntDateAndTime;

            _oActionEntity.CreatedDate = DataCaptureRequest.CurrenntDateAndTime;
            _oActionEntity.IsSynchronized = "false";
            _oActionEntity.IsDisable = "false";

            OneViewConsole.Debug("GetActionEntity End", "LVDataCaptureBO.GetActionEntity");

            return _oActionEntity;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "LVDataCaptureBO.GetActionEntity", Excep);
        }
        finally {

        }
    }

    var GetActionDetailsEntity = function (DataCaptureRequest, ActionClientGuid, DataCaptureClientGuid, Action) {

        try {
            OneViewConsole.Debug("GetActionDetailsEntity Start", "LVDataCaptureBO.GetActionDetailsEntity");

            var _oActionDetailsEntity = new ActionDetailsEntity();

            _oActionDetailsEntity.ClientGuid = OneViewUniqueGenerator.GetGuid();
            _oActionDetailsEntity.MobileVersionId = 1;

            _oActionDetailsEntity.ServiceId = DataCaptureRequest.ServiceId;

            _oActionDetailsEntity.ActionClientGuid = ActionClientGuid;

            if (Action.ActionType == CPActionType.PredefinedAction) {
                _oActionDetailsEntity.PreDefinedActionId = Action.PreDefinedActionId;
                _oActionDetailsEntity.CustomAction = "";
            }
            else if (Action.ActionType == CPActionType.CustomAction) {
                _oActionDetailsEntity.CustomAction = Action.Name;
                _oActionDetailsEntity.PreDefinedActionId = 0;
            }

            _oActionDetailsEntity.DataCaptureClientGuid = DataCaptureClientGuid;

            _oActionDetailsEntity.IsPersonalObservation = "true";

            _oActionDetailsEntity.ActionRaisedBySystemUserId = DataCaptureRequest.SystemUserId;
            _oActionDetailsEntity.ActionRaisedByUserName = DataCaptureRequest.UserName;

            _oActionDetailsEntity.Latitude = Action.Latitude;
            _oActionDetailsEntity.Longitude = Action.Longitude;

            _oActionDetailsEntity.CreatedDate = DataCaptureRequest.CurrenntDateAndTime;
            _oActionDetailsEntity.IsSynchronized = "false";
            _oActionDetailsEntity.IsDisable = "false";

            OneViewConsole.Debug("GetActionDetailsEntity End", "LVDataCaptureBO.GetActionDetailsEntity");

            return _oActionDetailsEntity;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "LVDataCaptureBO.GetActionDetailsEntity", Excep);
        }
        finally {

        }
    }

    var GetMultiMediaSubElement = function (DataCaptureRequest, _oMultiMediaSubElement) {

        try {

            OneViewConsole.Debug("GetMultiMediaSubElement Start", "LVDataCaptureBO.MakeGetCompleteDataCaptureRequest");
            
            var _oMultiMediaSubElements = new MultiMediaSubElements();

            _oMultiMediaSubElements.ClientGuid = OneViewUniqueGenerator.GetGuid();
            _oMultiMediaSubElements.MobileVersionId = 1;
            _oMultiMediaSubElements.ServiceId = DataCaptureRequest.ServiceId;

            _oMultiMediaSubElements.MappedEntityClientGuid = _oMultiMediaSubElement.MappedEntityClientGuid;
            _oMultiMediaSubElements.Dimension = _oMultiMediaSubElement.Dimension;
            _oMultiMediaSubElements.MultiMediaType = _oMultiMediaSubElement.MultiMediaType;
            _oMultiMediaSubElements.LocalURL = _oMultiMediaSubElement.LocalURL;

            _oMultiMediaSubElements.Comments = _oMultiMediaSubElement.Comments;
            _oMultiMediaSubElements.CreatedDate = DataCaptureRequest.CurrenntDateAndTime;
            _oMultiMediaSubElements.TimeStamp = DataCaptureRequest.CurrenntDateAndTime;
            _oMultiMediaSubElements.IsSynchronized = false;
            _oMultiMediaSubElements.IsMultiMediaSynchronized = false;
            _oMultiMediaSubElements.IsDisabled = _oMultiMediaSubElement.IsDisabled;

            _oMultiMediaSubElements.Latitude = _oMultiMediaSubElement.Latitude;
            _oMultiMediaSubElements.Longitude = _oMultiMediaSubElement.Longitude;
         
            OneViewConsole.Debug("GetMultiMediaSubElement End", "LVDataCaptureBO.MakeGetCompleteDataCaptureRequest");

            return _oMultiMediaSubElements;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "LVDataCaptureBO.GetMultiMediaSubElement", Excep);
        }
    }



    var UpdateActionIdInDcNCMapping = function (ActionClientGuid, RuleId, DataCaptureClientGuid) {

        try {
            OneViewConsole.Debug("UpdateActionIdInDcNCMapping Start", "LVDataCaptureBO.UpdateActionIdInDcNCMapping");

            var query = "UPDATE DCNCMapping set ActionClientGuid = '" + ActionClientGuid + "' WHERE NCRuleId = " + RuleId + " AND DataCaptureClientGuid = '" + DataCaptureClientGuid + "'";
           // alert('query : ' + query);

            var queryResult = window.OneViewSqlite.excecuteSql(query);

            OneViewConsole.Debug("UpdateActionIdInDcNCMapping End", "LVDataCaptureBO.UpdateActionIdInDcNCMapping");

        }
        catch (Excep) {
          //  alert(' UpdateActionIdInDcNCMapping Excep : ' + Excep);
          //  alert(' UpdateActionIdInDcNCMapping Excep : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "LVDataCaptureBO.UpdateActionIdInDcNCMapping", Excep);
        }
        finally {

        }
    }

    var LoadCustomActions = function (oActionNCConfig, TemplateNodeId, IsRuleViolated) {

        try {
            OneViewConsole.Debug("LoadCustomActions Start", "LVActionNCComponent.LoadCustomActions");

            //alert('DcId : ' + DcId);
            if (DcId != null) {

                var DCClientGuid = GetDCClientGuidById();

                var _oActionDAO = new ActionDAO();
                var ActionDCNCMappings = _oActionDAO.GetAllActions(DCClientGuid);

                //alert('ActionDCNCMappings : ' + JSON.stringify(ActionDCNCMappings));
                // alert(ActionDCNCMappings.length + ', IsRuleViolated : ' + IsRuleViolated);
                for (var i = 0; i < ActionDCNCMappings.length; i++) {

                    //  alert('ActionDCNCMappings[i] : ' + JSON.stringify(ActionDCNCMappings[i]));
                    //  alert('CPActionResult : ' + JSON.stringify(CPActionResult));
                    if (ActionDCNCMappings[i] != undefined && IsRuleViolated == true) {
                        //   alert('ActionDCNCMappings[i].RuleId : ' + ActionDCNCMappings[i].RuleId);
                        if (CPActionResult[ActionDCNCMappings[i].RuleId] != undefined) {
                            //  alert('CPActionResult dd : ' + JSON.stringify(CPActionResult[ActionDCNCMappings[i].RuleId]));
                            var IsExist = CheckContainsData(ActionDCNCMappings[i].CustomAction, CPActionResult[ActionDCNCMappings[i].RuleId].Actions);
                            if (IsExist != true) {
                                CPActionResult[ActionDCNCMappings[i].RuleId].Actions.push({
                                    "PreDefinedActionId": (ActionDCNCMappings[i].CustomAction != "") ? 0 : ActionDCNCMappings[i].PreDefinedActionId,
                                    "Name": ActionDCNCMappings[i].CustomAction,
                                    "ActionDetailsClientId": ActionDCNCMappings[i].ActionDetailsClientId,
                                    "IsDisable": false,
                                    "ActionType": (ActionDCNCMappings[i].CustomAction != "") ? CPActionType.CustomAction : CPActionType.PredefinedAction,
                                    "ActionDetailsServerId": ActionDCNCMappings[i].ActionDetailsServerId,
                                });
                            }
                        }
                        else {
                            CPActionResult[ActionDCNCMappings[i].RuleId] = {
                                "IsDisable": false,
                                "IsNC": (ActionDCNCMappings[i].IsNC == "true") ? true : false,
                                "IsObservation": (ActionDCNCMappings[i].IsObservation == "true") ? true : false,
                                "IsManualRule": (ActionDCNCMappings[i].IsManualRule == "true") ? true : false,
                                "ActionClientId": ActionDCNCMappings[i].ActionClientId,
                                "ActionClientGuid": ActionDCNCMappings[i].ActionClientGuid,
                                "DCNCMappingClientId": ActionDCNCMappings[i].DCNCMappingClientId,
                                "DNNCMappimgServerId": ActionDCNCMappings[i].DNNCMappimgServerId,
                                "TemplateNodeIds": ActionDCNCMappings[i].TemplateNodeIds,
                                "Actions": [
                                    {
                                        "PreDefinedActionId": (ActionDCNCMappings[i].CustomAction != "") ? 0 : ActionDCNCMappings[i].PreDefinedActionId,
                                        "Name": ActionDCNCMappings[i].CustomAction,
                                        "ActionDetailsClientId": ActionDCNCMappings[i].ActionDetailsClientId,
                                        "IsDisable": false,
                                        "ActionType": (ActionDCNCMappings[i].CustomAction != "") ? CPActionType.CustomAction : CPActionType.PredefinedAction,
                                        "ActionDetailsServerId": ActionDCNCMappings[i].ActionDetailsServerId,
                                    }
                                ],
                                "MultimediaSubElements": []
                            };
                        }
                    }
                    else {
                     //   alert(oActionNCConfig.RuleId + " , " + ActionDCNCMappings[i].RuleId + ", CPActionResult[ActionDCNCMappings[i].RuleId] : " + CPActionResult[ActionDCNCMappings[i].RuleId]  + ", ActionDCNCMappings[i].DCNCMappingClientId : " + ActionDCNCMappings[i].DCNCMappingClientId);
                        if (oActionNCConfig.RuleId == ActionDCNCMappings[i].RuleId) {
                            if (CPActionResult[ActionDCNCMappings[i].RuleId] != undefined && ActionDCNCMappings[i].DCNCMappingClientId == "") {
                                //  alert('delete');                            
                                delete CPActionResult[ActionDCNCMappings[i].RuleId];
                            }
                            else if (CPActionResult[ActionDCNCMappings[i].RuleId] != undefined && ActionDCNCMappings[i].DCNCMappingClientId != "") {
                                var IsExist = CheckContainsData(ActionDCNCMappings[i].CustomAction, CPActionResult[ActionDCNCMappings[i].RuleId].Actions);
                                if (IsExist != true) {
                                    CPActionResult[ActionDCNCMappings[i].RuleId].Actions.push({
                                        "PreDefinedActionId": (ActionDCNCMappings[i].CustomAction != "") ? 0 : ActionDCNCMappings[i].PreDefinedActionId,
                                        "Name": ActionDCNCMappings[i].CustomAction,
                                        "ActionDetailsClientId": ActionDCNCMappings[i].ActionDetailsClientId,
                                        "IsDisable": false,
                                        "ActionType": (ActionDCNCMappings[i].CustomAction != "") ? CPActionType.CustomAction : CPActionType.PredefinedAction,
                                        "ActionDetailsServerId": ActionDCNCMappings[i].ActionDetailsServerId,
                                    });
                                }
                            }
                            else {
                                // alert('disable action ActionDCNCMappings[i].IsNC : ' + ActionDCNCMappings[i].IsNC);

                                if (CPActionResult[ActionDCNCMappings[i].RuleId] == undefined) {
                                    CPActionResult[ActionDCNCMappings[i].RuleId] = {
                                        "IsDisable": true,
                                        "IsNC": false,
                                        "IsObservation": (ActionDCNCMappings[i].IsObservation == "true") ? true : false,
                                        "IsManualRule": (ActionDCNCMappings[i].IsManualRule == "true") ? true : false,
                                        "ActionClientId": ActionDCNCMappings[i].ActionClientId,
                                        "ActionClientGuid": ActionDCNCMappings[i].ActionClientGuid,
                                        "DCNCMappingClientId": ActionDCNCMappings[i].DCNCMappingClientId,
                                        "DNNCMappimgServerId": ActionDCNCMappings[i].DNNCMappimgServerId,
                                        "TemplateNodeIds": ActionDCNCMappings[i].TemplateNodeIds,
                                        "Actions": [
                                            {
                                                "PreDefinedActionId": (ActionDCNCMappings[i].CustomAction != "") ? 0 : ActionDCNCMappings[i].PreDefinedActionId,
                                                "Name": ActionDCNCMappings[i].CustomAction,
                                                "ActionDetailsClientId": ActionDCNCMappings[i].ActionDetailsClientId,
                                                "IsDisable": true,
                                                "ActionType": (ActionDCNCMappings[i].CustomAction != "") ? CPActionType.CustomAction : CPActionType.PredefinedAction,
                                                "ActionDetailsServerId": ActionDCNCMappings[i].ActionDetailsServerId,
                                            }
                                        ],
                                        "MultimediaSubElements": []
                                    };
                                }
                                else {

                                    CPActionResult[ActionDCNCMappings[i].RuleId].IsDisable = true;
                                    CPActionResult[ActionDCNCMappings[i].RuleId].IsNC = false;

                                    for (var itr = 0; itr < CPActionResult[ActionDCNCMappings[i].RuleId].Actions.length; itr++) {
                                        CPActionResult[ActionDCNCMappings[i].RuleId].Actions[itr].IsDisable = true;
                                    }

                                    /*
                                    CPActionResult[ActionDCNCMappings[i].RuleId].Actions.push({
                                        "PreDefinedActionId": (ActionDCNCMappings[i].CustomAction != "") ? 0 : ActionDCNCMappings[i].PreDefinedActionId,
                                        "Name": ActionDCNCMappings[i].CustomAction,
                                        "ActionDetailsClientId": ActionDCNCMappings[i].ActionDetailsClientId,
                                        "IsDisable": true,
                                        "ActionType": (ActionDCNCMappings[i].CustomAction != "") ? CPActionType.CustomAction : CPActionType.PredefinedAction,
                                        "ActionDetailsServerId": ActionDCNCMappings[i].ActionDetailsServerId,
                                    });
                                    */
                                }

                            }
                        }
                    }

                }


               
            }

            //  alert('CPActionResult[oActionNCConfig.RuleId].Actions  : ' + JSON.stringify(CPActionResult[oActionNCConfig.RuleId].Actions));
            if (CPActionResult[oActionNCConfig.RuleId] != undefined && CPActionResult[oActionNCConfig.RuleId].IsDisable == false) {
                for (var i = 0; i < CPActionResult[oActionNCConfig.RuleId].Actions.length; i++) {                   
                    if (CPActionResult[oActionNCConfig.RuleId].Actions[i].IsDisable == false && CPActionResult[oActionNCConfig.RuleId].Actions[i].ActionType == CPActionType.CustomAction) {
                        oScope.CustomActions.push({ "RuleId": oActionNCConfig.RuleId, "label": CPActionResult[oActionNCConfig.RuleId].Actions[i].Name });
                        //if(CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements.length>0){
                        //    oScope.ActionMultiMediaSubElements.push(CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements);
                        //}
                    }                  
                }
            }

            //alert('LoadCustomActions CPActionResult : ' + JSON.stringify(CPActionResult));
           // alert('LoadCustomActions oScope.CustomActions : ' + JSON.stringify(oScope.CustomActions));
            OneViewConsole.Debug("LoadCustomActions End", "LVActionNCComponent.LoadCustomActions");
        }
        catch (Excep) {
            //  alert('LoadCustomActions CPActionResult 11 : ' + Excep);
            //  alert('LoadCustomActions CPActionResult : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("Framework", "LVDefaultActionPageComponent.LoadCustomActions", Excep);
        }
    }

    this.UpdateCustomActionInDb = function () {

        try {
            OneViewConsole.Debug("UpdateCustomActionInDb Start", "DataCaptureBO.UpdateCustomActionInDb");

            var _oDcDAO= new DcDAO();
            var DcStartDate = new DateTime().GetDateAndTime();
            var DataCaptureRequest = MakeGetCompleteDataCaptureRequest(DcStartDate);

            var DCClientGuid = GetDCClientGuidById();

            //CPDcResultsId
            var DcResultsClientGuid = _oDcDAO.GetDcResultsClientGuidById(CPDcResultsId);
            var _ActionDAO = new ActionDAO();

            var Actions = {};
            var IsNC = false;

           // alert('UpdateCustomActionInDb CPActionResult : ' + JSON.stringify(CPActionResult));
            for (var itrCPActionResult in CPActionResult) {
                if (CPActionResult[itrCPActionResult].IsNC == true) {
                    IsNC = true;
                }
                //alert(JSON.stringify(CPActionResult[itrCPActionResult]));
                if (CPActionResult[itrCPActionResult].DCNCMappingClientId == "") {
                    var oAction = GetAction(DataCaptureRequest, DCClientGuid, DcResultsClientGuid, itrCPActionResult, "", CPActionResult[itrCPActionResult]);
                    Actions[itrCPActionResult] = oAction;
                    //alert(JSON.stringify(oAction));
                }
                else if (CPActionResult[itrCPActionResult].IsDisable == true) {
                    //alert("DCNCMapping : " + CPActionResult[itrCPActionResult].IsDisable + ", RuleId : " + itrCPActionResult + ", DNNCMappimgServerId : " + CPActionResult[itrCPActionResult].DNNCMappimgServerId);
                    if (CPActionResult[itrCPActionResult].DNNCMappimgServerId == 0) {
                        _ActionDAO.DeleteAction(DCClientGuid, itrCPActionResult);
                    }
                    else {
                        //alert("Disable action");
                        _ActionDAO.DisableAction(DCClientGuid, itrCPActionResult);
                    }
                    delete CPActionResult[itrCPActionResult];
                }
                else {
                    var DeletedActionIndexLst = [];
                    for (var i = 0; i < CPActionResult[itrCPActionResult].Actions.length; i++) {
                        //alert("ActionsDetails : " + JSON.stringify(CPActionResult[itrCPActionResult].Actions[i]));
                        if (CPActionResult[itrCPActionResult].Actions[i].IsDisable == true) {
                            if (CPActionResult[itrCPActionResult].Actions[i].ActionDetailsServerId == 0) {
                                _ActionDAO.DeleteActionDetails(CPActionResult[itrCPActionResult].Actions[i].ActionDetailsClientId);
                            }
                            else {
                                _ActionDAO.DisableActionDetails(CPActionResult[itrCPActionResult].Actions[i].ActionDetailsClientId, DCClientGuid, itrCPActionResult);
                            }
                            //CPActionResult[itrCPActionResult].Actions.splice(i, 1);
                            DeletedActionIndexLst.push(i);
                        }
                        else if (CPActionResult[itrCPActionResult].Actions[i].ActionDetailsClientId == "") {
                            //alert(JSON.stringify(CPActionResult[itrCPActionResult].Actions[i]));                                      
                            var _oActionDetailsEntity = GetActionDetailsEntity(DataCaptureRequest, CPActionResult[itrCPActionResult].ActionClientGuid, "", CPActionResult[itrCPActionResult].Actions[i]);
                            //alert(JSON.stringify(_oActionDetailsEntity));

                            var _oActionDetailsDAO = new DefaultMasterDAO("ActionDetailsEntity");
                            _oActionDetailsEntity = _oActionDetailsDAO.CreateMaster(_oActionDetailsEntity);

                            _ActionDAO.UpdateSyncStatusForDCNCMappingAndAction(DCClientGuid, itrCPActionResult);

                            CPActionResult[itrCPActionResult].Actions[i].ActionDetailsClientId = _oActionDetailsEntity.Id;

                            //alert(JSON.stringify(CPActionResult[itrCPActionResult]));
                        }
                    }
                    for (var i = 0; i < DeletedActionIndexLst.length; i++) {
                        CPActionResult[itrCPActionResult].Actions.splice(DeletedActionIndexLst[i], 1);
                    }

                    /**********MultiMediaUpdation   START*************/

                    var DeletedMultimediaSubElements = [];
                    for (var j = 0; j < CPActionResult[itrCPActionResult].MultimediaSubElements.length; j++) {
                        if (CPActionResult[itrCPActionResult].MultimediaSubElements[j].IsDisabled == true) {
                            if (CPActionResult[itrCPActionResult].MultimediaSubElements[j].ServerId == 0) {
                                _ActionDAO.DeleteMultiMediaSubElements(CPActionResult[itrCPActionResult].MultimediaSubElements[j].ClientId);
                            }
                            else {
                                _ActionDAO.DisableMultiMediaSubElements(CPActionResult[itrCPActionResult].MultimediaSubElements[j].ClientId, DCClientGuid, itrCPActionResult);
                            }
                            //CPActionResult[itrCPActionResult].MultimediaSubElements.splice(j, 1);
                            DeletedMultimediaSubElements.push(j);
                        }
                        else if (CPActionResult[itrCPActionResult].MultimediaSubElements[j].ClientId == "") {
                            CPActionResult[itrCPActionResult].MultimediaSubElements[j].MappedEntityClientGuid = CPActionResult[itrCPActionResult].ActionClientGuid;
                            var _oMultiMediaSubElements = GetMultiMediaSubElement(DataCaptureRequest, CPActionResult[itrCPActionResult].MultimediaSubElements[j]);

                            var _oMultiMediaSubElementsDAO = new DefaultMasterDAO("MultiMediaSubElements");
                            _oMultiMediaSubElements = _oMultiMediaSubElementsDAO.CreateMaster(_oMultiMediaSubElements);

                            _ActionDAO.UpdateSyncStatusForDCNCMappingAndAction(DCClientGuid, itrCPActionResult);

                            CPActionResult[itrCPActionResult].MultimediaSubElements[j].ClientId = _oMultiMediaSubElements.Id;
                            CPActionResult[itrCPActionResult].MultimediaSubElements[j].ClientGuid = _oMultiMediaSubElements.ClientGuid;
                        }
                    }
                    for (var j = 0; j < DeletedMultimediaSubElements.length; j++) {
                        CPActionResult[itrCPActionResult].MultimediaSubElements.splice(DeletedMultimediaSubElements[j], 1);
                    }


                   /************MultimediaUpdation END*****************/
                }
            }

            if (JSON.stringify(Actions) != '{}') {
               // alert('Actions  :' + JSON.stringify(Actions));
                var ActionInfo = _ActionDAO.CreateActions(Actions);

                var Key;
                for (var itrCPActionResult in CPActionResult) {
                    if (ActionInfo[itrCPActionResult] != undefined) {
                        CPActionResult[itrCPActionResult].ActionClientId = ActionInfo[itrCPActionResult].ActionClientId;
                        CPActionResult[itrCPActionResult].ActionClientGuid = ActionInfo[itrCPActionResult].ActionClientGuid;
                        CPActionResult[itrCPActionResult].DCNCMappingClientId = ActionInfo[itrCPActionResult].DCNCMappingClientId;
                        for (var i = 0; i < CPActionResult[itrCPActionResult].Actions.length; i++) {
                            if (CPActionResult[itrCPActionResult].Actions[i].ActionType == CPActionType.CustomAction) {
                                Key = CPActionResult[itrCPActionResult].Actions[i].Name;
                            }
                            else if (CPActionResult[itrCPActionResult].Actions[i].ActionType == CPActionType.PredefinedAction) {
                                Key = CPActionResult[itrCPActionResult].Actions[i].PreDefinedActionId;
                            }
                            CPActionResult[itrCPActionResult].Actions[i].ActionDetailsClientId = ActionInfo[itrCPActionResult].ActionDetails[Key].ActionDetailsClientId;
                        }
                       
                    }
                }
            }


            var DCNCMappingListFromDB = _oDcDAO.GetDCNCMappingByDataCaptureClientGuid(DCClientGuid);

            var IsAnyNC = false;
            if (DCNCMappingListFromDB != null) {
                for (var i = 0; i < DCNCMappingListFromDB.length; i++) {
                    if (DCNCMappingListFromDB[i].IsNC == 'true' || DCNCMappingListFromDB[i].IsNC == true) {
                        IsAnyNC = true;
                        break;
                    }
                }
            }
          
            var IsAnyNewNC = false;
            for (var i = 0; i < MyInstance.DCNCMappingList.length; i++) {
                if (MyInstance.DCNCMappingList[i].IsNC == 'true' || MyInstance.DCNCMappingList[i].IsNC == true) {
                    IsAnyNewNC = true;
                }

            }

          //  alert('IsAnyNC : ' + IsAnyNC + ' , IsAnyNewNC : ' + IsAnyNewNC);

            if (IsAnyNC != true && IsAnyNC != 'true' && IsAnyNewNC != true) {
                var DataCaptureUpdateQuery = "UPDATE DataCaptureEntity SET IsSynchronized='false',TimeStamp = '" + CurrenntDateAndTime + "',IsAnyNC = '" + IsAnyNewNC + "' WHERE Id=" + DcId;
                window.OneViewSqlite.excecuteSql(DataCaptureUpdateQuery);
            }

            OneViewConsole.Debug("UpdateCustomActionInDb End", "DataCaptureBO.UpdateCustomActionInDb");

        }
        catch (Excep) {
          //  alert("DataCaptureBO.UpdateCustomActionInDb : " + Excep);
          //  alert("DataCaptureBO.UpdateCustomActionInDb 22 : " + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateCustomActionInDb", Excep);
        }
    }

    var UpdateCPActionResultForNoNC = function (oActionNCConfig, IsRuleViolated) {

        try {
            OneViewConsole.Debug("UpdateCPActionResultForNoNC Start", "DataCaptureBO.UpdateCPActionResultForNoNC");

            // alert('UpdateCPActionResultForNoNC CPActionResult : ' + JSON.stringify(CPActionResult));
            //if (IsRuleViolated == true) {
                if (CPActionResult[oActionNCConfig.RuleId] != undefined) {
                    if (CPActionResult[oActionNCConfig.RuleId].DCNCMappingClientId == "") {
                        delete CPActionResult[oActionNCConfig.RuleId];
                    }
                    else {
                        CPActionResult[oActionNCConfig.RuleId].IsDisable = true;
                        CPActionResult[oActionNCConfig.RuleId].IsNC = false;
                        for (var k = 0; k < CPActionResult[oActionNCConfig.RuleId].Actions.length; k++) {
                            CPActionResult[oActionNCConfig.RuleId].Actions[k].IsDisable = true;
                        }
                    }
                }
           // }

           // alert('UpdateCPActionResultForNoNC CPActionResult : ' + JSON.stringify(CPActionResult));
           // alert('UpdateCPActionResultForNoNC oScope.CustomActions : ' + JSON.stringify(oScope.CustomActions));

            OneViewConsole.Debug("UpdateCPActionResultForNoNC End", "DataCaptureBO.UpdateCPActionResultForNoNC");

        }
        catch (Excep) {
          //  alert("DataCaptureBO.UpdateCPActionResultForNoNC : " + Excep);
          //  alert("DataCaptureBO.UpdateCPActionResultForNoNC 22 : " + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateCPActionResultForNoNC", Excep);
        }
    }

    this.UpdateRightPanelComments = function (CommentsRightPanel, AttributeId) {
        try {
            OneViewConsole.Debug("UpdateRightPanelComments Start", "LVPageComponent.UpdateRightPanelComments");

            if (CommentsRightPanel != "" && CommentsRightPanel != undefined) {

                var _oLVSpecialCharacterValidationComponent = new LVSpecialCharacterValidationComponent();
                CommentsRightPanel = _oLVSpecialCharacterValidationComponent.RemoveSpecialCharacters(CommentsRightPanel);

                MyInstance.UpdateCommentsModel(AttributeId, CommentsRightPanel);
            }
            else {
                oNotificationComponent.Notify(LVxlatService.xlat("MN-RQ-LVI-001 ::Please enter valid comment"), MyInstance.DefaultJavaScriptAlert);
            }

            OneViewConsole.Debug("UpdateRightPanelComments End", "LVPageComponent.UpdateRightPanelComments");
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "LVPageComponent.UpdateRightPanelComments", xlatService);
        }
    }


    this.UpdateCommentsModel = function (AttributeId, Comments) {

        try {
            OneViewConsole.Debug("UpdateCommentsModel Start", "DataCaptureBO.UpdateCommentsModel");

            if (CPTemplateResult[AttributeId] == undefined) {
                CPTemplateResult[AttributeId] = { 'Comments': '' , IsModified : false};
            }

            if (CPTemplateResult[AttributeId] != undefined) {

                CPTemplateResult[AttributeId].IsModified = true;
                CPTemplateResult[AttributeId].Comments = Comments;
            }

            //alert('CPTemplateResult : ' + JSON.stringify(CPTemplateResult));

            OneViewConsole.Debug("UpdateCommentsModel End", "DataCaptureBO.UpdateCommentsModel");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateCommentsModel", Excep);
        }
    }

   
    this.UpdateCommentsInDcResultDetails = function () {

        try {
            OneViewConsole.Debug("UpdateCommentsInDcResultDetails Start", "DataCaptureBO.UpdaUpdateCommentsInDcResultDetailsteCommentsModel");

            var DcResultDetailsList = new DcDAO().GetDcResultDetails_DAO(DcId, LoginUserId);

            //alert('DcResultDetailsList : ' + JSON.stringify(DcResultDetailsList));
          
            if (DcResultDetailsList != null) {
                for (var i = 0; i < DcResultDetailsList.length ; i++) {
                    var AttributeData = CPTemplateResult[DcResultDetailsList[i].AttributeNodeId];
                    if (AttributeData != undefined && AttributeData.IsModified == true) {
                        var Query = "UPDATE DcResultDetailsEntity SET Comments ='" + AttributeData.Comments + "' WHERE ClientGuid = '" + DcResultDetailsList[i].ClientGuid + "'";
                       // alert('UpdateCommentsInDcResultDetails Query : ' + Query);
                        var queryResult = window.OneViewSqlite.excecuteSql(Query);

                        delete CPTemplateResult[DcResultDetailsList[i].AttributeNodeId];
                    }

                    if (CPTemplateResult == undefined || Object.keys(CPTemplateResult).length < 1) {                       
                        break;
                    }

                }
            }
                        
            
            OneViewConsole.Debug("UpdateCommentsInDcResultDetails End", "DataCaptureBO.UpdateCommentsInDcResultDetails");
        }
        catch (Excep) {
           // alert('UpdateCommentsInDcResultDetails 11 : ' + Excep);
           // alert('UpdateCommentsInDcResultDetails : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.UpdateCommentsInDcResultDetails", Excep);
        }
    }

    var InsertCustomActionCommentsInDcResultDetails = function (_DcResultDetailsEntity, AttributeNodeId) {

        try {
            if (CPTemplateResult != null && CPTemplateResult[AttributeNodeId] != undefined && CPTemplateResult[AttributeNodeId].IsModified == true) {
                _DcResultDetailsEntity.Comments = CPTemplateResult[AttributeNodeId].Comments;
               // alert(' _DcResultDetailsEntity.Comments : ' + _DcResultDetailsEntity.Comments);
            }
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.InsertCustomActionCommentsInDcResultDetails", Excep);
        }
        finally {
        }
    }


    this.ClearCustomActionComments = function (AttributeId) {

        try {
            OneViewConsole.Debug("ClearCustomActionComments Start", "DataCaptureBO.ClearCustomActionComments");

            oScope.CommentsRightPanel = "";

            MyInstance.UpdateCommentsModel(AttributeId, "");


            OneViewConsole.Debug("ClearCustomActionComments End", "DataCaptureBO.ClearCustomActionComments");
        }
        catch (Excep) {
           // alert('ClearCustomActionComments 11 : ' + Excep);
           // alert('ClearCustomActionComments : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearCustomActionComments", Excep);
        }
    }

    var DeActivateAllTabs = function (RightPanelTabLength) {
        try {
            OneViewConsole.Debug("DeActivateCurrentTab Start", "DataCaptureBO.DeActivateCurrentTab");

            var RegularExpressionForRemoveClass = new RegExp('(\\s|^)activated(\\s|$)');

            for (var i = 0; i < RightPanelTabLength; i++) {
                var ObservationTab = document.getElementById('Tab_' + (i + 1));
                if (ObservationTab != null) {
                    ObservationTab.className = ObservationTab.className.replace(RegularExpressionForRemoveClass, ' ');
                    
                }
            }

            OneViewConsole.Debug("DeActivateCurrentTab End", "DataCaptureBO.DeActivateCurrentTab");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.DeActivateCurrentTab", Excep);
        }
    }

    var ActivateCurrentTab = function (HeaderId) {
        try {
            OneViewConsole.Debug("ActivateCurrentTab Start", "DataCaptureBO.ActivateCurrentTab");
           
            var NCTab = document.getElementById('Tab_' + HeaderId);
            if (NCTab != null) {
                NCTab.className = NCTab.className + " activated";
            }

            OneViewConsole.Debug("ActivateCurrentTab End", "DataCaptureBO.ActivateCurrentTab");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.ActivateCurrentTab", Excep);
        }
    }

    var CheckContainsData = function (Value,List) {
        try {
            OneViewConsole.Debug("CheckContainsData Start", "DataCaptureBO.CheckContainsData");

            var IsExist = false;
            for (var itr = 0; itr < List.length; itr++) {
                if (List[itr].Name == Value) {
                    IsExist = true;
                    break;
                }
            }

            OneViewConsole.Debug("CheckContainsData End", "DataCaptureBO.CheckContainsData");
            return IsExist;
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.CheckContainsData", Excep);
        }
    }

    this.ClearCustomActionCommentsUIAndModel = function () {

        try {
            OneViewConsole.Debug("ClearCustomActionCommentsUIAndModel Start", "DataCaptureBO.ClearCustomActionCommentsUIAndModel");

            oScope.CommentsRightPanel = "";
            CPTemplateResult = {};
            CPActionResult = {};
            oScope.CustomActions = [];

            OneViewConsole.Debug("ClearCustomActionCommentsUIAndModel End", "DataCaptureBO.ClearCustomActionCommentsUIAndModel");
        }
        catch (Excep) {
            // alert('ClearCustomActionCommentsUIAndModel 11 : ' + Excep);
            // alert('ClearCustomActionCommentsUIAndModel : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ClearCustomActionCommentsUIAndModel", Excep);
        }
    }


    this.ResetDataAfterItemClick = function () {

        try {
            OneViewConsole.Debug("ResetDataAfterItemClick Start", "DataCaptureBO.ResetDataAfterItemClick");

            DcId = OneViewSessionStorage.Get("DcId")

            if (DcId == null) {
                MyInstance.DCDetailFromDBList = null;
            }
            MyInstance.ClearControls();
            MyInstance.setDefaultValue();
            AttributeWiseActionDict = {};
            NCListForDelete = [];
            MyInstance.MultiMediaSubElementsList = [];



            // NC custom (Need to remove)
            CommentsResult = {};
            ObservationResult = {};
            MyInstance.DCNCMappingList = [];
            MyInstance.FormActionCount = 0;
            CPActionResult = {};
            CPTemplateResult = {};

            OneViewConsole.Debug("ResetDataAfterItemClick End", "DataCaptureBO.ResetDataAfterItemClick");
        }
        catch (Excep) {
             //alert('ResetDataAfterItemClick 11 : ' + Excep);
            // alert('ResetDataAfterItemClick : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.ResetDataAfterItemClick", Excep);
        }
    }

    this.SetCurrentDcIdInBO = function () {

        try {
            OneViewConsole.Debug("SetCurrentDcIdInBO Start", "DataCaptureBO.SetCurrentDcIdInBO");

            DcId = OneViewSessionStorage.Get("DcId");
            //alert('DcId  : ' + DcId);
            OneViewConsole.Debug("SetCurrentDcIdInBO End", "DataCaptureBO.SetCurrentDcIdInBO");
        }
        catch (Excep) {
           // alert('SetCurrentDcIdInBO 11 : ' + Excep);
            // alert('SetCurrentDcIdInBO : ' + JSON.stringify(Excep));
            throw oOneViewExceptionHandler.Create("BO", "DataCaptureBO.SetCurrentDcIdInBO", Excep);
        }
    }


    this.AttachPictureToAction = function (RuleId, IsNC, IsObservation, IsManualRule) {

        try {
            OneViewConsole.Debug("AttachPictureToAction Start", "DataCaptureBO.AttachPictureToAction");

            if (IsActionExist(RuleId)) {
                var _oOneViewCordovaCameraPlugin = new OneViewCordovaCameraPlugin();
                _oOneViewCordovaCameraPlugin.CaptureImage(function (LocalURL) {

                    var _OneViewGeolocationPlugin = new OneViewGeolocationPlugin();
                    var IsSuccess = _OneViewGeolocationPlugin.CheckGeolocation();
                    var Latitude = "";
                    var Longitude = "";

                    if (IsSuccess == true) {
                        var result = _OneViewGeolocationPlugin.GetLatitudeAndLongitude();
                        Latitude = result.Latitude;
                        Longitude = result.Longitude;
                    }

                    var Picture = {
                        "ClientId": '',
                        "ClientGuid": '',
                        "ServerId": 0,
                        "MappedEntityClientGuid": '',
                        "Dimension": DATEntityType.Action,
                        "MultiMediaType": "image/jpg",
                        "LocalURL": LocalURL,
                        "AlternateName": "No Image",
                        "Comments": "",
                        "IsDisabled": false,
                        "Latitude": Latitude,
                        "Longitude": Longitude
                    }
                    CPActionResult[RuleId].MultimediaSubElements.push(Picture);
                    oScope.ActionMultiMediaSubElements.push(Picture);
                    oScope.$apply();
                });
            }
            else {
                // oNotificationComponent.Notify(LVxlatService.xlat("IN-MG-LVI-002 :: Please select/add atleast one action"), MyInstance.DefaultJavaScriptAlert);
                alert(xlatService.xlat('IN-MG-LVI-002 :: Please select/add atleast one action'));
            }

            OneViewConsole.Debug("AttachPictureToAction End", "DataCaptureBO.AttachPictureToAction");
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "DataCaptureBO.AttachPictureToAction", xlatService);
        }
    }

    var IsActionExist = function (RuleId) {

        try {
            OneViewConsole.Debug("IsActionExist Start", "LVPageComponent.IsActionExist");

            var IsActionExist = false;

            if (CPActionResult[RuleId] != undefined) {
                for (var i = 0; i < CPActionResult[RuleId].Actions.length; i++) {
                    if (CPActionResult[RuleId].Actions[i].IsDisable == false) {
                        IsActionExist = true;
                        break;
                    }
                }
            }

            OneViewConsole.Debug("IsActionExist End", "LVPageComponent.IsActionExist");

            return IsActionExist;
        }
        catch (Excep) {
            oOneViewExceptionHandler.Catch(Excep, "LVPageComponent.IsActionExist", xlatService);
        }
    }

    /// <summary>
    /// LoadActionMultimediaSubElements
    /// </summary>
    /// <param name="oActionNCConfig">oActionNCConfig</param>  
    /// <param name="TemplateNodeId">TemplateNodeId</param> 
    /// <param name="ControlId">ControlId</param> 
    var LoadActionMultimediaSubElements = function (oActionNCConfig) {

        try {
            OneViewConsole.Debug("LoadActionMultimediaSubElements Start", "DataCaptureBO.LoadActionMultimediaSubElements");


            if (CPActionResult[oActionNCConfig.RuleId] != undefined && CPActionResult[oActionNCConfig.RuleId].IsDisable == false) {
                if (CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements.length == 0 && CPActionResult[oActionNCConfig.RuleId].ActionClientGuid != "") {
                    var _oActionDAO = new ActionDAO();
                    var MediaSubElements = _oActionDAO.GetAllMultiMediaSubElementsByActionClientGuid(CPActionResult[oActionNCConfig.RuleId].ActionClientGuid);
                    for (j = 0; j < MediaSubElements.length; j++) {
                        var Picture = {
                            "ClientId": MediaSubElements[j].Id,
                            "ClientGuid": MediaSubElements[j].ClientGuid,
                            "ServerId": MediaSubElements[j].ServerId,
                            "MappedEntityClientGuid": MediaSubElements[j].MappedEntityClientGuid,
                            "Dimension": MediaSubElements[j].Dimension,
                            "MultiMediaType": MediaSubElements[j].MultiMediaType,
                            "LocalURL": MediaSubElements[j].LocalURL,
                            "AlternateName": "No Image",
                            "Comments": MediaSubElements[j].Comments,
                            "IsDisabled": (MediaSubElements[j].IsDisabled == 'true') ? true : false,
                        }
                        oScope.ActionMultiMediaSubElements.push(Picture);
                        CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements.push(Picture);
                    }
                }
                else {
                    for (var i = 0; i < CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements.length; i++) {
                        if (CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements[i].IsDisabled == false) {
                            oScope.ActionMultiMediaSubElements.push(CPActionResult[oActionNCConfig.RuleId].MultimediaSubElements[i]);
                        }
                    }
                }
                oScope.$apply();
            }

            OneViewConsole.Debug("LoadActionMultimediaSubElements End", "DataCaptureBO.LoadActionMultimediaSubElements");
        }
        catch (Excep) {
            throw oOneViewExceptionHandler.Create("Framework", "DataCaptureBO.LoadActionMultimediaSubElements", Excep);
        }
    }

}









   








